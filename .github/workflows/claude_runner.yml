name: Claude Code â€¢ Auto PR on Comment

on:
  issue_comment:
    types: [created]
  schedule:
    - cron: '0 * * * *' 

concurrency:
  group: bug-fixing-ai-agent
  cancel-in-progress: false

jobs:
  run_claude:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '@wso2-engineering-bot')

    steps:
      - name: Checkout original repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DOC_FIXING_AGENT_GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Java 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  
          java-version: '11'

      - name: Verify Java installation
        run: |
          echo "Java version:"
          java -version

      - name: Set up Maven 3.6.3
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      - name: Set up Node.js (latest)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'   # install latest LTS version    

      - name: Verify Node installation
        run: |
          node --version
          npm --version
          
      - name: Check tool installation paths
        run: |
          echo "===== JAVA ====="
          echo "JAVA_HOME: $JAVA_HOME"
          which java
          java -version

          echo ""
          echo "===== MAVEN ====="
          echo "MAVEN_HOME: $MAVEN_HOME"
          which mvn
          mvn --version

          echo ""
          echo "===== NODE ====="
          echo "NODE_PATH: $NODE_PATH"
          which node
          which npm
          node --version
          npm --version

      - name: Get Latest WSO2AM Release and Download Pack
        run: |
          echo "Fetching latest release (including pre-releases) from wso2/product-apim..."

          # Get the latest release tag from GitHub API (including pre-releases)
          # Fetch all releases (stable + pre-releases), sort by created date, get the most recent
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/wso2/product-apim/releases?per_page=10" | \
            jq -r '.[0].tag_name' | sed -E 's/^v//')

          if [ -z "$LATEST_RELEASE" ] || [ "$LATEST_RELEASE" = "null" ]; then
            echo "Error: Could not fetch latest release"
            exit 1
          fi

          # Check if it's a pre-release
          IS_PRERELEASE=$(curl -s "https://api.github.com/repos/wso2/product-apim/releases?per_page=10" | \
            jq -r '.[0].prerelease')

          echo "Latest release found: $LATEST_RELEASE"
          if [ "$IS_PRERELEASE" = "true" ]; then
            echo "Type: Pre-release"
          else
            echo "Type: Stable release"
          fi

          # Construct download URL and file name
          DOWNLOAD_URL="https://github.com/wso2/product-apim/releases/download/v${LATEST_RELEASE}/wso2am-${LATEST_RELEASE}.zip"
          PACK_NAME="wso2am-${LATEST_RELEASE}"

          echo "Downloading ${PACK_NAME}.zip from GitHub release..."
          echo "Download URL: $DOWNLOAD_URL"

          # Download the pack
          wget -q "$DOWNLOAD_URL" -O "${PACK_NAME}.zip"

          if [ $? -ne 0 ]; then
            echo "Error: Failed to download the pack"
            exit 1
          fi

          echo "Extracting the pack..."
          unzip -q "${PACK_NAME}.zip"

          echo "Pack extracted successfully:"
          ls -la

          LATEST_RELEASE=$(echo "$LATEST_RELEASE" | sed -E 's/-.*$//')
          PACK_NAME=$(echo "$PACK_NAME" | sed -E 's/-rc[0-9]+$//')

          echo "Latest Release (cleaned): $LATEST_RELEASE"
          echo "Pack Name (cleaned): $PACK_NAME"

          # Set environment variable for later steps
          echo "WSO2AM_VERSION=${LATEST_RELEASE}" >> $GITHUB_ENV
          echo "WSO2AM_PACK_PATH=${GITHUB_WORKSPACE}/${PACK_NAME}" >> $GITHUB_ENV

      - name: Configure Git for commits
        run: |
          git config --global user.name ${{secrets.DOC_FIXING_AGENT_GIT_USER_NAME}}
          git config --global user.email ${{secrets.DOC_FIXING_AGENT_GIT_USER_EMAIL}}

      - name: Set environment variables
        run: |
          echo "PATH=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.28-6/x64/bin:/usr/share/maven/bin:/opt/hostedtoolcache/node/18.20.8/x64/bin:/usr/local/bin:/usr/bin:/bin" >> $GITHUB_ENV
          echo "JAVA_HOME=/opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/11.0.28-6/x64" >> $GITHUB_ENV
          echo "MAVEN_HOME=/usr/share/maven" >> $GITHUB_ENV
          echo "NODE_PATH=/opt/hostedtoolcache/node/18.20.8/x64/bin" >> $GITHUB_ENV
          
      - name: Prepare system prompt with environment variables
        id: prepare_prompt
        run: |
          if ! command -v envsubst &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y gettext-base
          fi

          export ISSUE_NUMBER="${{ github.event.issue.number }}"
          export REPOSITORY="${{ vars.DOC_FIXING_AGENT_REPOSITORY }}"
          export JAVA_HOME="${{ env.JAVA_HOME }}"
          export MAVEN_HOME="${{ env.MAVEN_HOME }}"
          export NODE_PATH="${{ env.NODE_PATH }}"
          export GITHUB_TOKEN="${{ secrets.DOC_FIXING_AGENT_GITHUB_TOKEN }}"
          export GITHUB_RUN_ID="${{ github.run_id }}"
          export WSO2AM_VERSION="${{ env.WSO2AM_VERSION }}"

          SYSTEM_PROMPT=$(envsubst < ${{github.workspace}}/.github/claude/system_prompt_update.txt)

          echo "SYSTEM_PROMPT<<EOF" >> $GITHUB_ENV
          echo "$SYSTEM_PROMPT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
          echo "REPOSITORY=$REPOSITORY" >> $GITHUB_ENV
          echo "WSO2AM_VERSION=$WSO2AM_VERSION" >> $GITHUB_ENV
          echo "GITHUB_RUN_ID=$GITHUB_RUN_ID" >> $GITHUB_ENV

      - name: Run Claude (with environment persistence)
        id: run_claude
        uses: anthropics/claude-code-action@v1
        env:
          PATH: ${{ env.PATH }}
          JAVA_HOME: ${{ env.JAVA_HOME }}
          MAVEN_HOME: ${{ env.MAVEN_HOME }}
          NODE_PATH: ${{ env.NODE_PATH }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPOSITORY: ${{ vars.DOC_FIXING_AGENT_REPOSITORY }}
          GITHUB_TOKEN: ${{ secrets.DOC_FIXING_AGENT_GITHUB_TOKEN }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          WSO2AM_VERSION: ${{ env.WSO2AM_VERSION }}
          
        with:
          anthropic_api_key: ${{ secrets.DOC_FIXING_AGENT_ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.DOC_FIXING_AGENT_GITHUB_TOKEN }}
          show_full_output: true
          prompt: ${{ env.SYSTEM_PROMPT }}
          trigger_phrase: "@wso2-engineering-bot"
          claude_args: |
            --allowedTools "Bash(*),Bash(sudo apt:*),Bash(gh *),Bash(zip:*),Bash(apt:*),Bash(cp:*),Bash(java:*),Bash(npm:*),Bash(shell:*),Bash(node:*),Bash(mvn:*),Bash(mkdir:*),Bash(cd:*),Bash(ls:*),Bash(unzip:*),Bash(wget:*),Bash(git:*),Bash(mkdocs:*),Bash(python3:*),Bash(pip3:*),Bash(rm:*),WebFetch,WebSearch,mcp__github__create_pull_request,mcp__github__get_issue,mcp__github__search_pull_requests,mcp__github__list_branches,Edit,Read,Write,mcp__github__update_issue,mcp__github__create_branch,mcp__github__add_issue_comment,mcp__github__get_issue_comments,mcp__github__search_issues"
            --model claude-sonnet-4-20250514
      - name: Check file location of WSO2AM pack
        run: |
          echo "WSO2AM Version: ${WSO2AM_VERSION}"
          echo "WSO2AM Pack Path: ${WSO2AM_PACK_PATH}"
          echo ""
          echo "Listing contents of workspace:"
          ls -l $GITHUB_WORKSPACE
          echo ""
          echo "Listing contents of wso2am-${WSO2AM_VERSION} directory:"
          ls -l ${WSO2AM_PACK_PATH}

      - name: Upload artifact pack
        uses: actions/upload-artifact@v4
        with:
          name: wso2am-${{ env.WSO2AM_VERSION }}-issue-${{ github.event.issue.number }}
          path: ${{ github.workspace }}/wso2am-${{ env.WSO2AM_VERSION }}-issue-${{ github.event.issue.number }}.zip

      - name: Get next queued issue
        id: get_next_queued
        env:
          GITHUB_TOKEN: ${{ secrets.DOC_FIXING_AGENT_GITHUB_TOKEN }}
        run: |
          ISSUE_JSON=$(gh issue list --label "AI-Agent/Queued" --state open --json number,createdAt --limit 100 \
            | jq '[.[]] | sort_by(.createdAt) | .[0]')
          if [ "$ISSUE_JSON" = "null" ] || [ -z "$ISSUE_JSON" ]; then
            echo "next_issue_number=" >> $GITHUB_OUTPUT
            exit 0
          fi
          NEXT_ISSUE_NUMBER=$(echo "$ISSUE_JSON" | jq -r .number)
          echo "next_issue_number=$NEXT_ISSUE_NUMBER" >> $GITHUB_OUTPUT

      - name: Exit if no queued issues
        if: steps.get_next_queued.outputs.next_issue_number == ''
        run: |
          echo "No queued issues."
          exit 0

      - name: Update labels and trigger Claude
        env:
          GITHUB_TOKEN: ${{ secrets.DOC_FIXING_AGENT_GITHUB_TOKEN }}
        if: steps.get_next_queued.outputs.next_issue_number != ''
        run: |
          ISSUE=${{ steps.get_next_queued.outputs.next_issue_number }}

          gh issue edit $ISSUE --remove-label "AI-Agent/Queued"
          gh issue edit $ISSUE --add-label "AI-Agent/In-Progress"
          gh issue comment $ISSUE --body "@wso2-engineering-bot create a PR for this issue following repo conventions"
