{"version":3,"file":"2082.602f4d2dcc55f7c83255.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/AsyncApiConsole/WebhookSubscriptionUI.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/AsyncApiConsole/GenericSubscriptionUI.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/AsyncApiConsole/AsyncApiUI.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Details/AsyncApiConsole/AsyncApiConsole.jsx"],"sourcesContent":["/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useReducer, useEffect } from 'react';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Typography from '@mui/material/Typography';\nimport AccordionActions from '@mui/material/AccordionActions';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Grid from '@mui/material/Grid';\nimport Radio from '@mui/material/Radio';\nimport { RadioGroup, useTheme } from '@mui/material';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Utils from 'AppData/Utils';\nimport Badge from '@mui/material/Badge';\n\nfunction reducer(state, { field, value }) {\n    return { ...state, [field]: value };\n}\n\nfunction WebhookSubscriptionUI(props) {\n    const intl = useIntl();\n    const verb = props.topic.type.toLowerCase();\n    const trimmedVerb = verb === 'publish' || verb === 'subscribe' ? verb.substr(0, 3) : verb;\n    const theme = useTheme();\n    const backgroundColor = theme.custom.resourceChipColors[trimmedVerb];\n    const { generateGenericWHSubscriptionCurl, topic, endPoint } = props;\n    const initialSubscriptionState = {\n        topic: topic.name,\n        secret: null,\n        lease: 50000,\n        mode: 'subscribe',\n        callback: null,\n    };\n    const [curl, setCurl] = useState(generateGenericWHSubscriptionCurl(initialSubscriptionState, endPoint));\n    const [formError, setFormError] = useState(false);\n    const [state, dispatch] = useReducer(reducer, initialSubscriptionState);\n\n    useEffect(() => {\n        setCurl(generateGenericWHSubscriptionCurl(initialSubscriptionState, endPoint));\n    }, [endPoint]);\n    const handleClick = () => {\n        if (!state.callback || state.callback.length < 1) {\n            setFormError(true);\n        } else {\n            setFormError(false);\n            setCurl(generateGenericWHSubscriptionCurl(state, endPoint));\n        }\n    };\n\n    const handleChange = (e) => {\n        dispatch({ field: e.target.name, value: e.target.value });\n    };\n\n    return (\n        <Accordion sx={{\n            marginBottom: '10px',\n            border: `1px solid ${backgroundColor}`,\n        }}\n        >\n            <AccordionSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls='wh-subscription-content'\n                id='wh-subscription-header'\n                sx={{\n                    backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n                    maxHeight: '40px',\n                    borderColor: '#80bdff',\n                    '&$expanded': {\n                        maxHeight: '40px',\n                    },\n                }}\n            >\n                <Grid container direction='row' justifyContent='space-between' alignItems='center' spacing={0}>\n                    <Grid item md={11}>\n                        <Badge invisible='false' color='error' variant='dot'>\n                            <Button\n                                disableFocusRipple\n                                variant='outlined'\n                                size='small'\n                                sx={{\n                                    backgroundColor: '#ffffff',\n                                    borderColor: backgroundColor,\n                                    color: backgroundColor,\n                                    width: theme.spacing(2),\n                                }}\n                            >\n                                {trimmedVerb.toUpperCase()}\n                            </Button>\n                        </Badge>\n                        <Typography display='inline' style={{ margin: '0px 30px' }} gutterBottom>\n                            {topic.name}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </AccordionSummary>\n            <AccordionDetails>\n                <Grid container direction='column' wrap='nowrap' spacing={3}>\n                    <Grid item xs={6} marginBottom={2}>\n                        <RadioGroup aria-label='mode' name='mode' value={state.mode} row onChange={handleChange}>\n                            <FormControlLabel\n                                value='subscribe'\n                                control={<Radio />}\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Subscribe',\n                                    id: 'Apis.Details.AsyncApiConsole.Webhooks.Subscribe',\n                                })}\n                            />\n                            <FormControlLabel\n                                value='unsubscribe'\n                                control={<Radio />}\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Unsubscribe',\n                                    id: 'Apis.Details.AsyncApiConsole.Webhooks.Unsubscribe',\n                                })}\n                            />\n                        </RadioGroup>\n                    </Grid>\n                    <Grid item xs={6} marginBottom={2}>\n                        <TextField\n                            variant='outlined'\n                            size='small'\n                            sx={{ width: '50%' }}\n                            name='callback'\n                            id='standard-full-width'\n                            label={intl.formatMessage({\n                                defaultMessage: 'Callback URL',\n                                id: 'Apis.Details.AsyncApiConsole.Webhooks.callback',\n                            })}\n                            error={formError}\n                            required\n                            placeholder='www.webhook.site'\n                            onChange={handleChange}\n                            fullWidth\n                            InputProps={{\n                                disableUnderline: true,\n                                classes: {\n                                    root: {\n                                        padding: 0,\n                                        'label + &': {\n                                            marginTop: theme.spacing(1),\n                                        },\n                                    },\n                                    input: {\n                                        borderRadius: 4,\n                                        backgroundColor: theme.palette.common.white,\n                                        border: '1px solid #ced4da',\n                                        padding: '5px 12px',\n                                        marginTop: '11px',\n                                        marginBottom: '11px',\n                                        width: '100%',\n                                        transition: theme.transitions.create(['border-color', 'box-shadow']),\n                                        '&:focus': {\n                                            borderColor: '#80bdff',\n                                            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                                        },\n                                        fontSize: 12,\n                                    },\n                                },\n                            }}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </Grid>\n                    {state.mode === 'subscribe' && (\n                        <>\n                            <Grid item xs={6} marginBottom={2}>\n                                <TextField\n                                    variant='outlined'\n                                    size='small'\n                                    sx={{ width: '50%' }}\n                                    name='secret'\n                                    id='standard-full-width'\n                                    label={intl.formatMessage({\n                                        defaultMessage: 'Secret',\n                                        id: 'Apis.Details.AsyncApiConsole.Webhooks.secret',\n                                    })}\n                                    placeholder='secret'\n                                    onChange={handleChange}\n                                    fullWidth\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        classes: {\n                                            root: {\n                                                padding: 0,\n                                                'label + &': {\n                                                    marginTop: theme.spacing(1),\n                                                },\n                                            },\n                                            input: {\n                                                borderRadius: 4,\n                                                backgroundColor: theme.palette.common.white,\n                                                border: '1px solid #ced4da',\n                                                padding: '5px 12px',\n                                                marginTop: '11px',\n                                                marginBottom: '11px',\n                                                width: '100%',\n                                                transition: theme.transitions.create(['border-color', 'box-shadow']),\n                                                '&:focus': {\n                                                    borderColor: '#80bdff',\n                                                    boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                                                },\n                                                fontSize: 12,\n                                            },\n                                        },\n                                    }}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={6} marginBottom={2}>\n                                <TextField\n                                    variant='outlined'\n                                    size='small'\n                                    sx={{ width: '50%' }}\n                                    name='lease'\n                                    id='standard-full-width'\n                                    label={intl.formatMessage({\n                                        defaultMessage: 'Lease Seconds',\n                                        id: 'Apis.Details.AsyncApiConsole.Webhooks.lease',\n                                    })}\n                                    onChange={handleChange}\n                                    defaultValue={50000}\n                                    fullWidth\n                                    InputProps={{\n                                        disableUnderline: true,\n                                        classes: {\n                                            root: {\n                                                padding: 0,\n                                                'label + &': {\n                                                    marginTop: theme.spacing(1),\n                                                },\n                                            },\n                                            input: {\n                                                borderRadius: 4,\n                                                backgroundColor: theme.palette.common.white,\n                                                border: '1px solid #ced4da',\n                                                padding: '5px 12px',\n                                                marginTop: '11px',\n                                                marginBottom: '11px',\n                                                width: '100%',\n                                                transition: theme.transitions.create(['border-color', 'box-shadow']),\n                                                '&:focus': {\n                                                    borderColor: '#80bdff',\n                                                    boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                                                },\n                                                fontSize: 12,\n                                            },\n                                        },\n                                    }}\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </Grid>\n                        </>\n                    )}\n                    <Grid item xs={12}>\n                        <TextField\n                            variant='filled'\n                            label={intl.formatMessage({\n                                defaultMessage: 'cURL',\n                                id: 'Apis.Details.AsyncApiConsole.Webhooks.curl',\n                            })}\n                            defaultValue=''\n                            value={curl}\n                            fullWidth\n                            multiline\n                            InputProps={{\n                                disableUnderline: true,\n                                classes: {\n                                    root: {\n                                        padding: 0,\n                                        'label + &': {\n                                            marginTop: theme.spacing(1),\n                                        },\n                                    },\n                                    input: {\n                                        borderRadius: 4,\n                                        backgroundColor: theme.custom.curlGenerator.backgroundColor,\n                                        color: theme.custom.curlGenerator.color,\n                                        border: '1px solid #ced4da',\n                                        padding: '5px 12px',\n                                        marginTop: '11px',\n                                        marginBottom: '11px',\n                                        width: '100%',\n                                        transition: theme.transitions.create(['border-color', 'box-shadow']),\n                                        '&:focus': {\n                                            borderColor: '#80bdff',\n                                            boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                                        },\n                                        fontSize: 12,\n                                        fontFamily: 'monospace',\n                                        fontWeight: 600,\n                                    },\n                                },\n                            }}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            </AccordionDetails>\n            <AccordionActions style={{ paddingRight: '18px' }}>\n                <Button size='small' onClick={handleClick}>\n                    <FormattedMessage id='Apis.Details.AsyncApiConsole.Curl' defaultMessage='Generate Curl' />\n                </Button>\n                <Button\n                    size='small'\n                    onClick={() => {\n                        navigator.clipboard.writeText(curl)\n                            .then(() => Alert.info(intl.formatMessage({\n                                defaultMessage: 'cURL copied',\n                                id: 'Apis.Details.AsyncApiConsole.Webhooks.curl.copied',\n                            })));\n                    }}\n                >\n                    <FormattedMessage id='Apis.Details.AsyncApiConsole.Copy' defaultMessage='Copy Curl' />\n                </Button>\n            </AccordionActions>\n        </Accordion>\n    );\n}\n\nexport default WebhookSubscriptionUI;\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport Typography from '@mui/material/Typography';\nimport AccordionActions from '@mui/material/AccordionActions';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from 'AppData/Utils';\nimport Grid from '@mui/material/Grid';\nimport Badge from '@mui/material/Badge';\nimport { useTheme } from '@mui/material';\n\nexport default function GenericSubscriptionUI(props) {\n    const verb = props.topic.type.toLowerCase();\n    const trimmedVerb = verb === 'publish' || verb === 'subscribe' ? verb.substr(0, 3) : verb;\n    const theme = useTheme();\n    const backgroundColor = theme.custom.resourceChipColors[trimmedVerb];\n    const {\n        generateGenericSubscriptionCommand, topic, expandable, endPoint,\n    } = props;\n    const [command, setCommand] = useState(generateGenericSubscriptionCommand(topic, endPoint));\n\n    useEffect(() => {\n        setCommand(generateGenericSubscriptionCommand(topic, endPoint));\n    }, [endPoint]);\n    const handleClick = () => {\n        setCommand(generateGenericSubscriptionCommand(topic, endPoint));\n    };\n\n    return (\n        <Accordion\n            sx={{\n                marginBottom: '10px',\n                border: `1px solid ${backgroundColor}`,\n            }}\n            style={{ pointerEvents: expandable ? 'auto' : 'none' }}\n        >\n            <AccordionSummary\n                expandIcon={expandable && (<ExpandMoreIcon />)}\n                aria-controls='generic-subscription-content'\n                id='generic-subscription-header'\n                sx={{\n                    backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n                    maxHeight: '40px',\n                    '&$expanded': {\n                        maxHeight: '40px',\n                    },\n                }}\n            >\n                <Grid container direction='row' justifyContent='space-between' alignItems='center' spacing={0}>\n                    <Grid item md={11}>\n                        <Badge invisible='false' color='error' variant='dot'>\n                            <Button\n                                disableFocusRipple\n                                variant='outlined'\n                                size='small'\n                                sx={{\n                                    backgroundColor: '#ffffff',\n                                    borderColor: backgroundColor,\n                                    color: backgroundColor,\n                                    width: theme.spacing(2),\n                                }}\n                            >\n                                {trimmedVerb.toUpperCase()}\n                            </Button>\n                        </Badge>\n                        <Typography display='inline' style={{ margin: '0px 30px' }} gutterBottom>\n                            {topic.name}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </AccordionSummary>\n            <AccordionDetails>\n                <Grid container direction='column' wrap='nowrap'>\n                    <TextField\n                        variant='filled'\n                        label='cURL'\n                        defaultValue=''\n                        value={command}\n                        multiline\n                        InputProps={{\n                            disableUnderline: true,\n                            classes: {\n                                root: {\n                                    padding: 0,\n                                    'label + &': {\n                                        marginTop: theme.spacing(1),\n                                    },\n                                },\n                                input: {\n                                    borderRadius: 4,\n                                    backgroundColor: theme.custom.curlGenerator.backgroundColor,\n                                    color: theme.custom.curlGenerator.color,\n                                    border: '1px solid #ced4da',\n                                    padding: '5px 12px',\n                                    marginTop: '11px',\n                                    marginBottom: '11px',\n                                    width: '100%',\n                                    transition: theme.transitions.create(['border-color', 'box-shadow']),\n                                    '&:focus': {\n                                        borderColor: '#80bdff',\n                                        boxShadow: '0 0 0 0.2rem rgba(0,123,255,.25)',\n                                    },\n                                    fontSize: 12,\n                                    fontFamily: 'monospace',\n                                    fontWeight: 600,\n                                },\n                            },\n                        }}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                    />\n                </Grid>\n            </AccordionDetails>\n            <AccordionActions style={{ paddingRight: '18px' }}>\n                <Button size='small' onClick={handleClick}>\n                    <FormattedMessage id='Apis.Details.AsyncApiConsole.Curl' defaultMessage='Generate Curl' />\n                </Button>\n                <Button\n                    size='small'\n                    onClick={() => {\n                        navigator.clipboard.writeText(command).then(() => Alert.info(\n                            <FormattedMessage id='Apis.Details.AsyncApiConsole.Copied' defaultMessage='cURL copied' />,\n                        ));\n                    }}\n                >\n                    <FormattedMessage id='Apis.Details.AsyncApiConsole.Copy' defaultMessage='Copy Curl' />\n                </Button>\n            </AccordionActions>\n        </Accordion>\n    );\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport Progress from '../../../Shared/Progress';\nimport WebhookSubscriptionUI from './WebhookSubscriptionUI';\nimport GenericSubscriptionUI from './GenericSubscriptionUI';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport CONSTANTS from 'AppData/Constants';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { useIntl } from 'react-intl';\n\nconst PREFIX = 'AsyncApiUI';\n\nconst classes = {\n    endpointSelectorRoot: `${PREFIX}-endpointSelectorRoot`,\n    selectList: `${PREFIX}-selectList`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')({\n    [`& .${classes.endpointSelectorRoot}`]: {\n        paddingBottom: '20px',\n    },\n    // this styling is used to resemble the switch to swagger-ui switch\n    [`& .${classes.selectList}`]: {\n        minWidth: '130px',\n        maxWidth: '100%',\n        border: '2px solid #41444e',\n        fontFamily: 'sans-serif',\n        fontSize: '14px',\n        fontWeight: 700,\n        padding: '2px 2px 2px 10px',\n        borderRadius: '4px',\n        color: '#3b4151',\n    }\n});\n\nexport default function AsyncApiUI(props) {\n\n    const intl = useIntl();\n    const {\n        authorizationHeader,\n        URLs,\n        securitySchemeType,\n        accessTokenProvider,\n    } = props;\n    const { api } = useContext(ApiContext);\n    const isAdvertised = api.advertiseInfo && api.advertiseInfo.advertised;\n\n    let initialEndpoint;\n    initialEndpoint = URLs && (URLs.http || URLs.https);\n    if (api.type === CONSTANTS.API_TYPES.WS) {\n        initialEndpoint = URLs && (URLs.ws || URLs.wss);\n    }\n\n    let expandable = true;\n    if (!URLs || (!URLs.http && !URLs.https)) {\n        expandable = false;\n    }\n\n    const [allTopics, setAllTopics] = useState('');\n    const [endPoint, setEndpoint] = useState(initialEndpoint);\n\n    useEffect(() => {\n      let newInitialEndpoint = URLs && URLs.http;\n      if (api.type === CONSTANTS.API_TYPES.WS) {\n        newInitialEndpoint = URLs && URLs.ws;\n      }\n      setEndpoint(newInitialEndpoint);\n    }, [URLs, api.type]);\n\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promisedTopics = apiClient.getAllTopics(apiID);\n        promisedTopics.then((response) => {\n            setAllTopics(response.body);\n        }).catch((error) => {\n            console.log(error);\n            Alert.error(intl.formatMessage({\n                id: 'Apis.Details.AsyncApiConsole.AsyncApiUI.topics.get.error',\n                defaultMessage: 'Error while retrieving topics for the API.',\n            }));\n        });\n    }, []);\n\n    const handleServerChange = (event) => {\n        setEndpoint(event.target.value);\n    };\n\n    function generateAccessToken() {\n        let token;\n        if (authorizationHeader === 'apikey') {\n            token = accessTokenProvider();\n        } else if (securitySchemeType === 'BASIC') {\n            token = 'Basic ' + accessTokenProvider();\n        } else if (isAdvertised) {\n            token = accessTokenProvider();\n        } else {\n            token = 'Bearer ' + accessTokenProvider();\n        }\n        return token;\n    }\n\n    function generateGenericWHSubscriptionCurl(subscription, customEndpoint) {\n        const {\n            topic, callback, secret, mode, lease,\n        } = subscription;\n        const token = generateAccessToken();\n        const endpoint = customEndpoint || endPoint;\n        if (mode === 'subscribe') {\n            let curl = `curl -X POST '${endpoint}' -H 'Content-Type: application/x-www-form-urlencoded' -d 'hub.topic=${encodeURIComponent(topic)}' -d 'hub.callback=${encodeURIComponent(callback)}' -d 'hub.mode=${mode}'`;\n            if (secret) {\n                curl += ` -d 'hub.secret=${secret}'`;\n            }\n            if (lease) {\n                curl += ` -d 'hub.lease_seconds=${lease}'`;\n            }\n            if (api.advertiseInfo && api.advertiseInfo.adveritsed && authorizationHeader !== '') {\n                curl += ` -H '${authorizationHeader}: ${token}'`;\n            } else {\n                curl += ` -H 'Authorization: ${token}'`;\n            }\n            return curl;\n        } else {\n            let curl = `curl -X POST '${endpoint}' -H 'Content-Type: application/x-www-form-urlencoded' -d 'hub.topic=${encodeURIComponent(topic)}' -d 'hub.callback=${encodeURIComponent(callback)}' -d 'hub.mode=${mode}' -H 'Authorization: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                curl = `curl -X POST '${endpoint}' -H 'Content-Type: application/x-www-form-urlencoded' -d 'hub.topic=${encodeURIComponent(topic)}' -d 'hub.callback=${encodeURIComponent(callback)}' -d 'hub.mode=${mode}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        }\n    }\n\n    function getTopicName(topic) {\n        let topicName = topic.name;\n        // Remove the / from the topic name\n        if (topicName.charAt(0) === '/') {\n            topicName = topicName.substring(1);\n        }\n        return topicName;\n    }\n\n    function generateWSSubscriptionCommand(topic, customEndpoint) {\n        const token = generateAccessToken();\n        const endpoint = customEndpoint || endPoint;\n        if (topic.name.includes('*')) {\n            let wscat = `wscat -c '${endpoint}' -H '${securitySchemeType === 'API-KEY' ? 'apikey' : 'Authorization'}: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                wscat = `wscat -c '${endpoint}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return wscat;\n        } else {\n            let wscat = `wscat -c '${endpoint}/${getTopicName(topic)}' -H '${securitySchemeType === 'API-KEY' ? 'apikey': 'Authorization'}: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                wscat = `wscat -c '${endpoint}/${getTopicName(topic)}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return wscat;\n        }\n    }\n\n    function generateSSESubscriptionCommand(topic, customEndpoint) {\n        const token = generateAccessToken();\n        const endpoint = customEndpoint || endPoint;\n        if (topic.name.includes('*')) {\n            let curl = `curl -X GET '${endpoint}' -H 'Authorization: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                curl = `curl -X GET '${endpoint}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        } else {\n            let curl = `curl -X GET '${endpoint}/${getTopicName(topic)}' -H 'Authorization: ${token}'`;\n            if (isAdvertised && authorizationHeader !== '') {\n                curl = `curl -X GET '${endpoint}/${getTopicName(topic)}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        }\n    }\n\n    function generateASYNCSubscriptionCommand(topic, customEndpoint) {\n        const token = generateAccessToken();\n        const endpoint = customEndpoint || endPoint;\n        if (topic.name.includes('*')) {\n            let curl = `curl -X GET '${endpoint}' -H 'Authorization: ${token}'`;\n            if (authorizationHeader !== '') {\n                curl = `curl -X GET '${endpoint}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        } else {\n            let curl = `curl -X GET '${endpoint}/${getTopicName(topic)}' -H 'Authorization: ${token}'`;\n            if (authorizationHeader !== '') {\n                curl = `curl -X GET '${endpoint}/${getTopicName(topic)}' -H '${authorizationHeader}: ${token}'`;\n            }\n            return curl;\n        }\n    }\n\n    if (!allTopics) {\n        return <Progress />;\n    } else {\n        return (\n            <Root>\n                <FormControl variant=\"standard\" className={classes.endpointSelectorRoot}>\n                    <InputLabel>Servers</InputLabel>\n                    <Select\n                        variant=\"standard\"\n                        className={classes.selectList}\n                        id=\"api-endpoint-select\"\n                        value={endPoint}\n                        displayEmpty\n                        onChange={handleServerChange}\n                    >\n                        {Object.entries(URLs).map(([key, value]) => {\n                            if (value) {\n                                return <MenuItem value={value} key={key}>{value}</MenuItem>;\n                            }\n                        })}\n                    </Select>\n                </FormControl>\n                {api.type === CONSTANTS.API_TYPES.WEBSUB && allTopics.list.map((topic, index) => (\n                    <WebhookSubscriptionUI\n                        topic={topic}\n                        generateGenericWHSubscriptionCurl={generateGenericWHSubscriptionCurl}\n                        endPoint={endPoint}\n                        expandable\n                    />\n                ))}\n                {api.type === CONSTANTS.API_TYPES.SSE && allTopics.list.map((topic, index) => (\n                    <GenericSubscriptionUI\n                        generateGenericSubscriptionCommand={generateSSESubscriptionCommand}\n                        endPoint={endPoint}\n                        topic={topic}\n                        expandable\n                    />\n                ))}\n                {api.type === CONSTANTS.API_TYPES.WS && allTopics.list.map((topic, index) => (\n                    <GenericSubscriptionUI\n                        generateGenericSubscriptionCommand={generateWSSubscriptionCommand}\n                        endPoint={endPoint}\n                        topic={topic}\n                        expandable\n                    />\n                ))}\n                {api.type === CONSTANTS.API_TYPES.ASYNC && allTopics.list.map((topic, index) => (\n                    <GenericSubscriptionUI\n                        generateGenericSubscriptionCommand={generateASYNCSubscriptionCommand}\n                        endPoint={endPoint}\n                        topic={topic}\n                        expandable={expandable}\n                    />\n                ))}\n            </Root>\n        );\n    }\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { styled } from '@mui/material/styles';\nimport Paper from '@mui/material/Paper';\nimport PropTypes from 'prop-types';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport AuthManager from 'AppData/AuthManager';\nimport Icon from '@mui/material/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport TryOutController from '../../../Shared/ApiTryOut/TryOutController';\nimport { ApiContext } from '../ApiContext';\nimport Api from '../../../../data/api';\nimport Progress from '../../../Shared/Progress';\nimport AsyncApiUI from './AsyncApiUI';\n\nconst PREFIX = 'AsyncApiConsole';\n\nconst classes = {\n    paper: `${PREFIX}-paper`,\n    grid: `${PREFIX}-grid`,\n    userNotificationPaper: `${PREFIX}-userNotificationPaper`,\n    titleSub: `${PREFIX}-titleSub`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.paper}`]: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.grid}`]: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n\n    [`& .${classes.userNotificationPaper}`]: {\n        padding: theme.spacing(2),\n    },\n\n    [`& .${classes.titleSub}`]: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n}));\n\nexport default function AsyncApiConsole() {\n    const intl = useIntl();\n\n    const { api } = useContext(ApiContext);\n    const [securitySchemeType, setSecurityScheme] = useState('OAUTH');\n    const [selectedEnvironment, setSelectedEnvironment] = useState();\n    const [productionAccessToken, setProductionAccessToken] = useState();\n    const [sandboxAccessToken, setSandboxAccessToken] = useState();\n    const [environments, setEnvironments] = useState(null);\n    const [scopes, setScopes] = useState(null);\n    const [labels, setLabels] = useState(null);\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [selectedKeyType, setSelectedKey] = useState('PRODUCTION');\n    const [keys, setKeys] = useState([]);\n    const [sandboxApiKey, setSandboxApiKey] = useState('');\n    const [productionApiKey, setProductionApiKey] = useState('');\n    const environmentObject = api.endpointURLs;\n    const [URLs, setURLs] = useState(environmentObject.length > 0 ? environmentObject[0].URLs : []);\n    const [notFound, setNotFound] = useState(false);\n    const [advAuthHeader, setAdvAuthHeader] = useState('Authorization');\n    const [advAuthHeaderValue, setAdvAuthHeaderValue] = useState('');\n    const [selectedEndpoint, setSelectedEndpoint] = useState('PRODUCTION');\n\n    const user = AuthManager.getUser();\n\n    useEffect(() => {\n        if (selectedEnvironment && environmentObject.length > 0) {\n            const env = environmentObject.find(\n                (e) => e.environmentName === selectedEnvironment,\n            );\n            if (env && env.URLs) {\n                setURLs(env.URLs);\n            }\n        }\n    }, [selectedEnvironment, environmentObject]);\n    useEffect(() => {\n        const apiID = api.id;\n        const apiClient = new Api();\n        const promiseAPI = apiClient.getAPIById(apiID);\n        promiseAPI\n            .then((apiResponse) => {\n                const apiData = apiResponse.obj;\n                if (apiData.endpointURLs) {\n                    const environment = apiData.endpointURLs.map((endpoint) => {\n                        return { name: endpoint.environmentName, displayName: endpoint.environmentDisplayName };\n                    });\n                    setEnvironments(environment);\n                } else {\n                    setEnvironments([]);\n                }\n                if (apiData.labels) {\n                    const Label = apiData.labels.map((label) => {\n                        return label.name;\n                    });\n                    setLabels(Label);\n                } else {\n                    setLabels([]);\n                }\n                if (apiData.scopes) {\n                    const scopeList = apiData.scopes.map((scope) => {\n                        return scope.name;\n                    });\n                    setScopes(scopeList);\n                } else {\n                    setScopes([]);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.AsyncApi.error.occurred',\n                        defaultMessage: 'Error occurred while retrieving the API',\n                    }));\n                }\n                setScopes([]);\n                setEnvironments([]);\n                setLabels([]);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                }\n            });\n    }, []);\n\n    /**\n     * Load the access token for given key type\n     */\n    function updateAccessToken() {\n        let accessToken;\n        if (keys.get(selectedKeyType)) {\n            ({ accessToken } = keys.get(selectedKeyType).token);\n        }\n        if (selectedKeyType === 'PRODUCTION') {\n            setProductionAccessToken(accessToken);\n        } else {\n            setSandboxAccessToken(accessToken);\n        }\n    }\n\n    /**\n     * set Password\n     * @param {*} selectedKey\n     * @param {*} isUpdateToken\n     */\n    function setSelectedKeyType(selectedKey, isUpdateToken) {\n        if (isUpdateToken && (!api.advertiseInfo || !api.advertiseInfo.advertised)) {\n            setSelectedKey(selectedKey, updateAccessToken);\n        } else {\n            setSelectedKey(selectedKey);\n        }\n    }\n\n    function accessTokenProvider() {\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            return advAuthHeaderValue;\n        }\n        if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            return btoa(credentials);\n        }\n        if (securitySchemeType === 'API-KEY') {\n            if (selectedKeyType === 'PRODUCTION') {\n                return productionApiKey;\n            } else {\n                return sandboxApiKey;\n            }\n        } else if (selectedKeyType === 'PRODUCTION') {\n            return productionAccessToken;\n        } else {\n            return sandboxAccessToken;\n        }\n    }\n\n    if (api === null || !scopes || !labels || !environments) {\n        return <Progress />;\n    }\n    if (notFound) {\n        return <FormattedMessage id='Apis.Details.AsyncApiConsole.AsyncApiConsole.Api.Unavailable' defaultMessage='API Not Found !' />;\n    }\n\n    let isApiKeyEnabled = false;\n\n    let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n\n    if (api && api.securityScheme) {\n        isApiKeyEnabled = api.securityScheme.includes('api_key');\n        if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n            authorizationHeader = 'apikey';\n        }\n    }\n\n    if (api.advertiseInfo && api.advertiseInfo.advertised) {\n        authorizationHeader = advAuthHeader;\n    }\n\n    const generateUrls = (url) => {\n        const urlJson = {\n            http: null,\n            https: null,\n            ws: null,\n            wss: null,\n        };\n        const [protocol] = url.split('://');\n        urlJson[protocol] = url;\n        return urlJson;\n    };\n\n    const getURLs = () => {\n        if (api.advertiseInfo && api.advertiseInfo.advertised) {\n            if (selectedEndpoint === 'PRODUCTION') {\n                return generateUrls(api.advertiseInfo.apiExternalProductionEndpoint);\n            } else if (selectedEndpoint === 'SANDBOX') {\n                return generateUrls(api.advertiseInfo.apiExternalSandboxEndpoint);\n            }\n        }\n        return URLs;\n    };\n\n    return (\n        <Root>\n            <Typography variant='h4' className={classes.titleSub}>\n                <FormattedMessage id='Apis.Details.AsyncApiConsole.AsyncApiConsole.title' defaultMessage='Try Out' />\n            </Typography>\n            <Paper className={classes.paper}>\n                <Grid container className={classes.grid}>\n                    {!user && (!api.advertiseInfo || !api.advertiseInfo.advertised) && (\n                        <Grid item md={6}>\n                            <Paper className={classes.userNotificationPaper}>\n                                <Typography variant='h5' component='h3'>\n                                    <Icon>info</Icon>\n                                    {' '}\n                                    <FormattedMessage id='notice' defaultMessage='Notice' />\n                                </Typography>\n                                <Typography component='p'>\n                                    <FormattedMessage\n                                        id='api.console.require.access.token'\n                                        defaultMessage={'You need an access token to try the API. Please log '\n                                        + 'in and subscribe to the API to generate an access token. If you already '\n                                        + 'have an access token, please provide it below.'}\n                                    />\n                                </Typography>\n                            </Paper>\n                        </Grid>\n                    )}\n                </Grid>\n                <Grid container className={classes.grid}>\n                    <TryOutController\n                        setSecurityScheme={setSecurityScheme}\n                        securitySchemeType={securitySchemeType}\n                        setSelectedEnvironment={setSelectedEnvironment}\n                        selectedEnvironment={selectedEnvironment}\n                        productionAccessToken={productionAccessToken}\n                        setProductionAccessToken={setProductionAccessToken}\n                        sandboxAccessToken={sandboxAccessToken}\n                        setSandboxAccessToken={setSandboxAccessToken}\n                        environments={environments}\n                        scopes={scopes}\n                        labels={labels}\n                        setUsername={setUsername}\n                        setPassword={setPassword}\n                        username={username}\n                        password={password}\n                        setSelectedKeyType={setSelectedKeyType}\n                        selectedKeyType={selectedKeyType}\n                        setKeys={setKeys}\n                        setURLs={setURLs}\n                        setProductionApiKey={setProductionApiKey}\n                        setSandboxApiKey={setSandboxApiKey}\n                        productionApiKey={productionApiKey}\n                        sandboxApiKey={sandboxApiKey}\n                        environmentObject={environmentObject}\n                        setAdvAuthHeader={setAdvAuthHeader}\n                        setAdvAuthHeaderValue={setAdvAuthHeaderValue}\n                        advAuthHeader={advAuthHeader}\n                        advAuthHeaderValue={advAuthHeaderValue}\n                        setSelectedEndpoint={setSelectedEndpoint}\n                        selectedEndpoint={selectedEndpoint}\n                        api={api}\n                        URLs={null}\n                    />\n                </Grid>\n            </Paper>\n            <Paper className={classes.paper}>\n                <AsyncApiUI\n                    authorizationHeader={authorizationHeader}\n                    URLs={getURLs()}\n                    securitySchemeType={securitySchemeType}\n                    accessTokenProvider={accessTokenProvider}\n                />\n            </Paper>\n        </Root>\n    );\n}\n\nAsyncApiConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        root: PropTypes.string.isRequired,\n    }).isRequired,\n};\n"],"names":["reducer","state","_ref","field","value","_objectSpread","props","intl","useIntl","verb","topic","type","toLowerCase","trimmedVerb","substr","theme","useTheme","backgroundColor","custom","resourceChipColors","generateGenericWHSubscriptionCurl","endPoint","initialSubscriptionState","name","secret","lease","mode","callback","curl","setCurl","useState","formError","setFormError","dispatch","useReducer","useEffect","handleChange","e","target","React","Accordion","sx","marginBottom","border","AccordionSummary","expandIcon","ExpandMoreIcon","id","Utils","hexToRGBA","maxHeight","borderColor","Grid","container","direction","justifyContent","alignItems","spacing","item","md","Badge","invisible","color","variant","Button","disableFocusRipple","size","width","toUpperCase","Typography","display","style","margin","gutterBottom","AccordionDetails","wrap","xs","RadioGroup","row","onChange","FormControlLabel","control","Radio","label","formatMessage","defaultMessage","TextField","error","required","placeholder","fullWidth","InputProps","disableUnderline","classes","root","padding","marginTop","input","borderRadius","palette","common","white","transition","transitions","create","boxShadow","fontSize","InputLabelProps","shrink","defaultValue","multiline","curlGenerator","fontFamily","fontWeight","AccordionActions","paddingRight","onClick","handleClick","length","FormattedMessage","navigator","clipboard","writeText","then","Alert","info","GenericSubscriptionUI","generateGenericSubscriptionCommand","expandable","command","setCommand","pointerEvents","PREFIX","endpointSelectorRoot","selectList","Root","styled","paddingBottom","minWidth","maxWidth","AsyncApiUI","authorizationHeader","URLs","securitySchemeType","accessTokenProvider","api","useContext","ApiContext","isAdvertised","advertiseInfo","advertised","initialEndpoint","http","https","CONSTANTS","API_TYPES","WS","ws","wss","allTopics","setAllTopics","setEndpoint","newInitialEndpoint","apiID","Api","getAllTopics","response","body","catch","console","log","generateAccessToken","token","subscription","customEndpoint","endpoint","encodeURIComponent","adveritsed","getTopicName","topicName","charAt","substring","generateWSSubscriptionCommand","includes","wscat","generateSSESubscriptionCommand","generateASYNCSubscriptionCommand","FormControl","className","InputLabel","Select","displayEmpty","event","Object","entries","map","key","MenuItem","WEBSUB","list","index","WebhookSubscriptionUI","SSE","ASYNC","Progress","paper","grid","userNotificationPaper","titleSub","marginLeft","paddingTop","AsyncApiConsole","setSecurityScheme","selectedEnvironment","setSelectedEnvironment","productionAccessToken","setProductionAccessToken","sandboxAccessToken","setSandboxAccessToken","environments","setEnvironments","scopes","setScopes","labels","setLabels","username","setUsername","password","setPassword","selectedKeyType","setSelectedKey","keys","setKeys","sandboxApiKey","setSandboxApiKey","productionApiKey","setProductionApiKey","environmentObject","endpointURLs","setURLs","notFound","setNotFound","advAuthHeader","setAdvAuthHeader","advAuthHeaderValue","setAdvAuthHeaderValue","selectedEndpoint","setSelectedEndpoint","user","AuthManager","getUser","updateAccessToken","accessToken","get","env","find","environmentName","getAPIById","apiResponse","apiData","obj","environment","displayName","environmentDisplayName","Label","scopeList","scope","status","isApiKeyEnabled","securityScheme","generateUrls","url","urlJson","protocol","split","Paper","component","Icon","TryOutController","setSelectedKeyType","selectedKey","isUpdateToken","getURLs","apiExternalProductionEndpoint","apiExternalSandboxEndpoint","btoa","propTypes","PropTypes","isRequired"],"sourceRoot":""}