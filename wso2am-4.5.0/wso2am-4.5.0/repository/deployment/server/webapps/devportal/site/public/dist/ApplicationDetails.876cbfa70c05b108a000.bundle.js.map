{"version":3,"file":"ApplicationDetails.876cbfa70c05b108a000.bundle.js","mappings":"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","sources":["webpack://@wso2apim/devportal/./source/src/app/components/Shared/ApiKey.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/ApiKeyRestriction.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Shared/AppsAndKeys/ApiKeyManager.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Listing/SubscriptionPolicySelect.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Apis/Listing/APICardView.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/Invoice.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/WebHookDetails.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/SubscriptionTableData.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/Subscriptions.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/InfoBar.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Listing/ResetPolicyDialog.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/Overview.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Details/index.jsx","webpack://@wso2apim/devportal/./source/src/app/components/Applications/Listing/DeleteConfirmation.jsx","webpack://@wso2apim/devportal/./source/src/app/data/stringFormatter.js"],"sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport TextField from '@mui/material/TextField';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Validation from 'AppData/Validation';\n\nconst PREFIX = 'ApiKey';\n\nconst classes = {\n    FormControl: `${PREFIX}-FormControl`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.FormControl}`]: {\n        'margin-bottom': '8px',\n        width: '100%',\n        padding: '0px 10px',\n    }\n}));\n\n/**\n * Used to display generate api key in UI\n */\nconst tokens = (props) => {\n    const [infiniteValidity, setInfiniteValidity] = useState(true);\n    const [invalidTimeout, setInvaildTimeout] = useState(false);\n\n    /**\n    * This method is used to handle the updating of create api key\n    * request object.\n    * @param {*} field\n    * @param {*} event event fired\n    */\n    const handleChange = (field, event) => {\n        const { accessTokenRequest, updateAccessTokenRequest } = props;\n        const newRequest = { ...accessTokenRequest };\n\n        const { target: currentTarget } = event;\n\n        switch (field) {\n            case 'infiniteValidity':\n                setInfiniteValidity(currentTarget.checked);\n                if (currentTarget.checked) {\n                    newRequest.timeout = -1;\n                } else {\n                    newRequest.timeout = null;\n                }\n                break;\n            case 'timeout':\n                if (Validation.number.validate(currentTarget.value).error === undefined) {\n                    newRequest.timeout = currentTarget.value;\n                    setInvaildTimeout(false);\n                } else {\n                    newRequest.timeout = null;\n                    setInvaildTimeout(true);\n                }\n                break;\n            default:\n                break;\n        }\n        updateAccessTokenRequest(newRequest);\n    };\n    const {  intl, accessTokenRequest } = props;\n\n    return (\n        <Root>\n            <FormControl variant=\"standard\" margin='normal' className={classes.FormControl}>\n                <FormControlLabel\n                    control={<Checkbox\n                        checked={infiniteValidity}\n                        onChange={e => handleChange('infiniteValidity', e)}\n                        value={accessTokenRequest.timeout}\n                        color='grey'\n                    />}\n                    label={intl.formatMessage({\n                        defaultMessage: 'API Key with infinite validity period',\n                        id: 'Shared.AppsAndKeys.Tokens.apikey.validity.period.label',\n                    })}\n                />\n                {!infiniteValidity && <TextField\n                    variant=\"standard\"\n                    required\n                    label={intl.formatMessage({\n                        defaultMessage: 'API Key validity period',\n                        id: 'Shared.AppsAndKeys.Tokens.apikey',\n                    })}\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    helperText={\n                        invalidTimeout ? (\n                            intl.formatMessage({\n                                defaultMessage: 'Please use a valid number for API Key expiry time',\n                                id: 'Shared.AppsAndKeys.Tokens.apikey.set.validity.error',\n                            })\n                        ) : (\n                            intl.formatMessage({\n                                defaultMessage: 'You can set an expiration period to determine the validity period of '\n                                + 'the token after generation. Set this as -1 to ensure that the '\n                                + 'apikey never expires.',\n                                id: 'Shared.AppsAndKeys.Tokens.apikey.set.validity.help',\n                            })\n                        )\n                    }\n                    fullWidth\n                    name='timeout'\n                    onChange={e => handleChange('timeout', e)}\n                    placeholder={intl.formatMessage({\n                        defaultMessage: 'Enter time in seconds',\n                        id: 'Shared.AppsAndKeys.Tokens.apikey.enter.time',\n                    })}\n                    value={accessTokenRequest.timeout}\n                    autoFocus\n                    className={classes.inputText}\n                    error={invalidTimeout}\n                />\n                }\n            </FormControl>\n        </Root>\n    );\n};\ntokens.contextTypes = {\n    intl: PropTypes.shape({}).isRequired,\n};\nexport default injectIntl((tokens));\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from \"react\";\nimport { styled } from '@mui/material/styles';\nimport { injectIntl, FormattedMessage } from \"react-intl\";\nimport PropTypes from \"prop-types\";\nimport TextField from \"@mui/material/TextField\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport Grid from \"@mui/material/Grid\";\nimport Fab from \"@mui/material/Fab\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemSecondaryAction from \"@mui/material/ListItemSecondaryAction\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Box from \"@mui/material/Box\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Typography from \"@mui/material/Typography\";\nimport Validation from 'AppData/Validation';\n\nconst PREFIX = 'ApiKeyRestriction';\n\nconst classes = {\n  FormControl: `${PREFIX}-FormControl`,\n  outterBox: `${PREFIX}-outterBox`,\n  Fab: `${PREFIX}-Fab`\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n  {\n    theme\n  }\n) => ({\n  [`& .${classes.FormControl}`]: {\n    \"margin-bottom\": theme.spacing(1),\n    width: \"100%\",\n    padding: theme.spacing(0, 1),\n  },\n\n  [`& .${classes.outterBox}`]: {\n    margin: theme.spacing(1),\n    padding: theme.spacing(1),\n    marginLeft: 20,\n    borderColor: '#cccccc',\n  },\n\n  [`& .${classes.Fab}`]: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  }\n}));\n\n/**\n * Used to display IP address and Http Referer restrictions in generate api key UI\n */\nconst apiKeyRestrictions = (props) => {\n  const [invalidIP, setInvalidIP] = useState(false);\n  const [invalidReferer, setInvalidReferer] = useState(false);\n\n  const {\n    intl,\n    newIP,\n    updateNewIp,\n    ipList,\n    updateIpList,\n    restrictSchema,\n    updateRestrictSchema,\n    newReferer,\n    updateNewReferer,\n    refererList,\n    updateRefererList,\n  } = props;\n\n  const onRefererTextUpdate = (e) => {\n    updateNewReferer(e.target.value.trim());\n    if (e.target.value.trim() === \"\") {\n      setInvalidReferer(false);\n    }\n  };\n\n  const addRefererItem = () => {\n    if (newReferer !== null && newReferer !== \"\") {\n      setInvalidReferer(false);\n      refererList.push(newReferer.trim());\n      updateRefererList(refererList);\n      updateNewReferer(\"\");\n    } else {\n      setInvalidReferer(true);\n    }\n  };\n\n  const deleteRefererItem = (refererItem) => {\n    refererList.splice(refererList.indexOf(refererItem), 1);\n    updateRefererList(refererList);\n  };\n\n  const onIpTextUpdate = (e) => {\n    updateNewIp(e.target.value.trim());\n    if (e.target.value.trim() === \"\") {\n      setInvalidIP(false);\n    }\n  };\n\n  const addIpItem = () => {\n    if (newIP !== null && newIP !== \"\") {\n      if (Validation.ipAddress.validate(newIP).error) {\n        setInvalidIP(true);\n      } else {\n        setInvalidIP(false);\n        ipList.push(newIP);\n        updateIpList(ipList);\n        updateNewIp(\"\");\n      }\n    }\n  };\n\n  const deleteIpItem = (ipItem) => {\n    ipList.splice(ipList.indexOf(ipItem), 1);\n    updateIpList(ipList);\n  };\n\n  const onRestrictSchemaChange = (e) => {\n    updateRestrictSchema(e.target.value);\n    updateIpList([]);\n    updateRefererList([]);\n    updateNewIp(\"\");\n    updateNewReferer(\"\");\n    setInvalidIP(false);\n    setInvalidReferer(false);\n  };\n\n  return (\n    <Root>\n      <Box border={1} borderRadius=\"5px\" className={classes.outterBox}>\n        <Typography variant=\"body1\">\n          <FormattedMessage\n              defaultMessage='Key Restrictions'\n              id='Shared.ApiKeyRestriction.key.restrictions'\n          />\n        </Typography>\n        <FormControl variant=\"standard\" component=\"fieldset\">\n          <RadioGroup\n            aria-label=\"API Key Restrictions\"\n            value={restrictSchema}\n            row\n            onChange={onRestrictSchemaChange}\n          >\n            <FormControlLabel\n              value=\"none\"\n              control={<Radio color=\"primary\" id={'api-key-restriction-none'}/>}\n              label={intl.formatMessage({\n                defaultMessage: \"None\",\n                id:\n                  \"Shared.ApiKeyRestriction.key.restrictions.none\",\n              })}\n              labelPlacement=\"end\"\n            />\n            <FormControlLabel\n              value=\"ip\"\n              control={<Radio color=\"primary\" id={'api-key-restriction-ip'}/>}\n              label={intl.formatMessage({\n                defaultMessage: \"IP Addresses\",\n                id:\n                  \"Shared.ApiKeyRestriction.key.restrictions.ip.addresses\",\n              })}\n              labelPlacement=\"end\"\n            />\n            <FormControlLabel\n              value=\"referer\"\n              control={<Radio color=\"primary\" id={'api-key-restriction-referer'}/>}\n              label={intl.formatMessage({\n                defaultMessage: \"HTTP Referrers (Web Sites)\",\n                id:\n                  \"Shared.ApiKeyRestriction.key.restrictions.http.referrers\",\n              })}\n              labelPlacement=\"end\"\n            />\n          </RadioGroup>\n        </FormControl>\n\n        {restrictSchema === \"ip\" && (\n          <Box component=\"div\" id=\"ipPanel\">\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justifyContent=\"left\"\n              alignItems=\"left\"\n            >\n              <Grid item md={10} xs={10}>\n                <TextField\n                  label={intl.formatMessage({\n                    defaultMessage: \"IP Address\",\n                    id:\n                      \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.ip.address.label\",\n                  })}\n                  value={newIP}\n                  onChange={onIpTextUpdate}\n                  className={classes.inputText}\n                  helperText={\n                    invalidIP\n                      ? intl.formatMessage({\n                          defaultMessage: \"Invalid IP Address\",\n                          id:\n                            \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.ip.validity.error\",\n                        })\n                      : \"\"\n                  }\n                  error={invalidIP}\n                  size='small'\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  placeholder={intl.formatMessage({\n                    defaultMessage: \"Enter IP Address\",\n                    id: \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.enter.ip\",\n                  })}\n                  fullWidth\n                  id='ip-address-txt'\n                />\n              </Grid>\n              <Grid item md={2} xs={2}>\n                <span>\n                  <Fab\n                    className={classes.Fab}\n                    size=\"small\"\n                    color=\"primary\"\n                    aria-label=\"add\"\n                    onClick={addIpItem}\n                    id='ip-address-add-btn'\n                  >\n                    <AddIcon />\n                  </Fab>\n                </span>\n              </Grid>\n            </Grid>\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justifyContent=\"left\"\n              alignItems=\"left\"\n              md={10}\n              xs={10}\n            >\n              {ipList.length > 0 && (\n                <List>\n                  {ipList.map((ip, index) => (\n                    <ListItem>\n                      <ListItemText primary={ip} />\n                      <ListItemSecondaryAction>\n                        <Tooltip title={\n                          intl.formatMessage({\n                            defaultMessage: 'Delete task',\n                            id: 'Shared.ApiKeyRestriction.key.restrictions.delete.task.tooltip',\n                          })}\n                          placement=\"top\"\n                        >\n                          <IconButton\n                            edge=\"end\"\n                            aria-label=\"delete\"\n                            onClick={() => deleteIpItem(ip)}\n                            size=\"large\">\n                            <DeleteIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              )}\n            </Grid>\n          </Box>\n        )}\n\n        {restrictSchema === \"referer\" && (\n          <Box component=\"div\" id=\"refererPanel\">\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justifyContent=\"left\"\n              alignItems=\"left\"\n            >\n              <Grid item md={10} xs={10}>\n                <TextField\n                  label={intl.formatMessage({\n                    defaultMessage: \"Referer\",\n                    id:\n                      \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.referer.label\",\n                  })}\n                  value={newReferer}\n                  onChange={onRefererTextUpdate}\n                  className={classes.inputText}\n                  helperText={\n                    invalidReferer\n                      ? intl.formatMessage({\n                          defaultMessage: \"Invalid Http Referer\",\n                          id: \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.referer.validity.error\",\n                        })\n                      : \"\"\n                  }\n                  error={invalidReferer}\n                  size='small'\n                  margin=\"dense\"\n                  variant=\"outlined\"\n                  placeholder={intl.formatMessage({\n                    defaultMessage: \"Enter Http Referer\",\n                    id: \"Shared.AppsAndKeys.Tokens.apiKeyRestriction.enter.referer\",\n                  })}\n                  fullWidth\n                  id='referer-txt'\n                />\n              </Grid>\n              <Grid item md={2} xs={2}>\n                <span>\n                  <Fab\n                  size=\"small\"\n                    className={classes.Fab}\n                    color=\"primary\"\n                    aria-label=\"add\"\n                    onClick={addRefererItem}\n                  id='referer-add-btn'\n                  >\n                    <AddIcon />\n                  </Fab>\n                </span>\n              </Grid>\n            </Grid>\n            <Grid\n              container\n              direction=\"row\"\n              spacing={0}\n              justifyContent=\"left\"\n              alignItems=\"left\"\n              md={10}\n              xs={10}\n            >\n              {refererList.length > 0 && (\n                <List>\n                  {refererList.map((referer, index) => (\n                    <ListItem>\n                      <ListItemText primary={referer} />\n                      <ListItemSecondaryAction>\n                        <Tooltip title={\n                          intl.formatMessage({\n                            defaultMessage: 'Delete task',\n                            id: 'Shared.ApiKeyRestriction.key.restrictions.delete.task.tooltip',\n                          })}\n                          placement=\"top\"\n                        >\n                          <IconButton\n                            edge=\"end\"\n                            aria-label=\"delete\"\n                            onClick={() => deleteRefererItem(referer)}\n                            size=\"large\">\n                            <DeleteIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </ListItemSecondaryAction>\n                    </ListItem>\n                  ))}\n                </List>\n              )}\n            </Grid>\n          </Box>\n        )}\n      </Box>\n    </Root>\n  );\n};\napiKeyRestrictions.contextTypes = {\n  intl: PropTypes.shape({}).isRequired,\n};\nexport default injectIntl((apiKeyRestrictions));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport FormGroup from '@mui/material/FormGroup';\nimport Grid from '@mui/material/Grid';\nimport ViewToken from './ViewToken';\nimport ApiKey from '../ApiKey';\nimport ApiKeyRestriction from '../ApiKeyRestriction';\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport CircularProgress from '@mui/material/CircularProgress';\n\nconst PREFIX = 'ApiKeyManager';\n\nconst classes = {\n  root: `${PREFIX}-root`,\n  dialog: `${PREFIX}-dialog`,\n  button: `${PREFIX}-button`,\n  tokenSection: `${PREFIX}-tokenSection`,\n  margin: `${PREFIX}-margin`,\n  keyConfigWrapper: `${PREFIX}-keyConfigWrapper`,\n  generateWrapper: `${PREFIX}-generateWrapper`,\n  paper: `${PREFIX}-paper`,\n  dialogTitle: `${PREFIX}-dialogTitle`,\n  dialogContent: `${PREFIX}-dialogContent`,\n  formGroup: `${PREFIX}-formGroup`,\n  gridWrapper: `${PREFIX}-gridWrapper`,\n  keyTitle: `${PREFIX}-keyTitle`,\n  cardBody: `${PREFIX}-cardBody`,\n  generateKey: `${PREFIX}-generateKey`\n};\n\nconst StyledGrid = styled(Grid)((\n  {\n    theme\n  }\n) => ({\n  [`& .${classes.root}`]: {\n    padding: theme.spacing(3),\n    '& span, & h5, & label, & input': {\n      color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n  },\n\n  [`& .${classes.dialog}`]: {\n    '& span, & h2, & label': {\n      color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n  },\n\n  [`& .${classes.button}`]: {\n    '& span': {\n      color: theme.palette.getContrastText(theme.palette.primary.main),\n    }\n  },\n\n  [`& .${classes.tokenSection}`]: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n\n  [`& .${classes.margin}`]: {\n    marginRight: theme.spacing(2),\n  },\n\n  [`& .${classes.keyConfigWrapper}`]: {\n    flexDirection: 'column',\n    marginBottom: 0,\n  },\n\n  [`& .${classes.generateWrapper}`]: {\n    padding: '10px',\n    'margin-inline-end': 'auto',\n  },\n\n  [`& .${classes.paper}`]: {\n    display: 'flex',\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    marginLeft: theme.spacing(10),\n  },\n\n  [`& .${classes.dialogTitle}`]: {\n    padding: '24px 24px 0px',\n  },\n\n  [`& .${classes.dialogContent}`]: {\n    padding: '0 24px 0px',\n  },\n\n  [`& .${classes.formGroup}`]: {\n    padding: '20px',\n  },\n\n  [`& .${classes.gridWrapper}`]: {\n    'align-self': 'center',\n  },\n\n  [`& .${classes.keyTitle}`]: {\n    textTransform: 'capitalize',\n  },\n\n  [`& .${classes.cardBody}`]: {\n    padding: theme.spacing(1),\n    lineHeight: 2,\n  },\n\n  [`& .${classes.generateKey}`]: {\n    '& span': {\n      color: theme.palette.getContrastText(theme.palette.primary.main),\n    }\n  }\n}));\n\nclass ApiKeyManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apikey: null,\n      open: false,\n      showToken: false,\n      accessTokenRequest: {\n        timeout: -1,\n      },\n      ipList: [],\n      newIP: null,\n      restrictSchema: 'none',\n      refererList: [],\n      newReferer: null,\n      isGenerating: false,\n    };\n  }\n\n  updateIpList = (ipList) => {\n    this.setState(() => ({ ipList }));\n  };\n\n  updateNewIp = (newIP) => {\n    this.setState(() => ({ newIP }));\n  };\n\n  updateRefererList = (refererList) => {\n    this.setState(() => ({ refererList }));\n  };\n\n  updateNewReferer = (newReferer) => {\n    this.setState(() => ({ newReferer }));\n  };\n\n  updateRestrictSchema = (restrictSchema) => {\n    this.setState(() => ({ restrictSchema }));\n  }\n\n  handleClose = () => {\n    this.setState(() => ({ open: false, accessTokenRequest: { timeout: -1 } }));\n  }\n\n  handleClickOpen = () => {\n    this.setState(() => ({ open: true, showToken: false }));\n  }\n\n  updateAccessTokenRequest = (accessTokenRequest) => {\n    this.setState(() => ({ accessTokenRequest }));\n  }\n\n  generateKeys = () => {\n    const { selectedApp, keyType } = this.props;\n    this.setState({isGenerating: true});\n    const client = new API();\n    const restrictions = {\n      permittedIP: this.state.ipList.join(\",\"),\n      permittedReferer: this.state.refererList.join(\",\"),\n    };\n    const promisedKey = client.generateApiKey(selectedApp.appId, keyType,\n      this.state.accessTokenRequest.timeout, restrictions);\n\n    promisedKey\n      .then((response) => {\n        console.log('Non empty response received');\n        const apikey = { accessToken: response.body.apikey, validityTime: response.body.validityTime, isOauth: false };\n        this.setState(() => ({\n          apikey, open: true, showToken: true,\n          ipList: [], refererList: []\n        }));\n        this.setState({isGenerating: false});\n      })\n      .catch((error) => {\n        if (process.env.NODE_ENV !== 'production') {\n          console.log(error);\n        }\n        const { status } = error;\n        if (status === 404) {\n          this.setState({\n            notFound: true, ipList: [],\n            refererList: []\n          });\n        }\n        this.setState({isGenerating: false});\n      });\n  }\n\n  render() {\n    const {\n      showToken, accessTokenRequest, open, apikey, newIP, ipList,\n      newReferer, refererList, restrictSchema, isGenerating,\n    } = this.state;\n    return (\n      <StyledGrid container direction=\"row\" spacing={0} justifyContent=\"left\" alignItems=\"left\">\n        <Grid item md={5} xs={12}>\n          <ApiKeyRestriction\n            updateNewIp={this.updateNewIp}\n            newIP={newIP}\n            updateIpList={this.updateIpList}\n            ipList={ipList}\n            restrictSchema={restrictSchema}\n            updateRestrictSchema={this.updateRestrictSchema}\n            refererList={refererList}\n            newReferer={newReferer}\n            updateNewReferer={this.updateNewReferer}\n            updateRefererList={this.updateRefererList}\n          />\n          <FormGroup row className={classes.formGroup}>\n\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleClickOpen}\n              className={classes.generateKey}\n              id='generate-key-btn'\n            >\n              {this.props.intl.formatMessage({\n                id: 'Shared.AppsAndKeys.ApiKeyManager.generate.key.btn',\n                defaultMessage: 'Generate Key'})}\n            </Button>\n            <Typography\n              component=\"div\"\n              variant=\"body2\"\n              className={classes.formLabel}\n            >\n              <FormattedMessage\n                id=\"Shared.AppsAndKeys.ApiKeyManager.generate.key.help\"\n                defaultMessage=\"Use the Generate Key button to generate a self-contained JWT token.\"\n              />\n            </Typography>\n          </FormGroup>\n          <Dialog\n            open={open}\n            onClose={this.handleClose}\n            aria-labelledby=\"form-dialog-title\"\n            className={classes.dialog}\n          >\n            <DialogTitle id=\"responsive-dialog-title\" className={classes.dialogTitle}>\n              {this.props.intl.formatMessage({\n                id: 'Shared.AppsAndKeys.ApiKeyManager.generate.api.key.btn',\n                defaultMessage: 'Generate API Key'})}\n            </DialogTitle>\n            <DialogContent className={classes.dialogContent}>\n              <DialogContentText>\n                {!showToken && (\n                  <ApiKey\n                    updateAccessTokenRequest={this.updateAccessTokenRequest}\n                    accessTokenRequest={accessTokenRequest}\n                  />\n                )}\n                {showToken && <ViewToken token={apikey} />}\n              </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n              {!showToken && (\n                <Button\n                  onClick={this.generateKeys}\n                  disabled={!accessTokenRequest.timeout || isGenerating}\n                  color=\"primary\"\n                  variant='contained'\n                  className={classes.button}\n                  id='generate-api-keys-btn'\n                >\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.consumer.generate.btn\"\n                    defaultMessage=\"Generate\"\n                  />\n                   {isGenerating && <CircularProgress size={24} />}\n                </Button>\n              )}\n              <Button onClick={this.handleClose} color=\"grey\" autoFocus id='generate-api-keys-close-btn'>\n                <FormattedMessage\n                  id=\"Shared.AppsAndKeys.ViewKeys.consumer.close.btn\"\n                  defaultMessage=\"Close\"\n                />\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </Grid>\n        {restrictSchema === \"ip\" && (\n          <Grid item md={5} xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.ip.example.heading\"\n                    defaultMessage=\"Examples of IP Addresses allowed\"\n                  />\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\" className={classes.cardBody}>\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.ip.example.content\"\n                    defaultMessage={\n                      \"Specify one IPv4 or IPv6 or a subnet using CIDR notation{linebreak}Examples: {ip1}, {ip2}, {ip3} or {ip4}\"\n                    }\n                    values={{\n                      linebreak: <br />,\n                      ip1: <b>192.168.1.2</b>,\n                      ip2: <b>152.12.0.0/13</b>,\n                      ip3: <b>2002:eb8::2</b>,\n                      ip4: <b>1001:ab8::/44</b>,\n                    }}\n                  />\n                </Typography>\n\n              </CardContent>\n            </Card>\n          </Grid>\n        )}\n        {restrictSchema === \"referer\" && (\n          <Grid item md={5} xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h5\" component=\"h2\">\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.referer.example.heading\"\n                    defaultMessage=\"Examples of URLs allowed to restrict websites\"\n                  />\n                </Typography>\n                <Typography variant=\"body1\" component=\"p\" className={classes.cardBody}>\n                  <FormattedMessage\n                    id=\"Shared.AppsAndKeys.ViewKeys.apiKeyRestriction.ip.example.content.message\"\n                    defaultMessage={\n                      \"A specific URL with an exact path: {url1}{linebreak}Any URL in a single subdomain, using a wildcard asterisk (*): {url2}{linebreak}Any subdomain or path URLs in a single domain, using wildcard asterisks (*): {url3}\"\n                    }\n                    values={{\n                      linebreak: <br />,\n                      url1: <b>www.example.com/path</b>,\n                      url2: <b>sub.example.com/*</b>,\n                      url3: <b>*.example.com/*</b>,\n                    }}\n                  />\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        )}\n      </StyledGrid>\n    );\n  }\n}\n\nApiKeyManager.propTypes = {\n  classes: PropTypes.shape({}).isRequired,\n  selectedApp: PropTypes.shape({\n    tokenType: PropTypes.string.isRequired,\n  }).isRequired,\n  keyType: PropTypes.string.isRequired,\n  intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl((ApiKeyManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@mui/material/MenuItem';\nimport Button from '@mui/material/Button';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport { FormattedMessage } from 'react-intl';\nimport { useTheme } from '@mui/material';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../../Shared/ScopeValidation';\n\nconst PREFIX = 'SubscriptionPolicySelectLegacy';\n\nconst classes = {\n    root: `${PREFIX}-root`,\n    buttonGap: `${PREFIX}-buttonGap`,\n    select: `${PREFIX}-select`,\n};\n\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`&.${classes.root}`]: {\n        display: 'flex',\n    },\n\n    [`& .${classes.buttonGap}`]: {\n        background: theme.palette.grey[300],\n        marginLeft: 20,\n        '& span span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n\n    [`& .${classes.select}`]: {\n        width: 100,\n    },\n}));\n\n/**\n * @class SubscriptionPolicySelectLegacy\n * @extends {React.Component}\n */\nclass SubscriptionPolicySelectLegacy extends React.Component {\n    /**\n     * Create instance of SubscriptionPolicySelectLegacy\n     * @param {JSON} props Props pass from the parent.\n     * @returns {void}\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedPolicy: null,\n        };\n    }\n\n    /**\n     * Calls when component did mount.\n     * @returns {void}\n     */\n    componentDidMount() {\n        const { policies } = this.props;\n\n        this.setState({ selectedPolicy: policies[0] });\n    }\n\n    /**\n     * renders method.\n     * @returns {JSX} Policy selection component.\n     */\n    render() {\n        const {\n            policies, apiId, handleSubscribe, applicationId,\n        } = this.props;\n        const { selectedPolicy } = this.state;\n\n        return (\n            policies\n            && (\n                <Root className={classes.root}>\n                    <Autocomplete\n                        id='policy-select'\n                        disableClearable\n                        options={policies}\n                        value={selectedPolicy}\n                        onChange={(e, value) => {\n                            this.setState({ selectedPolicy: value });\n                        }}\n                        style={{ width: 200 }}\n                        renderInput={(params) => (<TextField size='small' variant='standard' {...params} />)}\n                        renderOption={(props, policy) => (\n                            <MenuItem\n                                {...props}\n                                value={policy}\n                                key={policy}\n                                id={'policy-select-' + policy}\n                            >\n                                {policy}\n                            </MenuItem>\n                        )}\n                    />\n                    <ScopeValidation\n                        resourcePath={resourcePaths.SUBSCRIPTIONS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        <Button\n                            variant='contained'\n                            size='small'\n                            color='grey'\n                            className={classes.buttonGap}\n                            onClick={() => {\n                                handleSubscribe(applicationId, apiId, selectedPolicy);\n                            }}\n                            id={'policy-subscribe-btn-' + apiId}\n                        >\n                            <FormattedMessage\n                                defaultMessage='Subscribe'\n                                id='Apis.Listing.SubscriptionPolicySelect.subscribe'\n                            />\n                        </Button>\n                    </ScopeValidation>\n                </Root>\n            )\n        );\n    }\n}\n\nSubscriptionPolicySelectLegacy.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    policies: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.string.isRequired,\n    handleSubscribe: PropTypes.func.isRequired,\n    applicationId: PropTypes.string.isRequired,\n};\n\nfunction SubscriptionPolicySelect(props) {\n    const {\n        key, policies, apiId, handleSubscribe, applicationId,\n    } = props;\n    const theme = useTheme();\n    return (\n        <SubscriptionPolicySelectLegacy\n            key={key}\n            policies={policies}\n            apiId={apiId}\n            handleSubscribe={handleSubscribe}\n            applicationId={applicationId}\n            theme={theme}\n        />\n    );\n}\n\nexport default (SubscriptionPolicySelect);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport MUIDataTable from 'mui-datatables';\nimport { injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport CONSTANTS from 'AppData/Constants';\nimport NoApi from 'AppComponents/Apis/Listing/NoApi';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport SubscriptionPolicySelect from './SubscriptionPolicySelect';\n\nconst PREFIX = 'APICardView';\n\nconst classes = {\n    root: `${PREFIX}-root`,\n    buttonGap: `${PREFIX}-buttonGap`,\n};\n\nconst Root = styled('div')(() => ({\n    [`& .${classes.root}`]: {\n        display: 'flex',\n    },\n\n    [`& .${classes.buttonGap}`]: {\n        marginRight: 10,\n    },\n}));\n\n/**\n * @class APICardView\n * @param {number} page page number\n * @extends {React.Component}\n */\nclass APICardView extends React.Component {\n    /**\n     * @param {JSON} props properties passed from parent\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: null,\n            loading: true,\n        };\n        this.page = 0;\n        this.count = 100;\n        this.rowsPerPage = 10;\n        this.pageType = null;\n    }\n\n    /**\n     * component mount callback\n     */\n    componentDidMount() {\n        this.getData();\n    }\n\n    /**\n     * @param {JSON} prevProps props from previous component instance\n     */\n    componentDidUpdate(prevProps) {\n        const { subscriptions, searchText } = this.props;\n        if (subscriptions.length !== prevProps.subscriptions.length) {\n            this.getData();\n        } else if (searchText !== prevProps.searchText) {\n            this.page = 0;\n            this.getData();\n        }\n    }\n\n    // get data\n    getData = () => {\n        const { intl } = this.props;\n        this.xhrRequest()\n            .then((data) => {\n                const { body } = data;\n                const { list, pagination } = body;\n                const { total } = pagination;\n                this.count = total;\n                this.setState({ data: this.updateUnsubscribedAPIsList(list) });\n            })\n            .catch((error) => {\n                const { response } = error;\n                const { setTenantDomain } = this.props;\n                if (response && response.body.code === 901300) {\n                    setTenantDomain('INVALID');\n                    Alert.error(intl.formatMessage({\n                        defaultMessage: 'Invalid tenant domain',\n                        id: 'Apis.Listing.ApiTableView.invalid.tenant.domain',\n                    }));\n                } else {\n                    Alert.error(intl.formatMessage({\n                        defaultMessage: 'Error While Loading APIs',\n                        id: 'Apis.Listing.ApiTableView.error.loading',\n                    }));\n                }\n            })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    /**\n    *\n    * Get List of the Ids of all APIs that have been already subscribed\n    *\n    * @returns {*} Ids of respective APIs\n    * @memberof APICardView\n    */\n    getIdsOfSubscribedEntities() {\n        const { subscriptions } = this.props;\n\n        // Get arrays of the API Ids and remove all null/empty references by executing 'fliter(Boolean)'\n        const subscribedAPIIds = subscriptions.map((sub) => sub.apiId).filter(Boolean);\n\n        return subscribedAPIIds;\n    }\n\n    changePage = (page) => {\n        const { intl } = this.props;\n        this.page = page;\n        this.setState({ loading: true });\n        this.xhrRequest()\n            .then((data) => {\n                const { body } = data;\n                const { list } = body;\n                this.setState({\n                    data: this.updateUnsubscribedAPIsList(list),\n                });\n            })\n            .catch(() => {\n                Alert.error(intl.formatMessage({\n                    defaultMessage: 'Error While Loading APIs',\n                    id: 'Apis.Listing.ApiTableView.error.loading',\n                }));\n            })\n            .finally(() => {\n                this.setState({ loading: false });\n            });\n    };\n\n    xhrRequest = () => {\n        const { searchText } = this.props;\n        const { page, rowsPerPage } = this;\n        const api = new API();\n\n        if (searchText && searchText !== '') {\n            return api.getAllAPIs({ query: `${searchText} status:published`, limit: this.rowsPerPage, offset: page * rowsPerPage });\n        } else {\n            return api.getAllAPIs({ query: 'status:published', limit: this.rowsPerPage, offset: page * rowsPerPage });\n        }\n    };\n\n    /**\n    * Update list of unsubscribed APIs\n    * @param {Array} list array of apis\n    * @returns {Array} filtered list of apis\n    * @memberof APICardView\n    */\n    updateUnsubscribedAPIsList(list) {\n        const subscribedIds = this.getIdsOfSubscribedEntities();\n        const listLocal = list.filter((api) => !(api.throttlingPolicies.length === 1\n             && api.throttlingPolicies[0].includes(CONSTANTS.DEFAULT_SUBSCRIPTIONLESS_PLAN)));\n        for (let i = 0; i < listLocal.length; i++) {\n            const policyList = listLocal[i].throttlingPolicies\n                .filter((policy) => !policy.includes(CONSTANTS.DEFAULT_SUBSCRIPTIONLESS_PLAN));\n            listLocal[i].throttlingPolicies = policyList;\n            if (!((!subscribedIds.includes(listLocal[i].id) && !listLocal[i].advertiseInfo.advertised)\n                && listLocal[i].isSubscriptionAvailable)) {\n                listLocal[i].throttlingPolicies = null;\n            }\n        }\n        return listLocal;\n        // return unsubscribedAPIList;\n    }\n\n    /**\n     * @returns {JSX} render api card view\n     * @memberof APICardView\n     */\n    render() {\n        const { apisNotFound } = this.props;\n        const { loading, data } = this.state;\n        const { page, count, rowsPerPage } = this;\n\n        if (apisNotFound) {\n            return <ResourceNotFound />;\n        }\n\n        const {\n            handleSubscribe, applicationId, intl,\n        } = this.props;\n        const columns = [\n            {\n                name: 'id',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.id',\n                    defaultMessage: 'Id',\n                }),\n                options: {\n                    display: 'excluded',\n                },\n            },\n            {\n                name: 'isSubscriptionAvailable',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.isSubscriptionAvailable',\n                    defaultMessage: 'Is Subscription Available',\n                }),\n                options: {\n                    display: 'excluded',\n                },\n            },\n            {\n                name: 'name',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.name',\n                    defaultMessage: 'Name',\n                }),\n            },\n            {\n                name: 'version',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.version',\n                    defaultMessage: 'Version',\n                }),\n            },\n            {\n                name: 'throttlingPolicies',\n                label: intl.formatMessage({\n                    id: 'Apis.Listing.APIList.subscription.status',\n                    defaultMessage: 'Subscription Status',\n                }),\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const apiId = tableMeta.rowData[0];\n                            const isSubscriptionAvailable = tableMeta.rowData[1];\n                            const policies = value;\n                            if (!isSubscriptionAvailable) {\n                                return (intl.formatMessage({\n                                    id: 'Apis.Listing.APICardView.not.allowed',\n                                    defaultMessage: 'Not Allowed',\n                                }));\n                            }\n                            if (!policies) {\n                                return (intl.formatMessage({\n                                    id: 'Apis.Listing.APICardView.already.subscribed',\n                                    defaultMessage: 'Subscribed',\n                                }));\n                            }\n                            return (\n                                <SubscriptionPolicySelect\n                                    key={apiId}\n                                    policies={policies}\n                                    apiId={apiId}\n                                    handleSubscribe={(app, api, policy) => handleSubscribe(app, api, policy)}\n                                    applicationId={applicationId}\n                                />\n                            );\n                        }\n                        return <span />;\n                    },\n                },\n            },\n        ];\n        const options = {\n            search: false,\n            title: false,\n            filter: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            customToolbar: false,\n            responsive: 'stacked',\n            serverSide: true,\n            count,\n            page,\n            onTableChange: (action, tableState) => {\n                switch (action) {\n                    case 'changePage':\n                        this.changePage(tableState.page);\n                        break;\n                    default:\n                        break;\n                }\n            },\n            selectableRows: 'none',\n            rowsPerPage,\n            onChangeRowsPerPage: (numberOfRows) => {\n                const { page: pageInner, count: countInner } = this;\n                if (pageInner * numberOfRows > countInner) {\n                    this.page = 0;\n                }\n                this.rowsPerPage = numberOfRows;\n                this.getData();\n            },\n            textLabels: {\n                pagination: {\n                    rowsPerPage: intl.formatMessage({\n                        id: 'Apis.Listing.APICardView.rows.per.page',\n                        defaultMessage: 'Rows per page',\n                    }),\n                },\n            },\n        };\n        if (loading) {\n            return <Loading />;\n        }\n        if ((data && data.length === 0) || !data) {\n            return <NoApi />;\n        }\n        return (\n            <Root id='subscribe-to-api-table'>\n                <MUIDataTable\n                    title=''\n                    data={data}\n                    columns={columns}\n                    options={options}\n                />\n            </Root>\n        );\n    }\n}\n\nAPICardView.propTypes = {\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\nexport default injectIntl((APICardView));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Dialog from '@mui/material/Dialog';\nimport Button from '@mui/material/Button';\nimport MUIDataTable from 'mui-datatables';\nimport Icon from '@mui/material/Icon';\nimport { FormattedMessage } from 'react-intl';\nimport Subscription from 'AppData/Subscription';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogActions from '@mui/material/DialogActions';\n\nconst PREFIX = 'Invoice';\n\nconst classes = {\n    dialogWrapper: `${PREFIX}-dialogWrapper`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.dialogWrapper}`]: {\n        '& span,& p , & h5, & label, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& div, & input, & p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n}));\n\nconst columns = ['Name', 'Value'];\n\nconst options = {\n    filterType: 'checkbox',\n    sort: false,\n    search: false,\n    viewColumns: false,\n    filter: false,\n    selectableRowsHeader: false,\n    selectableRows: 'none',\n    pagination: false,\n    download: false,\n};\n\n/**\n *\n * @param {JSON} props props passed from parent\n * @returns {JSX} jsx output\n */\nfunction Invoice(props) {\n    const {\n        subscriptionId, tiers,\n    } = props;\n    const [showPopup, setShowPopup] = useState(false);\n    const [showErrorPopup, setShowErrorPopup] = useState(false);\n    const [invoice, setInvoice] = useState(null);\n\n    /**\n     * Handle the popup for invoice\n     */\n    const handlePopup = () => {\n        setShowPopup(true);\n        setInvoice(null);\n        const client = new Subscription();\n        const promiseInvoice = client.getMonetizationInvoice(subscriptionId);\n        promiseInvoice.then((response) => {\n            if (response && response.obj) {\n                const invoiceData = [];\n                const { obj: { properties } } = response;\n                Object.keys(properties).forEach((invoiveItem) => {\n                    const insideArray = [];\n                    insideArray.push(invoiveItem);\n                    insideArray.push(properties[invoiveItem]);\n                    invoiceData.push(insideArray);\n                });\n                setInvoice(invoiceData);\n            }\n        }).catch((error) => {\n            console.error(error);\n            setShowErrorPopup(true);\n        });\n    };\n\n    /**\n     * Handle closing the popup for invoice\n     */\n    const handleClose = () => {\n        setShowPopup(false);\n    };\n\n    const handleAlertClose = () => {\n        setShowErrorPopup(false);\n    };\n\n    return (\n        <Root>\n            <Button\n                color='grey'\n                onClick={handlePopup}\n                startIcon={<Icon>receipt</Icon>}\n                disabled={tiers.length === 0}\n            >\n                <FormattedMessage\n                    id='Applications.Details.Invoice.view.btn'\n                    defaultMessage='View Invoice'\n                />\n            </Button>\n            {invoice ? (\n                <Dialog\n                    open={showPopup}\n                    onClose={handleClose}\n                    fullWidth='true'\n                    className={classes.dialogWrapper}\n                >\n                    {invoice && (\n                        <MUIDataTable\n                            title='Upcoming Invoice'\n                            data={invoice}\n                            columns={columns}\n                            options={options}\n                        />\n                    )}\n                </Dialog>\n            ) : (\n                <Dialog\n                    open={showErrorPopup}\n                    onClose={handleAlertClose}\n                    fullWidth='true'\n                    className={classes.dialogWrapper}\n                >\n                    <DialogTitle>\n                        <FormattedMessage\n                            id='Applications.Details.Invoice.no.data.available'\n                            defaultMessage='No Data Available'\n                        />\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='invoice-dialog-description'>\n                            <FormattedMessage\n                                id='Applications.Details.Invoice.pending.invoice.data'\n                                defaultMessage='Pending invoice data not found for this subscription.'\n                            />\n\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleAlertClose} color='primary'>\n                            <FormattedMessage\n                                id='Applications.Details.Invoice.close'\n                                defaultMessage='Close'\n                            />\n\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            )}\n        </Root>\n    );\n}\nInvoice.defaultProps = {\n    tiers: [],\n};\nInvoice.propTypes = {\n    subscriptionId: PropTypes.string.isRequired,\n    tiers: PropTypes.arrayOf(PropTypes.string),\n};\n\nexport default (Invoice);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { styled } from '@mui/material/styles';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemText from '@mui/material/ListItemText';\nimport Divider from '@mui/material/Divider';\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\nimport Grid from '@mui/material/Grid';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport _ from 'lodash';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport RemoveCircleIcon from '@mui/icons-material/RemoveCircle';\n\nconst PREFIX = 'WebHookDetails';\n\nconst classes = {\n    buttonIcon: `${PREFIX}-buttonIcon`,\n    paper: `${PREFIX}-paper`,\n    grid: `${PREFIX}-grid`,\n    userNotificationPaper: `${PREFIX}-userNotificationPaper`,\n    titleSub: `${PREFIX}-titleSub`,\n    root: `${PREFIX}-root`,\n    titleWrapper: `${PREFIX}-titleWrapper`,\n    listWrapper: `${PREFIX}-listWrapper`,\n    subscriptionRow: `${PREFIX}-subscriptionRow`,\n    callbackurl: `${PREFIX}-callbackurl`,\n    subscriptionTimestamp: `${PREFIX}-subscriptionTimestamp`,\n    SubscriptionHeader: `${PREFIX}-SubscriptionHeader`,\n};\n\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.buttonIcon}`]: {\n        marginRight: 10,\n    },\n\n    [`& .${classes.paper}`]: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.grid}`]: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n\n    [`& .${classes.userNotificationPaper}`]: {\n        padding: theme.spacing(2),\n    },\n\n    [`& .${classes.titleSub}`]: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n\n    [`&.${classes.root}`]: {\n        padding: theme.spacing(3),\n        '& h5': {\n            color: theme.palette.getContrastText(theme.palette.background.default),\n        },\n    },\n\n    [`& .${classes.titleWrapper}`]: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingBottom: theme.spacing(2),\n        '& h5': {\n            marginRight: theme.spacing(1),\n        },\n    },\n\n    [`& .${classes.listWrapper}`]: {\n        width: '100%',\n    },\n\n    [`& .${classes.subscriptionRow}`]: {\n        paddingLeft: '16px',\n    },\n\n    [`& .${classes.callbackurl}`]: {\n        fontSize: '12px',\n    },\n\n    [`& .${classes.subscriptionTimestamp}`]: {\n        float: 'right',\n    },\n\n    [`& .${classes.SubscriptionHeader}`]: {\n        paddingBottom: '0px',\n        paddingLeft: '0px',\n        paddingTop: '0px',\n    },\n}));\n\ndayjs.extend(relativeTime);\n\n/**\n * @param {JSON} props props passed from parent\n * @returns {JSX} jsx output\n */\nexport default function WebHookDetails(props) {\n    const { apiId, applicationId } = props;\n    const intl = useIntl();\n    const [subscribedTopics, setSubscribedTopics] = useState('');\n\n    const getLogoForDeliveryStatus = (subscription) => {\n        switch (subscription.deliveryStatus) {\n            case 1:\n                return <CheckCircleIcon style={{ color: 'green', fontSize: '14px', paddingTop: '3px' }} />;\n            case 2:\n                return <CancelIcon style={{ color: 'red', fontSize: '14px', paddingTop: '3px' }} />;\n            default:\n                return <RemoveCircleIcon style={{ color: 'black', fontSize: '14px', paddingTop: '3px' }} />;\n        }\n    };\n\n    useEffect(() => {\n        const apiClient = new Api();\n        const promisedSubscriptions = apiClient.getWebhookubScriptions(apiId, applicationId);\n        promisedSubscriptions.then((response) => {\n            const sortedSubscriptions = _.groupBy(response.obj.list, 'topic');\n            setSubscribedTopics(sortedSubscriptions);\n        }).catch((error) => {\n            console.log(error);\n            Alert.error(intl.formatMessage({\n                id: 'Applications.Details.Subscriptions.error.occurred.webhook.subscription',\n                defaultMessage: 'Error while retrieving webhook subscriptions',\n            }));\n        });\n    }, []);\n\n    return (\n        <Root className={classes.root}>\n            <div className={classes.titleWrapper}>\n                <Typography variant='h5' className={classes.keyTitle}>\n                    <FormattedMessage\n                        id='Applications.Details.Subscriptions.api.webhooks'\n                        defaultMessage='Webhooks'\n                    />\n                </Typography>\n            </div>\n            <List className={classes.listWrapper}>\n                {Object.keys(subscribedTopics).length < 1\n                && (\n                    <Typography color='textPrimary' display='block'>\n                        <FormattedMessage\n                            id='Applications.Details.Subscriptions.api.webhooks.subscriptions.unavailable'\n                            defaultMessage='No Webhook subscriptions available at this time.'\n                        />\n                    </Typography>\n                )}\n                {Object.keys(subscribedTopics).map((key, keyIndex) => (\n                    <>\n                        <ListItem className={classes.SubscriptionHeader}>\n                            <ListItemText primary={key} />\n                        </ListItem>\n                        {subscribedTopics[key].map((subscription) => (\n                            <Grid container direction='row'>\n                                <Grid item xs={1}>\n                                    {getLogoForDeliveryStatus(subscription)}\n                                </Grid>\n                                <Grid item xs={8}>\n                                    <Typography\n                                        color='textPrimary'\n                                        display='block'\n                                        className={classes.callbackurl}\n                                    >\n                                        {subscription.callBackUrl}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={3}>\n                                    {subscription.deliveryTime ? (\n                                        <Typography\n                                            color='textSecondary'\n                                            display='block'\n                                            variant='caption'\n                                            className={classes.subscriptionTimestamp}\n                                        >\n                                            {subscription.deliveryTime}\n                                        </Typography>\n                                    ) : (\n                                        <Typography\n                                            color='textSecondary'\n                                            display='block'\n                                            variant='caption'\n                                            className={classes.subscriptionTimestamp}\n                                        >\n                                            <FormattedMessage\n                                                id='Applications.Details.Subscriptions.api.webhooks.delivery.time.unavailable'\n                                                defaultMessage='Delivery data unavailable'\n                                            />\n                                        </Typography>\n                                    )}\n                                </Grid>\n                                <Divider component='li' />\n                            </Grid>\n                        ))}\n                        {(keyIndex !== Object.keys(subscribedTopics).length - 1) && (\n                            <Divider component='li' sx={{ padding: '5px' }} />\n                        )}\n                    </>\n                ))}\n            </List>\n        </Root>\n    );\n}\n","/* eslint-disable no-nested-ternary */\n/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport Icon from '@mui/material/Icon';\nimport Box from '@mui/material/Box';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Dialog from '@mui/material/Dialog';\nimport Slide from '@mui/material/Slide';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Tooltip from '@mui/material/Tooltip';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport HelpOutline from '@mui/icons-material/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport PropTypes from 'prop-types';\nimport Api from 'AppData/api';\nimport CONSTANTS from 'AppData/Constants';\nimport Subscription from 'AppData/Subscription';\nimport { mdiOpenInNew } from '@mdi/js';\nimport { Icon as MDIcon } from '@mdi/react';\nimport Popover from '@mui/material/Popover';\nimport Invoice from './Invoice';\nimport WebHookDetails from './WebHookDetails';\n\n/**\n *\n *\n * @class SubscriptionTableData\n * @extends {React.Component}\n */\nclass SubscriptionTableData extends React.Component {\n    /**\n     *Creates an instance of SubscriptionTableData.\n     * @param {*} props properties\n     * @memberof SubscriptionTableData\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            openMenu: false,\n            openMenuEdit: false,\n            isMonetizedAPI: false,\n            isDynamicUsagePolicy: false,\n            tiers: [],\n            selectedTier: '',\n            isWebhookAPI: false,\n            callbackLinkAnchor: null,\n        };\n        this.handleRequestClose = this.handleRequestClose.bind(this);\n        this.handleRequestOpen = this.handleRequestOpen.bind(this);\n        this.handleRequestDelete = this.handleRequestDelete.bind(this);\n        this.checkIfDynamicUsagePolicy = this.checkIfDynamicUsagePolicy.bind(this);\n        this.checkIfMonetizedAPI = this.checkIfMonetizedAPI.bind(this);\n        this.populateSubscriptionTiers = this.populateSubscriptionTiers.bind(this);\n        this.handleSubscriptionTierUpdate = this.handleSubscriptionTierUpdate.bind(this);\n        this.handleRequestCloseEditMenu = this.handleRequestCloseEditMenu.bind(this);\n        this.handleRequestOpenEditMenu = this.handleRequestOpenEditMenu.bind(this);\n        this.setSelectedTier = this.setSelectedTier.bind(this);\n        this.checkIfWebhookAPI = this.checkIfWebhookAPI.bind(this);\n        this.handleOpenCallbackURLs = this.handleOpenCallbackURLs.bind(this);\n        this.handleCloseCallbackURLs = this.handleCloseCallbackURLs.bind(this);\n    }\n\n    componentDidMount() {\n        this.checkIfMonetizedAPI(this.props.subscription.apiId);\n        this.checkIfDynamicUsagePolicy(this.props.subscription.subscriptionId);\n        this.populateSubscriptionTiers(this.props.subscription.apiId);\n        this.checkIfWebhookAPI();\n    }\n\n    /**\n    *\n    *\n    * @memberof SubscriptionTableData\n    */\n    setSelectedTier(e) {\n        this.setState({ selectedTier: e });\n    }\n\n    /**\n     *\n     * Handle onclick for subscription delete\n     * @param {*} subscriptionId subscription id\n     * @memberof SubscriptionTableData\n     */\n    handleRequestDelete(subscriptionId) {\n        const { handleSubscriptionDelete } = this.props;\n        this.setState({ openMenu: false });\n        if (handleSubscriptionDelete) {\n            handleSubscriptionDelete(subscriptionId);\n        }\n    }\n\n    /**\n     *\n     *\n     * @memberof SubscriptionTableData\n     */\n    handleRequestCloseEditMenu() {\n        this.setState({ openMenuEdit: false });\n    }\n\n    /**\n    *\n    *\n    * @memberof SubscriptionTableData\n    */\n    handleRequestOpenEditMenu() {\n        this.setState({ openMenuEdit: true });\n    }\n\n    /**\n    * @memberof SubscriptionTableData\n    */\n    handleRequestOpen() {\n        this.setState({ openMenu: true });\n    }\n\n    /**\n     * @memberof SubscriptionTableData\n     */\n    handleRequestClose() {\n        this.setState({ openMenu: false });\n    }\n\n    /**\n     *\n     * Handle onclick for subscription update\n     * @param {*} apiId subscription id\n     * @param {*} subscriptionId subscription id\n     * @param {*} throttlingPolicy throttling tier\n     * @param {*} status subscription status\n     * @memberof SubscriptionTableData\n     */\n    handleSubscriptionTierUpdate(apiId, subscriptionId, requestedThrottlingPolicy, status, currentThrottlingPolicy) {\n        const { handleSubscriptionUpdate } = this.props;\n        this.setState({ openMenuEdit: false });\n        if (handleSubscriptionUpdate) {\n            handleSubscriptionUpdate(apiId, subscriptionId, currentThrottlingPolicy, status, requestedThrottlingPolicy);\n        }\n    }\n\n    /**\n     * Getting the policies from api details\n     *\n     */\n    populateSubscriptionTiers(apiUUID) {\n        const apiClient = new Api();\n        const promisedApi = apiClient.getAPIById(apiUUID);\n        promisedApi.then((response) => {\n            if (response && response.data) {\n                const api = JSON.parse(response.data);\n                const apiTiers = api.tiers;\n                const tiers = [];\n                for (let i = 0; i < apiTiers.length; i++) {\n                    const { tierName } = apiTiers[i];\n                    tiers.push({ value: tierName, label: tierName });\n                }\n                this.setState({ tiers });\n            }\n        });\n    }\n\n    /**\n     * Check if the API is monetized\n     * @param apiUUID API UUID\n     */\n    checkIfMonetizedAPI(apiUUID) {\n        const apiClient = new Api();\n        const promisedApi = apiClient.getAPIById(apiUUID);\n        promisedApi.then((response) => {\n            if (response && response.data) {\n                const apiData = JSON.parse(response.data);\n                this.setState({ isMonetizedAPI: apiData.monetization.enabled });\n            }\n        });\n    }\n\n    /**\n     * Check if the policy is dynamic usage type\n     * @param subscriptionUUID subscription UUID\n     */\n    checkIfDynamicUsagePolicy(subscriptionUUID) {\n        const client = new Subscription();\n        const promisedSubscription = client.getSubscription(subscriptionUUID);\n        promisedSubscription.then((response) => {\n            if (response && response.body) {\n                const subscriptionData = JSON.parse(response.data);\n                if (subscriptionData.throttlingPolicy) {\n                    const apiClient = new Api();\n                    const promisedPolicy = apiClient.getTierByName(subscriptionData.throttlingPolicy, 'subscription');\n                    promisedPolicy.then((policyResponse) => {\n                        const policyData = JSON.parse(policyResponse.data);\n                        if (policyData.monetizationAttributes.billingType\n                            && (policyData.monetizationAttributes.billingType\n                                === 'DYNAMICRATE')) {\n                            this.setState({ isDynamicUsagePolicy: true });\n                        }\n                    });\n                }\n            }\n        });\n    }\n\n    /**\n     * Check if the API is a webhook API\n     */\n    checkIfWebhookAPI() {\n        this.setState({ isWebhookAPI: this.props.subscription.apiInfo.type === CONSTANTS.API_TYPES.WEBSUB });\n    }\n\n    /**\n     * Handle open click for view webhook URLs\n     * @param {*} event click event\n     * @memberof SubscriptionTableData\n     */\n    handleOpenCallbackURLs(event) {\n        this.setState({ callbackLinkAnchor: event.currentTarget });\n    }\n\n    /**\n     * Handle close for view webhook URLs\n     * @memberof SubscriptionTableData\n     */\n    handleCloseCallbackURLs() {\n        this.setState({ callbackLinkAnchor: null });\n    }\n\n    /**\n    * @inheritdoc\n    * @memberof SubscriptionTableData\n    */\n    render() {\n        const {\n            subscription: {\n                apiInfo, status, throttlingPolicy, subscriptionId, apiId, requestedThrottlingPolicy,\n            },\n        } = this.props;\n        const {\n            openMenu, isMonetizedAPI, isDynamicUsagePolicy, openMenuEdit, selectedTier, tiers, isWebhookAPI, callbackLinkAnchor,\n        } = this.state;\n        const isSubValidationDisabled = tiers && tiers.length === 1\n            && tiers[0].value.includes(CONSTANTS.DEFAULT_SUBSCRIPTIONLESS_PLAN);\n        const link = (\n            <Link\n                to={tiers.length === 0 ? '' : '/apis/' + apiId}\n                style={{ cursor: tiers.length === 0 ? 'default' : '' }}\n                external\n            >\n                {apiInfo.name + ' - ' + apiInfo.version + ' '}\n                <MDIcon path={mdiOpenInNew} size='12px' />\n            </Link>\n        );\n        const openWebhookURL = Boolean(callbackLinkAnchor);\n        const webhookURLPopoverId = openWebhookURL ? 'simple-popover' : undefined;\n        const callBackUrlLink = (\n            <a\n                aria-describedby={webhookURLPopoverId}\n                style={{\n                    fontSize: '0.6rem', color: '#072938', textDecoration: 'underline', paddingLeft: '10px',\n                }}\n                onClick={(event) => this.handleOpenCallbackURLs(event)}\n                onKeyDown={(event) => (event.key === 'Enter') && this.handleOpenCallbackURLs(event)}\n                role='button'\n                tabIndex={0}\n            >\n                View Callback URLs\n            </a>\n        );\n        return (\n            !isSubValidationDisabled && (\n                <TableRow hover>\n                    <TableCell>\n                        {link}\n                        {isWebhookAPI && (\n                            <>\n                                {callBackUrlLink}\n                                <Popover\n                                    id={webhookURLPopoverId}\n                                    open={openWebhookURL}\n                                    anchorEl={callbackLinkAnchor}\n                                    onClose={this.handleCloseCallbackURLs}\n                                    anchorOrigin={{\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    }}\n                                >\n                                    <div>\n                                        <WebHookDetails\n                                            applicationId={this.props.subscription.applicationId}\n                                            apiId={this.props.subscription.apiId}\n                                        />\n                                    </div>\n                                </Popover>\n                            </>\n                        )}\n                    </TableCell>\n                    <TableCell>{apiInfo.lifeCycleStatus}</TableCell>\n                    {throttlingPolicy.includes(CONSTANTS.DEFAULT_SUBSCRIPTIONLESS_PLAN) ? (\n                        <TableCell>\n                            {throttlingPolicy}\n                            {' '}\n                            <Tooltip\n                                placement='bottom'\n                                interactive\n                                aria-label='helper text for default subscription policy'\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Applications.Details.SubscriptionTableData.policy.default.tooltip'\n                                            defaultMessage='This is the default subscription policy used when\n                                            subscription validation was disabled.'\n                                        />\n                                    </>\n                                )}\n                                sx={{\n                                    backgroundColor: '#f5f5f9',\n                                    color: 'rgba(0, 0, 0, 0.87)',\n                                    maxWidth: 220,\n                                    fontSize: '12px',\n                                    border: '1px solid #dadde9',\n                                }}\n                            >\n                                <Box\n                                    component='span'\n                                    sx={{\n                                        display: 'inline-flex',\n                                        verticalAlign: 'middle',\n                                        fontSize: '16px',\n                                    }}\n                                >\n                                    <HelpOutline\n                                        sx={{\n                                            fontSize: 'inherit',\n                                        }}\n                                    />\n                                </Box>\n                            </Tooltip>\n                        </TableCell>\n                    ) : (\n                        <TableCell>{throttlingPolicy}</TableCell>\n                    )}\n                    <TableCell>{status}</TableCell>\n                    <TableCell>\n                        <Button\n                            id={'edit-api-subscription-' + apiId}\n                            color='grey'\n                            onClick={this.handleRequestOpenEditMenu}\n                            startIcon={<Icon>edit</Icon>}\n                            disabled={tiers.length === 0}\n                        >\n                            <FormattedMessage\n                                id='Applications.Details.SubscriptionTableData.edit.text'\n                                defaultMessage='Edit'\n                            />\n                        </Button>\n                        <Dialog open={openMenuEdit} transition={Slide}>\n                            <DialogTitle>\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.update.subscription'\n                                    defaultMessage='Update Subscription'\n                                />\n                            </DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    <FormattedMessage\n                                        id='Applications.Details.SubscriptionTableData.update.business.plan'\n                                        defaultMessage='Current Business Plan : '\n                                    />\n                                    {throttlingPolicy}\n                                    <div>\n                                        {(status === 'BLOCKED')\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Applications.Details.SubscriptionTableData.update.'\n                                                        + 'throttling.policy.blocked'}\n                                                    defaultMessage={'Subscription is in BLOCKED state. '\n                                                        + 'You need to unblock the subscription in order to edit the tier'}\n                                                />\n                                            )\n                                            : (status === 'ON_HOLD')\n                                                ? (\n                                                    <FormattedMessage\n                                                        id={'Applications.Details.SubscriptionTableData.update.'\n                                                            + 'throttling.policy.onHold'}\n                                                        defaultMessage={'Subscription is currently ON_HOLD state.'\n                                                            + ' You need to get approval to the subscription before editing the tier'}\n                                                    />\n                                                )\n                                                : (status === 'REJECTED')\n                                                    ? (\n                                                        <FormattedMessage\n                                                            id={'Applications.Details.SubscriptionTableData.update.'\n                                                                + 'throttling.policy.rejected'}\n                                                            defaultMessage={'Subscription is currently REJECTED state.'\n                                                                + ' You need to get approval to the subscription before editing the tier'}\n                                                        />\n                                                    )\n                                                    : (status === 'TIER_UPDATE_PENDING')\n                                                        ? (\n                                                            <FormattedMessage\n                                                                id={'Applications.Details.SubscriptionTableData.update.'\n                                                                    + 'throttling.policy.tierUpdatePending'}\n                                                                defaultMessage={'Subscription is currently TIER_UPDATE_PENDING state.'\n                                                                    + ' You need to get approval to the existing subscription edit request'\n                                                                    + ' before editing the tier'}\n                                                            />\n                                                        )\n                                                        : (\n                                                            <div>\n                                                                <Autocomplete\n                                                                    id='application-policy'\n                                                                    disableClearable\n                                                                    options={tiers}\n                                                                    getOptionLabel={(option) => option.label ?? option}\n                                                                    getOptionSelected={(option, value) => option.value === value}\n                                                                    value={selectedTier}\n                                                                    onChange={(e, newValue) => this.setSelectedTier(newValue.value)}\n                                                                    renderInput={(params) => (\n                                                                        <TextField\n                                                                            id='outlined-select-currency'\n                                                                            name='throttlingPolicy'\n                                                                            required\n                                                                            {...params}\n                                                                            label={(\n                                                                                <FormattedMessage\n                                                                                    defaultMessage='Business Plan'\n                                                                                    id={'Applications.Details.SubscriptionTableData.'\n                                                                                        + 'update.business.plan.name'}\n                                                                                />\n                                                                            )}\n                                                                            helperText={(\n                                                                                <FormattedMessage\n                                                                                    defaultMessage={'Assign a new Business plan to the '\n                                                                                        + 'existing subscription'}\n                                                                                    id={'Applications.Details.SubscriptionTableData.'\n                                                                                        + 'update.throttling.policy.helper'}\n                                                                                />\n                                                                            )}\n                                                                            margin='normal'\n                                                                            variant='outlined'\n                                                                        />\n                                                                    )}\n                                                                />\n                                                                {(status === 'TIER_UPDATE_PENDING')\n                                                                    && (\n                                                                        <div>\n                                                                            <FormattedMessage\n                                                                                id={'Applications.Details.SubscriptionTableData.update.'\n                                                                                    + 'throttling.policy.tier.update'}\n                                                                                defaultMessage='Pending Tier Update : '\n                                                                            />\n                                                                            {requestedThrottlingPolicy}\n                                                                        </div>\n                                                                    )}\n                                                            </div>\n                                                        )}\n                                    </div>\n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button dense color='grey' onClick={this.handleRequestCloseEditMenu}>\n                                    <FormattedMessage\n                                        id='Applications.Details.SubscriptionTableData.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                                <Button\n                                    variant='contained'\n                                    disabled={(status === 'BLOCKED' || status === 'ON_HOLD' || status === 'REJECTED'\n                                        || status === 'TIER_UPDATE_PENDING')}\n                                    dense\n                                    color='primary'\n                                    onClick={() => this.handleSubscriptionTierUpdate(apiId,\n                                        subscriptionId, selectedTier, status, throttlingPolicy)}\n                                    data-testid='subscription-tier-update-button'\n                                >\n                                    <FormattedMessage\n                                        id='Applications.Details.SubscriptionTableData.update'\n                                        defaultMessage='Update'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                            resourceMethod={resourceMethods.DELETE}\n                        >\n                            <Button\n                                id={'delete-api-subscription-' + apiId}\n                                color='grey'\n                                onClick={this.handleRequestOpen}\n                                startIcon={<Icon>delete</Icon>}\n                                disabled={tiers.length === 0 || status === 'DELETE_PENDING'}\n                            >\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.delete.text'\n                                    defaultMessage='Delete'\n                                />\n                            </Button>\n                        </ScopeValidation>\n\n                        <Dialog open={openMenu} transition={Slide}>\n                            <DialogTitle>\n                                <FormattedMessage\n                                    id='Applications.Details.SubscriptionTableData.delete.subscription.confirmation.dialog.title'\n                                    defaultMessage='Confirm'\n                                />\n                            </DialogTitle>\n                            <DialogContent>\n                                <DialogContentText>\n                                    <FormattedMessage\n                                        id='Applications.Details.SubscriptionTableData.delete.subscription.confirmation'\n                                        defaultMessage='Are you sure you want to delete the Subscription?'\n                                    />\n                                </DialogContentText>\n                            </DialogContent>\n                            <DialogActions>\n                                <Button dense color='grey' onClick={this.handleRequestClose}>\n                                    <FormattedMessage\n                                        id='Applications.Details.SubscriptionTableData.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                                <Button\n                                    id='delete-api-subscription-confirm-btn'\n                                    dense\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => this.handleRequestDelete(subscriptionId)}\n                                >\n                                    <FormattedMessage\n                                        id='Applications.Details.SubscriptionTableData.delete'\n                                        defaultMessage='Delete'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {isMonetizedAPI && (\n                            <Invoice\n                                tiers={tiers}\n                                subscriptionId={subscriptionId}\n                                isDynamicUsagePolicy={isDynamicUsagePolicy}\n                            />\n                        )}\n                    </TableCell>\n                </TableRow>\n            )\n        );\n    }\n}\nSubscriptionTableData.propTypes = {\n    subscription: PropTypes.shape({\n        apiInfo: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            version: PropTypes.string.isRequired,\n            lifeCycleStatus: PropTypes.string.isRequired,\n        }).isRequired,\n        throttlingPolicy: PropTypes.string.isRequired,\n        subscriptionId: PropTypes.string.isRequired,\n        apiId: PropTypes.string.isRequired,\n        status: PropTypes.string.isRequired,\n        requestedThrottlingPolicy: PropTypes.string.isRequired,\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    handleSubscriptionUpdate: PropTypes.func.isRequired,\n};\nexport default SubscriptionTableData;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Grid from '@mui/material/Grid';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\nimport Icon from '@mui/material/Icon';\nimport IconButton from '@mui/material/IconButton';\nimport Dialog from '@mui/material/Dialog';\nimport Button from '@mui/material/Button';\nimport MuiDialogTitle from '@mui/material/DialogTitle';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport InputBase from '@mui/material/InputBase';\nimport HighlightOffIcon from '@mui/icons-material/HighlightOff';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Progress from 'AppComponents/Shared/Progress';\nimport Alert from 'AppComponents/Shared/Alert';\nimport APIList from 'AppComponents/Apis/Listing/APICardView';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport CONSTANTS from 'AppData/Constants';\nimport Subscription from 'AppData/Subscription';\nimport Api from 'AppData/api';\nimport { app } from 'Settings';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport SubscriptionTableData from './SubscriptionTableData';\n\nconst PREFIX = 'Subscriptions';\n\nconst classes = {\n    searchRoot: `${PREFIX}-searchRoot`,\n    searchBar: `${PREFIX}-searchBar`,\n    input: `${PREFIX}-input`,\n    iconButton: `${PREFIX}-iconButton`,\n    divider: `${PREFIX}-divider`,\n    root: `${PREFIX}-root`,\n    subscribePop: `${PREFIX}-subscribePop`,\n    firstCell: `${PREFIX}-firstCell`,\n    cardTitle: `${PREFIX}-cardTitle`,\n    cardContent: `${PREFIX}-cardContent`,\n    titleWrapper: `${PREFIX}-titleWrapper`,\n    dialogHeader: `${PREFIX}-dialogHeader`,\n    dialogTitle: `${PREFIX}-dialogTitle`,\n    genericMessageWrapper: `${PREFIX}-genericMessageWrapper`,\n    searchResults: `${PREFIX}-searchResults`,\n    clearSearchIcon: `${PREFIX}-clearSearchIcon`,\n    subsTable: `${PREFIX}-subsTable`,\n    closeButton: `${PREFIX}-closeButton`,\n};\n\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.root}`]: {\n        padding: theme.spacing(3),\n        '& h5': {\n            color: theme.palette.getContrastText(theme.palette.background.default),\n        },\n    },\n\n    [`& .${classes.firstCell}`]: {\n        paddingLeft: 0,\n    },\n\n    [`& .${classes.cardContent}`]: {\n        '& table tr td': {\n            paddingLeft: theme.spacing(1),\n        },\n        '& table tr:nth-child(even)': {\n            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n            '& td, & a': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n            },\n        },\n        '& table tr:nth-child(odd)': {\n            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n            '& td, & a': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n            },\n        },\n        '& table th': {\n            backgroundColor: theme.custom.listView.tableHeadBackground,\n            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n            paddingLeft: theme.spacing(1),\n        },\n\n    },\n\n    [`& .${classes.titleWrapper}`]: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingBottom: theme.spacing(2),\n        '& h5': {\n            marginRight: theme.spacing(1),\n        },\n    },\n\n    [`& .${classes.genericMessageWrapper}`]: {\n        margin: theme.spacing(2),\n    },\n\n    [`& .${classes.subsTable}`]: {\n        '& td': {\n            padding: '4px 8px',\n        },\n    },\n\n}));\n\nconst StyledDialog = styled(Dialog)((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.subscribePop}`]: {\n        '& span, & h5, & label, & input, & td, & li': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n\n    [`& .${classes.dialogHeader}`]: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n\n    [`& .${classes.dialogTitle}`]: {\n        marginTop: theme.spacing(1),\n        padding: theme.spacing(2),\n    },\n\n    [`& .${classes.searchRoot}`]: {\n        marginLeft: 'auto',\n        width: '50%',\n        marginTop: theme.spacing(2),\n    },\n\n    [`& .${classes.searchBar}`]: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        flex: 1,\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(1),\n    },\n\n    [`& .${classes.clearSearchIcon}`]: {\n        cursor: 'pointer',\n    },\n\n    [`& .${classes.input}`]: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n\n    [`& .${classes.iconButton}`]: {\n        padding: 10,\n    },\n\n    [`& .${classes.searchResults}`]: {\n        height: 30,\n        display: 'flex',\n        paddingTop: theme.spacing(1),\n        paddingRight: 0,\n        paddingBottom: 0,\n        paddingLeft: theme.spacing(3),\n    },\n\n    [`& .${classes.closeButton}`]: {\n        height: '100%',\n        marginTop: theme.spacing(2),\n        marginRight: theme.spacing(1),\n    },\n}));\n\n/**\n *\n *\n * @class Subscriptions\n * @extends {React.Component}\n */\nclass Subscriptions extends React.Component {\n    /**\n     *Creates an instance of Subscriptions.\n     * @param {*} props properties\n     * @memberof Subscriptions\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            subscriptions: null,\n            apisNotFound: false,\n            subscriptionsNotFound: false,\n            isAuthorize: true,\n            openDialog: false,\n            searchText: '',\n            pseudoSubscriptions: false,\n        };\n        this.checkSubValidationDisabled = this.checkSubValidationDisabled.bind(this);\n        this.handleSubscriptionDelete = this.handleSubscriptionDelete.bind(this);\n        this.handleSubscriptionUpdate = this.handleSubscriptionUpdate.bind(this);\n        this.updateSubscriptions = this.updateSubscriptions.bind(this);\n        this.handleSubscribe = this.handleSubscribe.bind(this);\n        this.handleOpenDialog = this.handleOpenDialog.bind(this);\n        this.handleSearchTextChange = this.handleSearchTextChange.bind(this);\n        this.handleSearchTextTmpChange = this.handleSearchTextTmpChange.bind(this);\n        this.handleClearSearch = this.handleClearSearch.bind(this);\n        this.handleEnterPress = this.handleEnterPress.bind(this);\n        this.searchTextTmp = '';\n    }\n\n    /**\n     *\n     *\n     * @memberof Subscriptions\n     */\n    componentDidMount() {\n        const { applicationId } = this.props.application;\n        this.updateSubscriptions(applicationId);\n    }\n\n    handleOpenDialog() {\n        this.setState((prevState) => ({ openDialog: !prevState.openDialog, searchText: '' }));\n    }\n\n    /**\n     *\n     * Check if the subscription validation is disabled\n     * @param {*} subList Subscriptions list reponse object\n     * @returns\n     */\n    checkSubValidationDisabled(subList) {\n        if (subList !== null && subList.length > 0) {\n            const pseudoList = subList.filter((sub) => (sub.apiInfo.throttlingPolicies\n                && sub.apiInfo.throttlingPolicies.length === 1\n                && sub.apiInfo.throttlingPolicies[0].includes(CONSTANTS.DEFAULT_SUBSCRIPTIONLESS_PLAN)));\n            if (pseudoList.length === subList.length) {\n                this.setState({ pseudoSubscriptions: true });\n            } else {\n                this.setState({ pseudoSubscriptions: false });\n            }\n            return;\n        }\n        this.setState({ pseudoSubscriptions: false });\n    }\n\n    /**\n     *\n     * Update subscriptions list of Application\n     * @param {*} applicationId application id\n     * @memberof Subscriptions\n     */\n    updateSubscriptions(applicationId) {\n        const client = new Subscription();\n        const subscriptionLimit = app.subscriptionLimit || 1000;\n        const promisedSubscriptions = client.getSubscriptions(null, applicationId, subscriptionLimit);\n        promisedSubscriptions\n            .then((response) => {\n                this.setState({ subscriptions: response.body.list });\n                this.checkSubValidationDisabled(response.body.list);\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ subscriptionsNotFound: true });\n                } else if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n            });\n    }\n\n    /**\n     *\n     * Handle subscription deletion of application\n     * @param {*} subscriptionId subscription id\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete(subscriptionId) {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n\n        promisedDelete\n            .then((response) => {\n                if (response.status === 200) {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscription deleted successfully!',\n                        id: 'Applications.Details.Subscriptions.delete.success',\n                    }));\n                }\n                if (response.status === 201) {\n                    console.log(response);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscription Deletion Request Created!',\n                        id: 'Applications.Details.Subscriptions.request.created',\n                    }));\n                    const { applicationId } = this.props.application;\n                    this.updateSubscriptions(applicationId);\n                    return;\n                }\n                if (response.status !== 200 && response.status !== 201) {\n                    console.log(response);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Something went wrong while deleting the Subscription!',\n                        id: 'Applications.Details.Subscriptions.something.went.wrong',\n                    }));\n                    return;\n                }\n                const { subscriptions } = this.state;\n                for (const endpointIndex in subscriptions) {\n                    if (\n                        Object.prototype.hasOwnProperty.call(subscriptions, endpointIndex)\n                        && subscriptions[endpointIndex].subscriptionId === subscriptionId\n                    ) {\n                        subscriptions.splice(endpointIndex, 1);\n                        break;\n                    }\n                }\n                this.setState({ subscriptions });\n                this.checkSubValidationDisabled(subscriptions);\n                this.props.getApplication();\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n                Alert.error(intl.formatMessage({\n                    defaultMessage: 'Error occurred when deleting subscription',\n                    id: 'Applications.Details.Subscriptions.error.while.deleting',\n                }));\n            });\n    }\n\n    /**\n     *\n     * Handle subscription update of application\n     *\n     * @param {*} apiId API id\n     * @param {*} subscriptionId subscription id\n     * @param {*} throttlingPolicy throttling tier\n     * @param {*} status subscription status\n     * @memberof Subscriptions\n     */\n    handleSubscriptionUpdate(apiId, subscriptionId, currentThrottlingPolicy, status, requestedThrottlingPolicy) {\n        const { intl } = this.props;\n        const { applicationId } = this.props.application;\n        const client = new Subscription();\n        const promisedUpdate = client.updateSubscription(\n            applicationId,\n            apiId,\n            subscriptionId,\n            currentThrottlingPolicy,\n            status,\n            requestedThrottlingPolicy,\n        );\n\n        promisedUpdate\n            .then((response) => {\n                if (response.status !== 200 && response.status !== 201) {\n                    console.log(response);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Something went wrong while updating the Subscription!',\n                        id: 'Applications.Details.Subscriptions.wrong.with.subscription',\n                    }));\n                    return;\n                }\n                if (response.body.status === 'TIER_UPDATE_PENDING') {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Your subscription update request has been submitted and is now awaiting '\n                            + 'approval.',\n                        id: 'subscription.tierPending',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Business Plan updated successfully!',\n                        id: 'Applications.Details.Subscriptions.business.plan.updated',\n                    }));\n                }\n                this.updateSubscriptions(applicationId);\n                this.props.getApplication();\n            })\n            .catch((error) => {\n                const { status: statusInner } = error;\n                if (statusInner === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n                Alert.error(intl.formatMessage({\n                    defaultMessage: 'Error occurred when updating subscription',\n                    id: 'Applications.Details.Subscriptions.error.when.updating',\n                }));\n            });\n    }\n\n    /**\n     * Handle onClick of subscribing to an API\n     * @param {*} applicationId application id\n     * @param {*} apiId api id\n     * @param {*} policy policy\n     * @memberof Subscriptions\n     */\n    handleSubscribe(applicationId, apiId, policy) {\n        const api = new Api();\n        const { intl } = this.props;\n        if (!policy) {\n            Alert.error(intl.formatMessage({\n                id: 'Applications.Details.Subscriptions.select.a.subscription.policy',\n                defaultMessage: 'Select a subscription policy',\n            }));\n            return;\n        }\n\n        const promisedSubscribe = api.subscribe(apiId, applicationId, policy);\n        promisedSubscribe\n            .then((response) => {\n                if (response.status !== 201) {\n                    Alert.error(intl.formatMessage({\n                        id: 'Applications.Details.Subscriptions.error.occurred.during.subscription.not.201',\n                        defaultMessage: 'Error occurred during subscription',\n                    }));\n                } else {\n                    if (response.body.status === 'ON_HOLD') {\n                        Alert.info(intl.formatMessage({\n                            defaultMessage: 'Your subscription request has been submitted and is now awaiting '\n                                + 'approval.',\n                            id: 'subscription.pending',\n                        }));\n                    } else if (response.body.status === 'TIER_UPDATE_PENDING') {\n                        Alert.info(intl.formatMessage({\n                            defaultMessage: 'Your subscription update request has been submitted and is now awaiting '\n                                + 'approval.',\n                            id: 'subscription.tierPending',\n                        }));\n                    } else {\n                        Alert.info(intl.formatMessage({\n                            id: 'Applications.Details.Subscriptions.subscription.successful',\n                            defaultMessage: 'Subscription successful',\n                        }));\n                    }\n                    this.updateSubscriptions(applicationId);\n                    this.props.getApplication();\n                }\n            })\n            .catch((error) => {\n                const { status } = error;\n                if (status === 401) {\n                    this.setState({ isAuthorize: false });\n                }\n                if (status === 403 && error.response.body) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Applications.Details.Subscriptions.error.occurred.during.subscription',\n                        defaultMessage: 'Error occurred during subscription',\n                    }));\n                }\n            });\n    }\n\n    handleSearchTextChange() {\n        this.setState({ searchText: this.searchTextTmp });\n    }\n\n    handleSearchTextTmpChange(event) {\n        this.searchTextTmp = event.target.value;\n    }\n\n    handleClearSearch() {\n        this.setState({ searchText: '' });\n        this.searchInputElem.value = '';\n    }\n\n    handleEnterPress(e) {\n        if (e.keyCode === 13) {\n            e.preventDefault();\n            this.handleSearchTextChange();\n        }\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof Subscriptions\n     */\n    render() {\n        const { isAuthorize, openDialog, searchText } = this.state;\n\n        if (!isAuthorize) {\n            window.location = app.context + '/services/configs';\n        }\n\n        const {\n            subscriptions, apisNotFound, subscriptionsNotFound,\n        } = this.state;\n        const { applicationId } = this.props.application;\n        const { intl } = this.props;\n\n        if (subscriptions) {\n            return (\n                <Root>\n                    <Box className={classes.root}>\n                        <Box className={classes.titleWrapper}>\n                            <Typography\n                                variant='h5'\n                                sx={{\n                                    textTransform: 'capitalize',\n                                }}\n                            >\n                                <FormattedMessage\n                                    id='Applications.Details.Subscriptions.subscription.management'\n                                    defaultMessage='Subscription Management'\n                                />\n                            </Typography>\n                            <Button\n                                color='secondary'\n                                className={classes.buttonElm}\n                                size='small'\n                                onClick={this.handleOpenDialog}\n                            >\n                                <Icon>add_circle_outline</Icon>\n                                <FormattedMessage\n                                    id='Applications.Details.Subscriptions.subscription.management.add'\n                                    defaultMessage='Subscribe APIs'\n                                />\n                            </Button>\n                        </Box>\n                        <Grid container sx='tab-grid' spacing={2}>\n                            <Grid item xs={12} xl={11}>\n                                {((subscriptions && subscriptions.length === 0) || this.state.pseudoSubscriptions)\n                                    ? (\n                                        <Box className={classes.genericMessageWrapper}>\n                                            <InlineMessage\n                                                type='info'\n                                                sx={(theme) => ({\n                                                    width: 1000,\n                                                    padding: theme.spacing(2),\n                                                })}\n                                            >\n                                                <Typography variant='h5' component='h3'>\n                                                    <FormattedMessage\n                                                        id='Applications.Details.Subscriptions.no.subscriptions'\n                                                        defaultMessage='No Subscriptions Available'\n                                                    />\n                                                </Typography>\n                                                <Typography component='p'>\n                                                    <FormattedMessage\n                                                        id='Applications.Details.Subscriptions.no.subscriptions.content'\n                                                        defaultMessage='No subscriptions are available for this Application'\n                                                    />\n                                                </Typography>\n                                            </InlineMessage>\n                                        </Box>\n                                    )\n                                    : (\n                                        <Box className={classes.cardContent}>\n                                            {subscriptionsNotFound ? (\n                                                <ResourceNotFound />\n                                            ) : (\n                                                <Table className={classes.subsTable}>\n                                                    <TableHead>\n                                                        <TableRow>\n                                                            <TableCell className={classes.firstCell}>\n                                                                <FormattedMessage\n                                                                    id='Applications.Details.Subscriptions.api.name'\n                                                                    defaultMessage='API'\n                                                                />\n                                                            </TableCell>\n                                                            <TableCell>\n                                                                <FormattedMessage\n                                                                    id={`Applications.Details.Subscriptions\n                                                                            .subscription.state`}\n                                                                    defaultMessage='Lifecycle State'\n                                                                />\n                                                            </TableCell>\n                                                            <TableCell>\n                                                                <FormattedMessage\n                                                                    id={`Applications.Details.Subscriptions\n                                                                            .business.plan`}\n                                                                    defaultMessage='Business Plan'\n                                                                />\n                                                            </TableCell>\n                                                            <TableCell>\n                                                                <FormattedMessage\n                                                                    id='Applications.Details.Subscriptions.Status'\n                                                                    defaultMessage='Subscription Status'\n                                                                />\n                                                            </TableCell>\n                                                            <TableCell>\n                                                                <FormattedMessage\n                                                                    id='Applications.Details.Subscriptions.action'\n                                                                    defaultMessage='Action'\n                                                                />\n                                                            </TableCell>\n                                                        </TableRow>\n                                                    </TableHead>\n                                                    <TableBody>\n                                                        {subscriptions\n                                                                    && subscriptions.map((subscription) => {\n                                                                        return (\n                                                                            <SubscriptionTableData\n                                                                                key={subscription.subscriptionId}\n                                                                                subscription={subscription}\n                                                                                handleSubscriptionDelete={\n                                                                                    this.handleSubscriptionDelete\n                                                                                }\n                                                                                handleSubscriptionUpdate={\n                                                                                    this.handleSubscriptionUpdate\n                                                                                }\n                                                                            />\n                                                                        );\n                                                                    })}\n                                                    </TableBody>\n                                                </Table>\n                                            )}\n                                        </Box>\n                                    )}\n                            </Grid>\n                        </Grid>\n                        <StyledDialog\n                            onClose={this.handleOpenDialog}\n                            aria-labelledby='simple-dialog-title'\n                            open={openDialog}\n                            fullWidth='true'\n                            maxWidth='sm'\n                            className={classes.subscribePop}\n                        >\n                            <Box className={classes.dialogHeader}>\n                                <MuiDialogTitle className={classes.dialogTitle} disableTypography>\n                                    <Typography variant='h6'>\n                                        <FormattedMessage\n                                            id='Applications.Details.Subscriptions.subscription.management.add'\n                                            defaultMessage='Subscribe APIs'\n                                        />\n                                    </Typography>\n                                </MuiDialogTitle>\n                                <Box className={classes.searchRoot}>\n                                    <Paper\n                                        component='form'\n                                        className={classes.searchBar}\n                                    >\n                                        {searchText && (\n                                            <HighlightOffIcon\n                                                className={classes.clearSearchIcon}\n                                                onClick={this.handleClearSearch}\n                                            />\n                                        )}\n                                        <InputBase\n                                            className={classes.input}\n                                            placeholder={intl.formatMessage({\n                                                defaultMessage: 'Search APIs',\n                                                id: 'Applications.Details.Subscriptions.search',\n                                            })}\n                                            inputProps={{\n                                                'aria-label': intl.formatMessage({\n                                                    defaultMessage: 'Search APIs',\n                                                    id: 'Applications.Details.Subscriptions.search',\n                                                }),\n                                            }}\n                                            inputRef={(el) => { this.searchInputElem = el; }}\n                                            onChange={this.handleSearchTextTmpChange}\n                                            onKeyDown={this.handleEnterPress}\n                                        />\n                                        <IconButton\n                                            className={classes.iconButton}\n                                            aria-label='search'\n                                            onClick={this.handleSearchTextChange}\n                                            size='large'\n                                        >\n                                            <SearchIcon />\n                                        </IconButton>\n                                    </Paper>\n                                    <Box className={classes.searchResults}>\n                                        {(searchText && searchText !== '') ? (\n                                            <>\n                                                <Typography variant='caption'>\n                                                    <FormattedMessage\n                                                        id='Applications.Details.Subscriptions.filter.msg'\n                                                        defaultMessage='Filtered APIs for'\n                                                    />\n                                                    {` ${searchText}`}\n                                                </Typography>\n                                            </>\n                                        ) : (\n                                            <Typography variant='caption'>\n                                                <FormattedMessage\n                                                    id='Applications.Details.Subscriptions.filter.msg.all.apis'\n                                                    defaultMessage='Displaying all APIs'\n                                                />\n                                            </Typography>\n                                        )}\n                                    </Box>\n                                </Box>\n                                <IconButton\n                                    aria-label='close'\n                                    className={classes.closeButton}\n                                    onClick={this.handleOpenDialog}\n                                    size='large'\n                                >\n                                    <Icon>cancel</Icon>\n                                </IconButton>\n                            </Box>\n                            <Box padding={2}>\n                                <APIList\n                                    apisNotFound={apisNotFound}\n                                    subscriptions={subscriptions}\n                                    applicationId={applicationId}\n                                    handleSubscribe={(appInner, api, policy) => this.handleSubscribe(appInner, api, policy)}\n                                    searchText={searchText}\n                                />\n                            </Box>\n                        </StyledDialog>\n                    </Box>\n                </Root>\n            );\n        } else {\n            return <Progress />;\n        }\n    }\n}\nSubscriptions.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl((Subscriptions));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withRouter, Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\nimport Icon from '@mui/material/Icon';\nimport Button from '@mui/material/Button';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\nimport Grid from '@mui/material/Grid';\nimport Application from 'AppData/Application';\nimport Alert from 'AppComponents/Shared/Alert';\nimport AuthManager from 'AppData/AuthManager';\nimport Box from '@mui/material/Box';\nimport Settings from 'AppComponents/Shared/SettingsContext';\nimport DeleteConfirmation from '../Listing/DeleteConfirmation';\n\n/**\n *\n *\n * @class InfoBar\n * @extends {React.Component}\n */\nclass InfoBar extends React.Component {\n    /**\n     * @param {Object} props props passed from above\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            notFound: false,\n            showOverview: true,\n            isDeleteOpen: false,\n            isOrgWideAppUpdateEnabled: false,\n        };\n        this.toggleOverview = this.toggleOverview.bind(this);\n        this.handleAppDelete = this.handleAppDelete.bind(this);\n        this.handleDeleteConfimation = this.handleDeleteConfimation.bind(this);\n        this.toggleDeleteConfirmation = this.toggleDeleteConfirmation.bind(this);\n    }\n\n    componentDidMount() {\n        this.isOrgWideAppUpdateEnabled();\n    }\n\n    /**\n     * retrieve Settings from the context and check the org-wide application update enabled\n     */\n    isOrgWideAppUpdateEnabled = () => {\n        const { settings: { orgWideAppUpdateEnabled } } = this.context;\n        this.setState({ isOrgWideAppUpdateEnabled: orgWideAppUpdateEnabled });\n    }\n\n    toggleDeleteConfirmation = () => {\n        this.setState(({ isDeleteOpen }) => ({ isDeleteOpen: !isDeleteOpen }));\n    }\n\n    /**\n     * Handles application deletion\n     * @memberof InfoBar\n     */\n    handleAppDelete() {\n        const { applicationId, intl, application } = this.props;\n        const promisedDelete = Application.deleteApp(applicationId);\n        let message = intl.formatMessage({\n            defaultMessage: 'In Application {name} deleted successfully!',\n            id: 'Applications.Details.InfoBar.application.deleted.successfully',\n        }, { name: application.name });\n        promisedDelete.then((status) => {\n            if (status === 200) {\n                Alert.info(message);\n                this.toggleDeleteConfirmation();\n            } else if (status === 201) {\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Delete request created for application {name}',\n                    id: 'Applications.Listing.Listing.application.deleting.requested',\n                }, { name: application.name }));\n                this.toggleDeleteConfirmation();\n            }\n            this.props.history.push('/applications');\n        }).catch((error) => {\n            console.log(error);\n            message = intl.formatMessage({\n                defaultMessage: 'Error while deleting application {name}',\n                id: 'Applications.Details.InfoBar.application.deleting.error',\n            }, { name: application.name });\n            Alert.error(message);\n        });\n    }\n\n    /**\n     * Handles delete confimation\n     * @memberof InfoBar\n     */\n    handleDeleteConfimation() {\n        const { isDeleteOpen } = this.state;\n        this.setState({ isDeleteOpen: !isDeleteOpen });\n    }\n\n    /**\n     * Toggles the showOverview state\n     * @param {boolean} todo toggle state\n     * @memberof InfoBar\n     */\n    toggleOverview(todo) {\n        if (typeof todo === 'boolean') {\n            this.setState({ showOverview: todo });\n        } else {\n            this.setState((prevState) => ({ showOverview: !prevState.showOverview }));\n        }\n    }\n\n    /**\n     * @returns {div}\n     * @memberof InfoBar\n     */\n    render() {\n        const {\n            applicationId, application,\n        } = this.props;\n        const applicationOwner = this.props.application.owner;\n        const {\n            notFound, isDeleteOpen, isOrgWideAppUpdateEnabled,\n        } = this.state;\n\n        if (notFound) {\n            return (\n                <ResourceNotFound\n                    message={(\n                        <FormattedMessage\n                            id='Applications.Details.InfoBar.listing.resource.not.found'\n                            defaultMessage='Resource Not Fount'\n                        />\n                    )}\n                />\n            );\n        }\n\n        if (!application) {\n            return <Loading />;\n        }\n        const isUserOwner = AuthManager.getUser().name === applicationOwner;\n\n        return (\n            <Box sx={{ width: '100%' }}>\n                <Box sx={(theme) => ({\n                    height: theme.custom.infoBar.height || 70,\n                    background: theme.custom.infoBar.background || '#ffffff',\n                    color: theme.palette.getContrastText(theme.custom.infoBar.background || '#ffffff'),\n                    borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n                    display: 'flex',\n                    alignItems: 'center',\n                    paddingLeft: theme.spacing(2),\n                })}\n                >\n                    <Grid item xs={10}>\n                        <Box sx={(theme) => ({ marginLeft: theme.spacing(1) })}>\n                            <Link\n                                to={'/applications/' + applicationId + '/overview'}\n                                className={(theme) => ({\n                                    color: theme.palette.getContrastText(theme.custom.infoBar.background),\n                                })}\n                            >\n                                <Typography id='itest-info-bar-application-name' variant='h4'>{application.name}</Typography>\n                            </Link>\n                        </Box>\n                        <Box sx={(theme) => ({ marginLeft: theme.spacing(1) })}>\n                            <Typography variant='caption' gutterBottom align='left' noWrap>\n                                {application.subscriptionCount}\n                                {' '}\n                                <FormattedMessage\n                                    id='Applications.Details.InfoBar.subscriptions'\n                                    defaultMessage='Subscriptions'\n                                />\n                            </Typography>\n                        </Box>\n                    </Grid>\n                    {(isOrgWideAppUpdateEnabled || isUserOwner) && (\n                        <Grid container justifyContent='flex-end'>\n                            <VerticalDivider height={70} />\n                            <Grid\n                                item\n                                xs={1}\n                                m={3}\n                                sx={(theme) => ({\n                                    display: 'inline-grid',\n                                    cursor: 'pointer',\n                                    justifyContent: 'center',\n                                    '& .material-icons, & span': {\n                                        color: theme.palette.getContrastText(theme.custom.infoBar.background),\n                                    },\n                                })}\n                            >\n                                <Link\n                                    to={`/applications/${applicationId}/edit/fromView`}\n                                    sx={(theme) => ({\n                                        display: 'inline-grid',\n                                        cursor: 'pointer',\n                                        '& .material-icons, & span': {\n                                            color: theme.palette.getContrastText(theme.custom.infoBar.background),\n                                        },\n                                    })}\n                                >\n                                    <Button\n                                        id='edit-application'\n                                        style={{ padding: '4px', display: 'flex', flexDirection: 'column' }}\n                                        color='grey'\n                                        classes={{\n                                            label: {\n                                                display: 'flex',\n                                                alignItems: 'center',\n                                                justifyContent: 'center',\n                                                flexDirection: 'column',\n                                            },\n                                        }}\n                                        aria-label={(\n                                            <FormattedMessage\n                                                id='Applications.Details.InfoBar.edit'\n                                                defaultMessage='Edit'\n                                            />\n                                        )}\n                                    >\n                                        <Icon>edit</Icon>\n                                        <Typography variant='caption' style={{ marginTop: '2px' }}>\n                                            <FormattedMessage\n                                                id='Applications.Details.InfoBar.edit.text'\n                                                defaultMessage='Edit'\n                                            />\n                                        </Typography>\n                                    </Button>\n                                </Link>\n                            </Grid>\n                            <VerticalDivider height={70} />\n                            <Grid\n                                item\n                                xs={1}\n                                m={1}\n                                sx={(theme) => ({\n                                    display: 'inline-grid',\n                                    cursor: 'pointer',\n                                    '& .material-icons, & span': {\n                                        color: theme.palette.getContrastText(theme.custom.infoBar.background),\n                                    },\n                                })}\n                            >\n                                <Button\n                                    id='delete-application'\n                                    onClick={this.handleDeleteConfimation}\n                                    style={{ padding: '4px', display: 'flex', flexDirection: 'column' }}\n                                    disabled={(!isOrgWideAppUpdateEnabled && AuthManager.getUser().name !== applicationOwner)\n                                        || this.props.application.status === 'DELETE_PENDING'}\n                                    color='grey'\n                                    classes={{\n                                        label: {\n                                            display: 'flex',\n                                            alignItems: 'center',\n                                            justifyContent: 'center',\n                                            flexDirection: 'column',\n                                        },\n                                    }}\n                                    aria-label={(\n                                        <FormattedMessage\n                                            id='Applications.Details.InfoBar.delete'\n                                            defaultMessage='Delete'\n                                        />\n                                    )}\n                                >\n                                    <Icon>delete</Icon>\n                                    <Typography variant='caption' style={{ marginTop: '2px' }}>\n                                        <FormattedMessage\n                                            id='Applications.Details.InfoBar.text'\n                                            defaultMessage='Delete'\n                                        />\n                                    </Typography>\n                                </Button>\n                                <DeleteConfirmation\n                                    handleAppDelete={this.handleAppDelete}\n                                    isDeleteOpen={isDeleteOpen}\n                                    toggleDeleteConfirmation={this.toggleDeleteConfirmation}\n                                />\n                            </Grid>\n                        </Grid>\n                    )}\n                </Box>\n            </Box>\n        );\n    }\n}\n\nInfoBar.contextType = Settings;\n\nInfoBar.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    applicationId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(withRouter((InfoBar)));\n","/*\n * Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport {\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, TextField,\n} from '@mui/material';\nimport Slide from '@mui/material/Slide';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@mui/material/Tooltip';\nimport InfoIcon from '@mui/icons-material/InfoOutlined';\nimport IconButton from '@mui/material/IconButton';\n\nconst ResetThrottlePolicyDialog = (props) => {\n    const { handleResetThrottlePolicy, isResetOpen, toggleResetConfirmation } = props;\n    const [user, setUser] = useState('');\n    const [step, setStep] = useState(1);\n    const [isUserValid, setIsUserValid] = useState(true);\n    const intl = useIntl();\n\n    const validateName = (value) => {\n        if (!value || value.trim() === '') {\n            setIsUserValid(false);\n            return Promise.reject(new Error(intl.formatMessage({\n                id: 'Applications.Listing.ResetPolicyDialog.dialog.user.required',\n                defaultMessage: 'Application name is required',\n            })));\n        }\n        setIsUserValid(true);\n        return Promise.resolve(true);\n    };\n    const handleUserChange = (event) => {\n        setUser(event.target.value);\n        validateName(event.target.value);\n    };\n\n    const handleNext = () => {\n        setStep(2);\n    };\n\n    const handleBack = () => {\n        setStep(1);\n    };\n\n    const handleReset = () => {\n        if (user !== '') {\n            handleResetThrottlePolicy(user);\n            toggleResetConfirmation();\n            setUser('');\n            setStep(1);\n        }\n    };\n\n    return (\n        <Dialog\n            open={isResetOpen}\n            transition={Slide}\n            role='alertdialog'\n        >\n            {step === 1\n                ? (\n                    <>\n                        <DialogTitle>\n                            <FormattedMessage\n                                id='Applications.Listing.ResetPolicyDialog.dialog.title'\n                                defaultMessage='Reset Application Throttle Policy'\n                            />\n                            <Tooltip\n                                interactive\n                                title={(\n                                    <FormattedMessage\n                                        id='Applications.Listing.ResetPolicyDialog.dialog.text.description.tooltip'\n                                        defaultMessage={'Check the username properly before submitting since User will not be '\n                                                        + 'validated. Only a Policy Reset Request will be generated for the specified user'}\n                                    />\n                                )}\n                                placement='right'\n                                style={{ marginLeft: '20px', maxWidth: 500 }}\n                            >\n                                <IconButton style={{ marginLeft: '10px' }}>\n                                    <InfoIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                <FormattedMessage\n                                    id='Applications.Listing.ResetPolicyDialog.dialog.text.description'\n                                    defaultMessage='Enter the user of the application'\n                                />\n                            </DialogContentText>\n                            <TextField\n                                autoFocus\n                                type='text'\n                                value={user}\n                                onChange={handleUserChange}\n                                id='application-name'\n                                margin='normal'\n                                variant='outlined'\n                                required\n                                fullWidth\n                                label={intl.formatMessage({\n                                    defaultMessage: 'User',\n                                    id: 'Applications.Listing.ResetPolicyDialog.dialog.user',\n                                })}\n                                name='user'\n                                error={!isUserValid}\n                                inputProps={{\n                                    maxLength: 70,\n                                    alt: intl.formatMessage({\n                                        defaultMessage: 'Required',\n                                        id: 'Applications.Listing.ResetPolicyDialog.dialog.required.alt',\n                                    }),\n                                }}\n                            />\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={toggleResetConfirmation}>\n                                <FormattedMessage\n                                    id='Applications.Listing.ResetPolicyDialog.dialog.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Button>\n                            <Button\n                                id='next-button'\n                                size='small'\n                                variant='outlined'\n                                color='primary'\n                                onClick={handleNext}\n                                disabled={!user}\n                            >\n                                <FormattedMessage\n                                    id='Applications.Listing.ResetPolicyDialog.dialog.next'\n                                    defaultMessage='Next'\n                                />\n                            </Button>\n                        </DialogActions>\n                    </>\n                ) : (\n                    <>\n                        <DialogTitle>\n                            <FormattedMessage\n                                id='Applications.Listing.ResetPolicyDialog.dialog.confirmation.title'\n                                defaultMessage='Confirm Reset'\n                            />\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                <FormattedMessage\n                                    id='Applications.Listing.ResetPolicyDialog.dialog.confirmation.text'\n                                    defaultMessage='Are you sure you want to reset the throttle policy for user {user}?'\n                                    values={{ user }}\n                                />\n                            </DialogContentText>\n                        </DialogContent>\n                        <DialogActions>\n                            <Button onClick={handleBack}>\n                                <FormattedMessage\n                                    id='Applications.Listing.ResetPolicyDialog.dialog.back'\n                                    defaultMessage='Back'\n                                />\n                            </Button>\n                            <Button\n                                id='reset-button'\n                                size='small'\n                                variant='outlined'\n                                color='primary'\n                                onClick={handleReset}\n                            >\n                                <FormattedMessage\n                                    id='Applications.Listing.ResetPolicyDialog.dialog.reset'\n                                    defaultMessage='Reset'\n                                />\n                            </Button>\n                        </DialogActions>\n                    </>\n                )}\n        </Dialog>\n    );\n};\n\nResetThrottlePolicyDialog.propTypes = {\n    handleResetThrottlePolicy: PropTypes.func.isRequired,\n    isResetOpen: PropTypes.bool.isRequired,\n    toggleResetConfirmation: PropTypes.func.isRequired,\n};\n\nexport default ResetThrottlePolicyDialog;\n","import React, { useEffect, useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport classNames from 'classnames';\nimport Typography from '@mui/material/Typography';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport Icon from '@mui/material/Icon';\nimport Button from '@mui/material/Button';\nimport { FormattedMessage, injectIntl, useIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport API from 'AppData/api';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport {\n    Grid, List, ListItem, MenuItem, Paper, TextField,\n} from '@mui/material';\nimport { upperCaseString } from 'AppData/stringFormatter';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\nimport ResetThrottlePolicyDialog from 'AppComponents/Applications/Listing/ResetPolicyDialog';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Tooltip from '@mui/material/Tooltip';\nimport InfoIcon from '@mui/icons-material/InfoOutlined';\nimport IconButton from '@mui/material/IconButton';\n\nconst PREFIX = 'Overview';\n\nconst classes = {\n    root: `${PREFIX}-root`,\n    table: `${PREFIX}-table`,\n    leftCol: `${PREFIX}-leftCol`,\n    iconAligner: `${PREFIX}-iconAligner`,\n    iconTextWrapper: `${PREFIX}-iconTextWrapper`,\n    iconEven: `${PREFIX}-iconEven`,\n    iconOdd: `${PREFIX}-iconOdd`,\n    heading: `${PREFIX}-heading`,\n    emptyBox: `${PREFIX}-emptyBox`,\n    summaryRoot: `${PREFIX}-summaryRoot`,\n    actionPanel: `${PREFIX}-actionPanel`,\n    disabledTier: `${PREFIX}-disabledTier`,\n    Paper: `${PREFIX}-Paper`,\n    Paper2: `${PREFIX}-Paper2`,\n    list: `${PREFIX}-list`,\n    urlPaper: `${PREFIX}-urlPaper`,\n    input: `${PREFIX}-input`,\n    avatar: `${PREFIX}-avatar`,\n    iconStyle: `${PREFIX}-iconStyle`,\n    infoButton: `${PREFIX}-infoButton`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    [`& .${classes.root}`]: {\n        padding: theme.spacing(3, 2),\n        '& td, & th': {\n            color: theme.palette.getContrastText(theme.custom.infoBar.background),\n        },\n        background: theme.custom.infoBar.background,\n    },\n\n    [`& .${classes.table}`]: {\n        minWidth: '100%',\n    },\n\n    [`& .${classes.leftCol}`]: {\n        width: 200,\n    },\n\n    [`& .${classes.iconAligner}`]: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n\n    [`& .${classes.iconTextWrapper}`]: {\n        display: 'inline-block',\n        paddingLeft: 20,\n    },\n\n    [`& .${classes.iconEven}`]: {\n        color: theme.custom.infoBar.iconOddColor,\n        width: theme.spacing(3),\n    },\n\n    [`& .${classes.iconOdd}`]: {\n        color: theme.custom.infoBar.iconOddColor,\n        width: theme.spacing(3),\n    },\n\n    [`& .${classes.heading}`]: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        paddingLeft: theme.spacing(1),\n    },\n\n    [`& .${classes.emptyBox}`]: {\n        background: '#ffffff55',\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px #fff',\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n\n    [`& .${classes.summaryRoot}`]: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n\n    [`& .${classes.actionPanel}`]: {\n        justifyContent: 'flex-start',\n    },\n\n    [`& .${classes.disabledTier}`]: {\n        color: '#999999',\n        fontWeight: '400',\n    },\n\n    [`& .${classes.Paper}`]: {\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n\n    [`& .${classes.Paper2}`]: {\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(2),\n        height: '80%',\n    },\n\n    [`& .${classes.list}`]: {\n        width: '100%',\n        maxWidth: 800,\n        backgroundColor: theme.palette.background.paper,\n        position: 'relative',\n        overflow: 'auto',\n        maxHeight: 175,\n    },\n\n    [`& .${classes.urlPaper}`]: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n        border: `solid 1px ${theme.palette.grey[300]}`,\n        '& .MuiInputBase-root:before,  .MuiInputBase-root:hover': {\n            borderBottom: 'none !important',\n            color: theme.palette.primary.main,\n        },\n        '& .MuiSelect-select': {\n            color: theme.palette.primary.main,\n            paddingLeft: theme.spacing(),\n        },\n        '& .MuiInputBase-input': {\n            color: theme.palette.primary.main,\n        },\n        '& .material-icons': {\n            fontSize: 16,\n            color: `${theme.palette.grey[700]} !important`,\n        },\n        borderRadius: 10,\n        marginRight: theme.spacing(),\n    },\n\n    [`& .${classes.input}`]: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n\n    [`& .${classes.avatar}`]: {\n        width: 30,\n        height: 30,\n        background: 'transparent',\n        border: `solid 1px ${theme.palette.grey[300]}`,\n    },\n\n    [`& .${classes.iconStyle}`]: {\n        cursor: 'pointer',\n        margin: '-10px 0',\n        padding: '0 0 0 5px',\n        '& .material-icons': {\n            fontSize: 18,\n            color: '#9c9c9c',\n        },\n    },\n\n    [`& .${classes.infoButton}`]: {\n        marginLeft: theme.spacing(1),\n        color: theme.palette.grey[600],\n    },\n}));\n\n/**\n * Render application overview page.\n * @param {JSON} props Props passed down from parent.\n * @returns {JSX} jsx output from render.\n */\nfunction Overview(props) {\n    const [application, setApplication] = useState(null);\n    const [tierDescription, setTierDescription] = useState(null);\n    const [notFound, setNotFound] = useState(false);\n    const { match: { params: { applicationId } } } = props;\n    const [environment, setEnvironment] = useState(null);\n    const [tierDisabled, setTierDisabled] = useState(false);\n    const [selectedProtocol, setSelectedProtocol] = useState(null);\n    const [selectedEndpoint, setSelectedEndpoint] = useState(null);\n    const [topics, setTopics] = useState(null);\n    const [isResetOpen, setIsResetOpen] = useState(false);\n    const intl = useIntl();\n\n    useEffect(() => {\n        const client = new API();\n        // Get application\n        const promisedApplication = client.getApplication(applicationId);\n        promisedApplication\n            .then((response) => {\n                const appInner = response.obj;\n                setApplication(appInner);\n                const promisedTier = client.getTierByName(response.obj.throttlingPolicy, 'application');\n                promisedTier.then((tierResponse) => {\n                    setTierDescription(tierResponse.obj.description);\n                    if (appInner.solaceDeployedEnvironments) {\n                        setEnvironment(appInner.solaceDeployedEnvironments[0]);\n                        setSelectedProtocol(appInner.solaceDeployedEnvironments[0].solaceURLs[0].protocol);\n                        setSelectedEndpoint(appInner.solaceDeployedEnvironments[0].solaceURLs[0].endpointURL);\n                        if (appInner.solaceDeployedEnvironments[0].solaceURLs[0].protocol === 'mqtt') {\n                            setTopics(appInner.solaceDeployedEnvironments[0].SolaceTopicsObject.mqttSyntax);\n                        } else {\n                            setTopics(appInner.solaceDeployedEnvironments[0].SolaceTopicsObject.defaultSyntax);\n                        }\n                    }\n                }).catch((error) => {\n                    setTierDisabled(true);\n                    setTierDescription('Tier is disabled.');\n                    console.log(error);\n                });\n            }).catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else {\n                    setNotFound(false);\n                }\n            });\n    }, []);\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    if (!application) {\n        return <Loading />;\n    }\n    if (environment) {\n        console.log(environment);\n        console.log(topics);\n    }\n    const handleChange = (event) => {\n        setEnvironment(event.target.value);\n        console.log(event.target.value);\n    };\n    const handleChangeProtocol = (event) => {\n        setSelectedProtocol(event.target.value);\n        // console.log(event.target.value);\n        let protocol;\n        environment.solaceURLs.map((e) => {\n            if (e.protocol === event.target.value) {\n                setSelectedEndpoint(e.endpointURL);\n                protocol = e.protocol;\n            }\n            return null;\n        });\n        if (protocol === 'mqtt') {\n            setTopics(environment.SolaceTopicsObject.mqttSyntax);\n        } else {\n            setTopics(environment.SolaceTopicsObject.defaultSyntax);\n        }\n    };\n    const handleReset = (userId) => {\n        const client = new API();\n        const promisedReset = client.resetApplicationPolicy(userId, application.applicationId);\n        promisedReset.then((Response) => {\n            if (Response.status === 200) {\n                Alert.success(intl.formatMessage({\n                    defaultMessage: 'Application Policy Reset request for {name} has been triggered successfully',\n                    id: 'Applications.Details.Overview.reset.successful',\n                }, { name: userId }));\n            }\n        }).catch((error) => {\n            if (process.env.NODE_ENV !== 'production') {\n                console.error(error);\n            }\n            const { response } = error;\n            if (response?.body) {\n                if (error.status === 400) {\n                    Alert.error(response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        defaultMessage: 'Error while resetting application policy for {name}',\n                        id: 'Applications.Details.Overview.reset.error',\n                    }, { name: userId }));\n                }\n            }\n        });\n    };\n    const toggleResetConfirmation = () => {\n        setIsResetOpen(false);\n    };\n    const handleResetConfirmation = () => {\n        setIsResetOpen(true);\n    };\n    return (\n        <Root>\n            <div className={classes.root}>\n                <Table className={classes.table}>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconEven}>description</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.description'\n                                                defaultMessage='Description'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.description}\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconOdd}>settings_input_component</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.InfoBar.business.plan'\n                                                defaultMessage='Business Plan'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            {application\n                                && (\n                                    <TableCell className={classes.iconAligner}>\n                                        {application.throttlingPolicy}\n                                        {tierDescription && tierDescription.trim() && (\n                                            <span className={tierDisabled ? classes.disabledTier : ''}>\n                                                &nbsp;\n                                                {`(${tierDescription.trim()})`}\n                                            </span>\n                                        )}\n\n                                        <VerticalDivider height={40} />\n                                        <Grid item xs={1} m={1}>\n                                            <Button\n                                                id='reset-application-policy'\n                                                style={{ padding: '1px' }}\n                                                onClick={handleResetConfirmation}\n                                                color='grey'\n                                                aria-label={(\n                                                    <FormattedMessage\n                                                        id='Applications.Details.Overview.application.reset'\n                                                        defaultMessage='Reset'\n                                                    />\n                                                )}\n                                            >\n                                                <Icon>replay</Icon>\n                                                <Typography variant='caption'>\n                                                    <FormattedMessage\n                                                        id='Applications.Details.Overview.application.reset.text'\n                                                        defaultMessage='RESET'\n                                                    />\n                                                </Typography>\n                                            </Button>\n                                            <Tooltip\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Applications.Details.Overview.application.reset.tooltip'\n                                                        defaultMessage='Reset the Application Throttle Policy for a Specific User'\n                                                    />\n                                                )}\n                                                placement='right'\n                                                classeName={classes.infoToolTip}\n                                            >\n                                                <IconButton className={classes.infoButton} aria-label='arch'>\n                                                    <InfoIcon />\n                                                </IconButton>\n                                            </Tooltip>\n                                            <ResetThrottlePolicyDialog\n                                                handleResetThrottlePolicy={handleReset}\n                                                isResetOpen={isResetOpen}\n                                                toggleResetConfirmation={toggleResetConfirmation}\n                                            />\n                                        </Grid>\n                                    </TableCell>\n                                )}\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconOdd}>assignment_turned_in</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.workflow.status'\n                                                defaultMessage='Workflow Status'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.status}\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <div className={classes.iconAligner}>\n                                    <Icon className={classes.iconEven}>account_box</Icon>\n                                    <span className={classes.iconTextWrapper}>\n                                        <Typography variant='caption' gutterBottom align='left'>\n                                            <FormattedMessage\n                                                id='Applications.Details.Overview.application.owner'\n                                                defaultMessage='Application Owner'\n                                            />\n                                        </Typography>\n                                    </span>\n                                </div>\n                            </TableCell>\n                            <TableCell>\n                                {application.owner}\n                            </TableCell>\n                        </TableRow>\n                        {application.attributes\n                            && (\n                                Object.keys(application.attributes).map((attr, index) => {\n                                    const attrValue = application.attributes[attr];\n                                    return (\n                                        <TableRow key={attr}>\n                                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                                <div className={classes.iconAligner}>\n                                                    <Icon className={classNames(\n                                                        { [classes.iconEven]: index % 2 !== 0 },\n                                                        { [classes.iconOdd]: index % 2 === 0 },\n                                                    )}\n                                                    >\n                                                        web_asset\n                                                    </Icon>\n                                                    <span className={classes.iconTextWrapper}>\n                                                        <Typography variant='caption' gutterBottom align='left'>\n                                                            {attr}\n                                                        </Typography>\n                                                    </span>\n                                                </div>\n                                            </TableCell>\n                                            <TableCell>\n                                                {attrValue}\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                }))}\n\n                    </TableBody>\n                </Table>\n                {}\n                {application.containsSolaceApis === true && environment && topics && (\n                    <div className={classes.root}>\n                        <Typography id='itest-api-details-bushiness-plans-head' variant='h5'>\n                            <FormattedMessage\n                                id='solace.application.available.topics.heading'\n                                defaultMessage='Available Topics'\n                            />\n                        </Typography>\n                        <Typography variant='caption' gutterBottom>\n                            <FormattedMessage\n                                id='solace.application.available.topics.subheading'\n                                defaultMessage='Topics permitted to access from solace applications'\n                            />\n                        </Typography>\n                        <Paper className={classes.Paper}>\n                            <Grid container spacing={2}>\n                                <Grid item xs={12}>\n                                    <Grid container spacing={2}>\n                                        <Grid item>\n                                            <TextField\n                                                select\n                                                onChange={handleChange}\n                                                value={environment.environmentDisplayName}\n                                                style={{ maxWidth: '100%' }}\n                                                variant='outlined'\n                                                label='Environment Name'\n                                            >\n                                                {application.solaceDeployedEnvironments.map((e) => (\n                                                    <MenuItem key={e} value={e.environmentDisplayName}>\n                                                        {e.environmentDisplayName}\n                                                    </MenuItem>\n                                                ))}\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item>\n                                            <TextField\n                                                select\n                                                onChange={handleChangeProtocol}\n                                                value={selectedProtocol}\n                                                style={{ maxWidth: '100%' }}\n                                                variant='outlined'\n                                                label='Protocol'\n                                            >\n                                                {environment.solaceURLs.map((e) => (\n                                                    <MenuItem key={e.protocol} value={e.protocol}>\n                                                        {upperCaseString(e.protocol)}\n                                                    </MenuItem>\n                                                ))}\n                                            </TextField>\n                                        </Grid>\n                                        <Grid item>\n                                            {/* <Paper id='gateway-envirounment' component='form' className={classes.urlPaper}>\n                                                <InputBase\n                                                    inputProps={{ 'aria-label': 'api url' }}\n                                                    value={selectedEndpoint}\n                                                    className={classes.input}\n                                                />\n                                            </Paper> */}\n                                            <TextField\n                                                style={{ minWidth: '200%' }}\n                                                label='Endpoint URL'\n                                                value={selectedEndpoint}\n                                                variant='outlined'\n                                            />\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Paper className={classes.Paper2}>\n                                        <Typography id='itest-api-details-bushiness-plans-head' variant='h6'>\n                                            <FormattedMessage\n                                                id='solace.application.topics.publish'\n                                                defaultMessage='Publish Topics'\n                                            />\n                                        </Typography>\n                                        <List className={classes.list}>\n                                            {topics.publishTopics.map((t) => (\n                                                <ListItem>\n                                                    <Typography gutterBottom align='left'>\n                                                        {t}\n                                                    </Typography>\n                                                </ListItem>\n                                            ))}\n                                        </List>\n                                    </Paper>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Paper className={classes.Paper2}>\n                                        <Typography id='itest-api-details-bushiness-plans-head' variant='h6'>\n                                            <FormattedMessage\n                                                id='solace.application.topics.subscribe'\n                                                defaultMessage='Subscribe Topics'\n                                            />\n                                        </Typography>\n                                        <List className={classes.list}>\n                                            {topics.subscribeTopics.map((t) => (\n                                                <ListItem>\n                                                    <Typography gutterBottom align='left'>\n                                                        {t}\n                                                    </Typography>\n                                                </ListItem>\n                                            ))}\n                                        </List>\n                                    </Paper>\n                                </Grid>\n                            </Grid>\n                        </Paper>\n                    </div>\n                )}\n            </div>\n        </Root>\n    );\n}\nexport default injectIntl(Overview);\n","/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport Box from '@mui/material/Box';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport {\n    Route, Switch, Redirect, Link,\n} from 'react-router-dom';\nimport VpnKeyIcon from '@mui/icons-material/VpnKey';\nimport ScreenLockLandscapeIcon from '@mui/icons-material/ScreenLockLandscape';\nimport Typography from '@mui/material/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport API from 'AppData/api';\nimport { app } from 'Settings';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport LeftMenuItem from 'AppComponents/Shared/LeftMenuItem';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport ApiKeyManager from 'AppComponents/Shared/AppsAndKeys/ApiKeyManager';\nimport classNames from 'classnames';\nimport Paper from '@mui/material/Paper';\nimport Subscriptions from './Subscriptions';\nimport InfoBar from './InfoBar';\nimport Overview from './Overview';\n\nconst PREFIX = 'index';\n\nconst classes = {\n    LeftMenu: `${PREFIX}-LeftMenu`,\n    leftMenuHorizontal: `${PREFIX}-leftMenuHorizontal`,\n    leftMenuVerticalLeft: `${PREFIX}-leftMenuVerticalLeft`,\n    leftMenuVerticalRight: `${PREFIX}-leftMenuVerticalRight`,\n    leftLInkMain: `${PREFIX}-leftLInkMain`,\n    leftLInkMainText: `${PREFIX}-leftLInkMainText`,\n    detailsContent: `${PREFIX}-detailsContent`,\n    content: `${PREFIX}-content`,\n    contentLoader: `${PREFIX}-contentLoader`,\n    contentLoaderRightMenu: `${PREFIX}-contentLoaderRightMenu`,\n    titleWrapper: `${PREFIX}-titleWrapper`,\n    contentWrapper: `${PREFIX}-contentWrapper`,\n    keyTitle: `${PREFIX}-keyTitle`,\n};\n\n// TODO jss-to-styled codemod: The Fragment root was replaced by div. Change the tag if needed.\nconst Root = styled('div')((\n    {\n        theme,\n    },\n) => ({\n    width: '100%',\n    [`& .${classes.LeftMenu}`]: {\n        backgroundColor: theme.custom.leftMenu.background,\n        backgroundImage: `url(${app.context}${theme.custom.leftMenu.backgroundImage})`,\n        textAlign: 'left',\n        fontFamily: theme.typography.fontFamily,\n        position: 'absolute',\n        bottom: 0,\n        paddingLeft: (theme.custom.leftMenu.position === 'horizontal' ? theme.spacing(3) : 0),\n    },\n\n    [`& .${classes.leftMenuHorizontal}`]: {\n        top: theme.custom.infoBar.height,\n        width: '100%',\n        overflowX: 'auto',\n        height: 60,\n        display: 'flex',\n        left: 0,\n    },\n\n    [`& .${classes.leftMenuVerticalLeft}`]: {\n        width: theme.custom.leftMenu.width,\n        top: 0,\n        left: 0,\n        overflowY: 'auto',\n        [theme.breakpoints.down('md')]: {\n            width: 50,\n        },\n    },\n\n    [`& .${classes.leftMenuVerticalRight}`]: {\n        width: theme.custom.leftMenu.width,\n        top: 0,\n        right: 0,\n        overflowY: 'auto',\n        [theme.breakpoints.down('md')]: {\n            width: 50,\n        },\n    },\n\n    [`& .${classes.leftLInkMain}`]: {\n        borderRight: 'solid 1px ' + theme.custom.leftMenu.background,\n        cursor: 'pointer',\n        background: theme.custom.leftMenu.rootBackground,\n        color: theme.palette.getContrastText(theme.custom.leftMenu.rootBackground),\n        textDecoration: 'none',\n        alignItems: 'center',\n        justifyContent: 'center',\n        display: 'flex',\n        height: theme.custom.infoBar.height,\n    },\n\n    [`& .${classes.leftLInkMainText}`]: {\n        fontSize: 18,\n        color: theme.palette.grey[500],\n        textDecoration: 'none',\n        paddingLeft: theme.spacing(2),\n    },\n\n    [`& .${classes.detailsContent}`]: {\n        display: 'flex',\n        flex: 1,\n    },\n\n    [`& .${classes.content}`]: {\n        display: 'flex',\n        flex: 1,\n        flexDirection: 'column',\n        marginLeft: (theme.custom.leftMenu.position === 'vertical-left' ? (theme.custom.leftMenu.width - 4) : 0),\n        marginRight: (theme.custom.leftMenu.position === 'vertical-right' ? theme.custom.leftMenu.width : 0),\n        paddingBottom: theme.spacing(3),\n        overflowX: 'hidden',\n        [theme.breakpoints.down('md')]: {\n            marginLeft: (theme.custom.leftMenu.position === 'vertical-left' ? (theme.custom.leftMenu.width - 4) : 0) !== 0 && 50,\n            marginRight: (theme.custom.leftMenu.position === 'vertical-right' ? theme.custom.leftMenu.width : 0) !== 0 && 50,\n        },\n    },\n\n    [`& .${classes.contentLoader}`]: {\n        paddingTop: theme.spacing(3),\n    },\n\n    [`& .${classes.contentLoaderRightMenu}`]: {\n        paddingRight: theme.custom.leftMenu.width,\n    },\n\n    [`& .${classes.titleWrapper}`]: {\n        paddingLeft: 25,\n        paddingTop: 28,\n        textTransform: 'capitalize',\n    },\n\n    [`& .${classes.contentWrapper}`]: {\n        paddingLeft: 25,\n    },\n\n    [`& .${classes.keyTitle}`]: {\n        textTransform: 'capitalize',\n    },\n}));\n\n/**\n *\n *\n * @class Details\n * @extends {Component}\n */\nclass Details extends Component {\n    /**\n     *\n     * @param {Object} props props passed from above\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            application: null,\n        };\n        this.getApplication = this.getApplication.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof Details\n     */\n    componentDidMount() {\n        this.getApplication();\n    }\n\n    getApplication = () => {\n        const client = new API();\n        const applicationId = this.props.match.params.application_uuid;\n        const promisedApplication = client.getApplication(applicationId);\n        promisedApplication\n            .then((response) => {\n                this.setState({ application: response.obj });\n                return Promise.all([response]);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     *\n     * @param {String} menuLink selected menu name\n     * @memberof Details\n     */\n    handleMenuSelect = (menuLink) => {\n        const { history, match } = this.props;\n        history.push({ pathname: '/applications/' + match.params.application_uuid + '/' + menuLink });\n    };\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n    renderManager = (application, keyType, secScheme) => {\n        return (\n            <Paper>\n                {secScheme === 'oauth' && (\n                    <TokenManager\n                        keyType={keyType}\n                        selectedApp={{\n                            appId: application.applicationId,\n                            label: application.name,\n                            tokenType: application.tokenType,\n                            owner: application.owner,\n                            hashEnabled: application.hashEnabled,\n                        }}\n                    />\n\n                )}\n                {secScheme === 'apikey' && (\n                    <div className={classes.root}>\n                        <div className={classes.titleWrapper}>\n                            <Typography variant='h5' className={classes.keyTitle}>\n                                {this.toTitleCase(keyType)}\n                                <FormattedMessage\n                                    id='Applications.Details.api.keys.title'\n                                    defaultMessage=' API Key'\n                                />\n                            </Typography>\n                        </div>\n                        <div className={classes.contentWrapper}>\n                            <ApiKeyManager\n                                keyType={keyType}\n                                selectedApp={{\n                                    appId: application.applicationId,\n                                    label: application.name,\n                                    tokenType: application.tokenType,\n                                    owner: application.owner,\n                                }}\n                            />\n                        </div>\n                    </div>\n                )}\n            </Paper>\n        );\n    }\n\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof Details\n     */\n    render() {\n        const {\n            match, intl,\n        } = this.props;\n        const { notFound, application } = this.state;\n        const pathPrefix = '/applications/' + match.params.application_uuid;\n        const redirectUrl = pathPrefix + '/overview';\n        const rootIconSize = 42;\n        const rootIconTextVisible = false;\n        const rootIconVisible = false;\n        const position = 'vertical-left';\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        } else if (!application) {\n            return <Loading />;\n        }\n        return (\n            <Root>\n                <nav\n                    role='navigation'\n                    aria-label={intl.formatMessage({\n                        id: 'Applications.Details.index.secondary.navigation',\n                        defaultMessage: 'Secondary Navigation',\n                    })}\n                    className={classNames(\n                        classes.LeftMenu,\n                        {\n                            [classes.leftMenuHorizontal]: position === 'horizontal',\n                        },\n                        {\n                            [classes.leftMenuVerticalLeft]: position === 'vertical-left',\n                        },\n                        {\n                            [classes.leftMenuVerticalRight]: position === 'vertical-right',\n                        },\n                        'left-menu',\n                    )}\n                >\n                    {rootIconVisible && (\n                        <Link to='/applications' className={classes.leftLInkMain} aria-label='All applications'>\n                            <CustomIcon width={rootIconSize} height={rootIconSize} icon='applications' />\n                            {rootIconTextVisible && (\n                                <Typography className={classes.leftLInkMainText}>\n                                    <FormattedMessage\n                                        id='Applications.Details.applications.all'\n                                        defaultMessage='ALL APPs'\n                                    />\n                                </Typography>\n                            )}\n                        </Link>\n                    )}\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.overview'\n                                defaultMessage='Overview'\n                            />\n                        )}\n                        iconText='overview'\n                        route='overview'\n                        to={pathPrefix + '/overview'}\n                        open\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.prod.keys'\n                                defaultMessage='Production Keys'\n                            />\n                        )}\n                        iconText='productionkeys'\n                        route='productionkeys'\n                        to={pathPrefix + '/productionkeys/oauth'}\n                        open\n                        id='production-keys'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.oauth.tokens'\n                                defaultMessage='OAuth2 Tokens'\n                            />\n                        )}\n                        route='productionkeys/oauth'\n                        to={pathPrefix + '/productionkeys/oauth'}\n                        submenu\n                        Icon={<ScreenLockLandscapeIcon />}\n                        open\n                        id='production-keys-oauth'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.api.key'\n                                defaultMessage='API Key'\n                            />\n                        )}\n                        route='productionkeys/apikey'\n                        to={pathPrefix + '/productionkeys/apikey'}\n                        submenu\n                        Icon={<VpnKeyIcon />}\n                        open\n                        id='production-keys-apikey'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.sandbox.keys'\n                                defaultMessage='Sandbox Keys'\n                            />\n                        )}\n                        iconText='productionkeys'\n                        route='sandboxkeys'\n                        to={pathPrefix + '/sandboxkeys/oauth'}\n                        open\n                        id='sandbox-keys'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.oauth.tokens'\n                                defaultMessage='OAuth2 Tokens'\n                            />\n                        )}\n                        route='sandboxkeys/oauth'\n                        to={pathPrefix + '/sandboxkeys/oauth'}\n                        submenu\n                        Icon={<ScreenLockLandscapeIcon />}\n                        open\n                        id='sandbox-keys-oauth'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.api.key'\n                                defaultMessage='API Key'\n                            />\n                        )}\n                        route='sandboxkeys/apikey'\n                        to={pathPrefix + '/sandboxkeys/apikey'}\n                        submenu\n                        Icon={<VpnKeyIcon />}\n                        open\n                        id='sandbox-keys-apikey'\n                    />\n                    <LeftMenuItem\n                        text={(\n                            <FormattedMessage\n                                id='Applications.Details.menu.subscriptions'\n                                defaultMessage='Subscriptions'\n                            />\n                        )}\n                        iconText='subscriptions'\n                        route='subscriptions'\n                        to={pathPrefix + '/subscriptions'}\n                        open\n                        id='left-menu-subscriptions'\n                    />\n                </nav>\n                <Box sx={(theme) => ({\n                    display: 'flex',\n                    flex: 1,\n                    flexDirection: 'column',\n                    marginLeft: (theme.custom.leftMenu.position === 'vertical-left' ? (theme.custom.leftMenu.width - 158) : 0),\n                    paddingBottom: theme.spacing(3),\n                    overflowX: 'hidden',\n                    [theme.breakpoints.down('md')]: {\n                        marginLeft: (theme.custom.leftMenu.position === 'vertical-left'\n                            ? (theme.custom.leftMenu.width - 4) : 0) !== 0 && 50,\n                    },\n                })}\n                >\n                    <InfoBar\n                        application={application}\n                        applicationId={match.params.application_uuid}\n                        innerRef={(node) => { this.infoBar = node; }}\n                    />\n                    <div\n                        className={classNames(\n                            { [classes.contentLoader]: position === 'horizontal' },\n                            { [classes.contentLoaderRightMenu]: position === 'vertical-right' },\n                        )}\n                    >\n                        <Switch>\n                            <Redirect exact from='/applications/:applicationId' to={redirectUrl} />\n                            <Route\n                                path='/applications/:applicationId/overview'\n                                component={Overview}\n                            />\n                            <Route\n                                path='/applications/:applicationId/productionkeys/oauth'\n                                component={() => (this.renderManager(application, 'PRODUCTION', 'oauth'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/productionkeys/apikey'\n                                component={() => (this.renderManager(application, 'PRODUCTION', 'apikey'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/sandboxkeys/oauth'\n                                component={() => (this.renderManager(application, 'SANDBOX', 'oauth'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/sandboxkeys/apikey'\n                                component={() => (this.renderManager(application, 'SANDBOX', 'apikey'))}\n                            />\n                            <Route\n                                path='/applications/:applicationId/subscriptions'\n                                render={() => (\n                                    <Subscriptions application={application} getApplication={this.getApplication} />\n                                )}\n                            />\n                            <Route component={ResourceNotFound} />\n                        </Switch>\n                    </div>\n                </Box>\n            </Root>\n        );\n    }\n}\n\nDetails.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            application_uuid: PropTypes.string.isRequired,\n        }).isRequired,\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default (injectIntl(Details));\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport {\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\n} from '@mui/material/';\nimport Slide from '@mui/material/Slide';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nconst DeleteConfirmation = (props) => {\n    const { handleAppDelete, isDeleteOpen, toggleDeleteConfirmation } = props;\n    return (\n        <Dialog open={isDeleteOpen} transition={Slide} role='alertdialog'>\n            <DialogTitle>\n                <FormattedMessage\n                    id='Applications.Listing.DeleteConfirmation.dialog.title'\n                    defaultMessage='Delete Application'\n                />\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog.text.description'\n                        defaultMessage='The application will be removed'\n                    />\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button dense color='grey' onClick={toggleDeleteConfirmation}>\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </Button>\n                <Button\n                    id='itest-confirm-application-delete'\n                    size='small'\n                    variant='outlined'\n                    color='primary'\n                    onClick={handleAppDelete}\n                >\n                    <FormattedMessage\n                        id='Applications.Listing.DeleteConfirmation.dialog,delete'\n                        defaultMessage='Delete'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\nDeleteConfirmation.propTypes = {\n    handleAppDelete: PropTypes.func.isRequired,\n    isDeleteOpen: PropTypes.bool.isRequired,\n    toggleDeleteConfirmation: PropTypes.func.isRequired,\n};\nexport default DeleteConfirmation;\n","/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\n/**\n * Capitalize the first letter of a string\n * @param {string} string string to be formatted\n * @return {string} formatted string\n */\nfunction capitalizeFirstLetter(string) {\n    return string && string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Lowercase all letters in a string\n * @param {string} string string to be formatted\n * @return {string} formatted string\n */\nfunction lowerCaseString(string) {\n    return string.toLowerCase();\n}\n\n/**\n * Uppercase all letters in a string\n * @param {string} string string to be formatted\n * @return {string} formatted string\n */\nfunction upperCaseString(string) {\n    return string.toUpperCase();\n}\n\nexport { capitalizeFirstLetter, lowerCaseString, upperCaseString };\n"],"names":["classes","FormControl","Root","styled","_ref","theme","width","padding","tokens","props","infiniteValidity","setInfiniteValidity","useState","invalidTimeout","setInvaildTimeout","handleChange","field","event","accessTokenRequest","updateAccessTokenRequest","newRequest","_objectSpread","target","currentTarget","checked","timeout","undefined","Validation","number","validate","value","error","intl","React","variant","margin","className","FormControlLabel","control","Checkbox","onChange","e","color","label","formatMessage","defaultMessage","id","TextField","required","InputLabelProps","shrink","helperText","fullWidth","name","placeholder","autoFocus","inputText","contextTypes","PropTypes","isRequired","injectIntl","PREFIX","outterBox","Fab","spacing","marginLeft","borderColor","marginRight","apiKeyRestrictions","invalidIP","setInvalidIP","invalidReferer","setInvalidReferer","newIP","updateNewIp","ipList","updateIpList","restrictSchema","updateRestrictSchema","newReferer","updateNewReferer","refererList","updateRefererList","Box","border","borderRadius","Typography","FormattedMessage","component","RadioGroup","row","Radio","labelPlacement","Grid","container","direction","justifyContent","alignItems","item","md","xs","trim","size","onClick","addIpItem","ipAddress","push","AddIcon","length","List","map","ip","index","ListItem","ListItemText","primary","ListItemSecondaryAction","Tooltip","title","placement","IconButton","edge","deleteIpItem","ipItem","splice","indexOf","DeleteIcon","addRefererItem","referer","deleteRefererItem","refererItem","root","dialog","button","tokenSection","keyConfigWrapper","generateWrapper","paper","dialogTitle","dialogContent","formGroup","gridWrapper","keyTitle","cardBody","generateKey","StyledGrid","palette","getContrastText","background","main","marginTop","marginBottom","flexDirection","display","textTransform","lineHeight","ApiKeyManager","constructor","super","_defineProperty","this","setState","open","showToken","selectedApp","keyType","isGenerating","client","API","restrictions","permittedIP","state","join","permittedReferer","generateApiKey","appId","then","response","console","log","apikey","accessToken","body","validityTime","isOauth","catch","status","notFound","render","ApiKeyRestriction","FormGroup","Button","handleClickOpen","formLabel","Dialog","onClose","handleClose","DialogTitle","DialogContent","DialogContentText","ApiKey","ViewToken","token","DialogActions","generateKeys","disabled","CircularProgress","Card","CardContent","values","linebreak","ip1","ip2","ip3","ip4","url1","url2","url3","propTypes","tokenType","buttonGap","select","grey","SubscriptionPolicySelectLegacy","selectedPolicy","componentDidMount","policies","apiId","handleSubscribe","applicationId","Autocomplete","disableClearable","options","style","renderInput","params","_extends","renderOption","policy","MenuItem","key","ScopeValidation","resourcePath","resourcePaths","SUBSCRIPTIONS","resourceMethod","resourceMethods","POST","useTheme","APICardView","xhrRequest","data","list","pagination","total","count","updateUnsubscribedAPIsList","setTenantDomain","code","Alert","finally","loading","page","searchText","rowsPerPage","api","getAllAPIs","query","limit","offset","pageType","getData","componentDidUpdate","prevProps","subscriptions","getIdsOfSubscribedEntities","sub","filter","Boolean","subscribedIds","listLocal","throttlingPolicies","includes","CONSTANTS","DEFAULT_SUBSCRIPTIONLESS_PLAN","i","policyList","advertiseInfo","advertised","isSubscriptionAvailable","apisNotFound","ResourceNotFound","columns","customBodyRender","tableMeta","rowData","SubscriptionPolicySelect","app","search","print","download","viewColumns","customToolbar","responsive","serverSide","onTableChange","action","tableState","changePage","selectableRows","onChangeRowsPerPage","numberOfRows","pageInner","countInner","textLabels","Loading","NoApi","MUIDataTable","filterType","sort","selectableRowsHeader","Invoice","subscriptionId","tiers","showPopup","setShowPopup","showErrorPopup","setShowErrorPopup","invoice","setInvoice","handleAlertClose","handlePopup","Subscription","getMonetizationInvoice","obj","invoiceData","properties","Object","keys","forEach","invoiveItem","insideArray","startIcon","Icon","defaultProps","buttonIcon","grid","userNotificationPaper","titleSub","titleWrapper","listWrapper","subscriptionRow","callbackurl","subscriptionTimestamp","SubscriptionHeader","paddingRight","paddingTop","paddingBottom","default","paddingLeft","fontSize","float","WebHookDetails","useIntl","subscribedTopics","setSubscribedTopics","useEffect","Api","getWebhookubScriptions","sortedSubscriptions","_","keyIndex","subscription","deliveryStatus","CheckCircleIcon","CancelIcon","RemoveCircleIcon","getLogoForDeliveryStatus","callBackUrl","deliveryTime","Divider","sx","dayjs","relativeTime","SubscriptionTableData","openMenu","openMenuEdit","isMonetizedAPI","isDynamicUsagePolicy","selectedTier","isWebhookAPI","callbackLinkAnchor","handleRequestClose","bind","handleRequestOpen","handleRequestDelete","checkIfDynamicUsagePolicy","checkIfMonetizedAPI","populateSubscriptionTiers","handleSubscriptionTierUpdate","handleRequestCloseEditMenu","handleRequestOpenEditMenu","setSelectedTier","checkIfWebhookAPI","handleOpenCallbackURLs","handleCloseCallbackURLs","handleSubscriptionDelete","requestedThrottlingPolicy","currentThrottlingPolicy","handleSubscriptionUpdate","apiUUID","getAPIById","apiTiers","JSON","parse","tierName","apiData","monetization","enabled","subscriptionUUID","getSubscription","subscriptionData","throttlingPolicy","getTierByName","policyResponse","policyData","monetizationAttributes","billingType","apiInfo","type","API_TYPES","WEBSUB","isSubValidationDisabled","link","Link","to","cursor","external","version","MDIcon","path","mdiOpenInNew","openWebhookURL","webhookURLPopoverId","callBackUrlLink","textDecoration","onKeyDown","role","tabIndex","TableRow","hover","TableCell","Popover","anchorEl","anchorOrigin","vertical","horizontal","lifeCycleStatus","interactive","backgroundColor","maxWidth","verticalAlign","HelpOutline","transition","Slide","getOptionLabel","option","_option$label","getOptionSelected","newValue","dense","SINGLE_SUBSCRIPTION","DELETE","searchRoot","searchBar","input","iconButton","divider","subscribePop","firstCell","cardTitle","cardContent","dialogHeader","genericMessageWrapper","searchResults","clearSearchIcon","subsTable","closeButton","custom","listView","tableBodyEvenBackgrund","tableBodyOddBackgrund","tableHeadBackground","StyledDialog","_ref2","flex","height","Subscriptions","subscriptionsNotFound","isAuthorize","openDialog","pseudoSubscriptions","checkSubValidationDisabled","updateSubscriptions","handleOpenDialog","handleSearchTextChange","handleSearchTextTmpChange","handleClearSearch","handleEnterPress","searchTextTmp","application","prevState","subList","subscriptionLimit","getSubscriptions","deleteSubscription","info","endpointIndex","prototype","hasOwnProperty","call","getApplication","updateSubscription","statusInner","subscribe","description","searchInputElem","keyCode","preventDefault","window","location","context","buttonElm","xl","InlineMessage","Table","TableHead","TableBody","MuiDialogTitle","disableTypography","Paper","HighlightOffIcon","InputBase","inputProps","inputRef","el","SearchIcon","APIList","appInner","Progress","InfoBar","settings","orgWideAppUpdateEnabled","isOrgWideAppUpdateEnabled","isDeleteOpen","showOverview","toggleOverview","handleAppDelete","handleDeleteConfimation","toggleDeleteConfirmation","promisedDelete","Application","deleteApp","message","history","todo","applicationOwner","owner","isUserOwner","AuthManager","getUser","infoBar","borderBottom","A200","gutterBottom","align","noWrap","subscriptionCount","VerticalDivider","m","DeleteConfirmation","contextType","Settings","withRouter","ResetThrottlePolicyDialog","handleResetThrottlePolicy","isResetOpen","toggleResetConfirmation","user","setUser","step","setStep","isUserValid","setIsUserValid","InfoIcon","Promise","resolve","reject","Error","maxLength","alt","handleNext","handleBack","handleReset","table","leftCol","iconAligner","iconTextWrapper","iconEven","iconOdd","heading","emptyBox","summaryRoot","actionPanel","disabledTier","Paper2","urlPaper","avatar","iconStyle","infoButton","minWidth","iconOddColor","fontWeight","position","overflow","maxHeight","setApplication","tierDescription","setTierDescription","setNotFound","match","environment","setEnvironment","tierDisabled","setTierDisabled","selectedProtocol","setSelectedProtocol","selectedEndpoint","setSelectedEndpoint","topics","setTopics","setIsResetOpen","tierResponse","solaceDeployedEnvironments","solaceURLs","protocol","endpointURL","SolaceTopicsObject","mqttSyntax","defaultSyntax","scope","handleResetConfirmation","classeName","infoToolTip","userId","resetApplicationPolicy","Response","success","attributes","attr","attrValue","classNames","containsSolaceApis","environmentDisplayName","upperCaseString","publishTopics","t","subscribeTopics","LeftMenu","leftMenuHorizontal","leftMenuVerticalLeft","leftMenuVerticalRight","leftLInkMain","leftLInkMainText","detailsContent","content","contentLoader","contentLoaderRightMenu","contentWrapper","leftMenu","backgroundImage","textAlign","fontFamily","typography","bottom","top","overflowX","left","overflowY","breakpoints","down","right","borderRight","rootBackground","Details","Component","application_uuid","all","menuLink","pathname","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","secScheme","TokenManager","hashEnabled","toTitleCase","pathPrefix","redirectUrl","LeftMenuItem","text","iconText","route","submenu","ScreenLockLandscapeIcon","VpnKeyIcon","innerRef","node","Switch","Redirect","exact","from","Route","Overview","renderManager","capitalizeFirstLetter","string","slice"],"sourceRoot":""}