{"version":3,"file":"ListingTextEditor.3f64f45fd2953b50acd3.bundle.js","mappings":"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","sources":["webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/Documents/TextEditor.jsx"],"sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext } from 'react';\nimport { styled } from '@mui/material/styles';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Slide from '@mui/material/Slide';\nimport Icon from '@mui/material/Icon';\nimport Paper from '@mui/material/Paper';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nimport Api from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport MCPServer from 'AppData/MCPServer';\nimport Alert from 'AppComponents/Shared/Alert';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { getBasePath } from 'AppComponents/Shared/Utils';\n\nconst PREFIX = 'TextEditor';\n\nconst classes = {\n    appBar: `${PREFIX}-appBar`,\n    flex: `${PREFIX}-flex`,\n    popupHeader: `${PREFIX}-popupHeader`,\n    splitWrapper: `${PREFIX}-splitWrapper`,\n    docName: `${PREFIX}-docName`,\n    button: `${PREFIX}-button`\n};\n\nconst StyledDialog = styled(Dialog)({\n    [`& .${classes.appBar}`]: {\n        position: 'relative',\n    },\n    [`& .${classes.flex}`]: {\n        flex: 1,\n    },\n    [`& .${classes.popupHeader}`]: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    [`& .${classes.splitWrapper}`]: {\n        padding: 0,\n        height: 'calc(100vh - 64px)',\n        overflow: 'hidden',\n    },\n    [`& .${classes.docName}`]: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    [`& .${classes.button}`]: {\n        height: 30,\n        marginLeft: 30,\n    },\n});\n\n/**\n * Transition component\n * @param {Object} props - Props passed to the component\n * @returns {JSX.Element} - The Transition component\n */\nfunction Transition(props) {\n    return <Slide direction='up' {...props} />;\n}\n\n/**\n * TextEditor component\n * @param {Object} props - Props passed to the component\n * @returns {JSX.Element} - The TextEditor component\n */\nfunction TextEditor(props) {\n    const {\n        intl, showAtOnce, history, docId, docName,\n    } = props;\n    const { api, isAPIProduct } = useContext(APIContext);\n    const [open, setOpen] = useState(showAtOnce);\n    const [editorState, setEditorState] = useState(EditorState.createEmpty());\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    const getAllowedScopes = () => {\n        if (api.apiType && api.apiType.toUpperCase() === 'MCP') {\n            return ['apim:mcp_server_create', 'apim:mcp_server_manage', 'apim:document_manage'];\n        } else {\n            return ['apim:api_create', 'apim:api_publish'];\n        }\n    };\n    const isAccessRestricted = () => isRestricted(getAllowedScopes(), api);\n\n    const onEditorStateChange = (newEditorState) => {\n        setEditorState(newEditorState);\n    };\n\n    const updateDoc = () => {\n        let restAPI;\n        if (isAPIProduct) {\n            restAPI = new APIProduct();\n        } else if (api.apiType === MCPServer.CONSTS.MCP) {\n            restAPI = MCPServer;\n        } else {\n            restAPI = new Api();\n        }\n\n        const docPromise = restAPI.getInlineContentOfDocument(api.id, docId);\n        docPromise\n            .then((doc) => {\n                const contentBlock = htmlToDraft(doc.text);\n                if (contentBlock) {\n                    const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n                    const tempEditorState = EditorState.createWithContent(contentState);\n                    setEditorState(tempEditorState);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                }\n            });\n    };\n\n    const toggleOpen = () => {\n        if (!open) updateDoc();\n\n        if (open && showAtOnce) {\n            const listingPath = getBasePath(api.apiType) + api.id + '/documents';\n            history.push(listingPath);\n        }\n        setOpen(!open);\n    };\n\n    const addContentToDoc = () => {\n        let restAPI;\n        if (isAPIProduct) {\n            restAPI = new APIProduct();\n        } else if (api.apiType === MCPServer.CONSTS.MCP) {\n            restAPI = MCPServer;\n        } else {\n            restAPI = new Api();\n        }\n        setIsUpdating(true);\n        const contentToSave = draftToHtml(convertToRaw(editorState.getCurrentContent()));\n        const docPromise = restAPI.addInlineContentToDocument(api.id, docId, 'INLINE', contentToSave);\n        docPromise\n            .then((response) => {\n                Alert.info(`${response.obj.name} ${intl.formatMessage({\n                    id: 'Apis.Details.Documents.TextEditor.update.success.message',\n                    defaultMessage: 'updated successfully.',\n                })}`);\n                toggleOpen();\n                setIsUpdating(false);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                Alert.error(`${error} ${intl.formatMessage({\n                    id: 'Apis.Details.Documents.TextEditor.update.error.message',\n                    defaultMessage: 'update failed.',\n                })}`);\n                setIsUpdating(false);\n            });\n    };\n\n    const embedCallback = (url) => {\n        try {\n            const parsedUrl = new URL(url);\n            if (['http:', 'https:'].includes(parsedUrl.protocol)) {\n                return url;\n            }\n        } catch (_) {\n            // ignored, will show the error below\n        }\n\n        Alert.error(\n            intl.formatMessage({\n                id: 'Apis.Details.Documents.TextEditor.edit.content.invalid.url',\n                defaultMessage:\n                    'Invalid URL. The URL must start with http:// or https://',\n            }),\n        );\n        return null;\n    };\n\n    return (\n        <div>\n            <Button\n                onClick={toggleOpen}\n                disabled={isAccessRestricted() || api.isRevision}\n                aria-label={`Edit Content of ${docName}`}\n            >\n                <Icon>description</Icon>\n                <FormattedMessage id='Apis.Details.Documents.TextEditor.edit.content' defaultMessage='Edit Content' />\n            </Button>\n            <StyledDialog fullScreen open={open} onClose={toggleOpen} TransitionComponent={Transition}>\n                <Paper square className={classes.popupHeader}>\n                    <IconButton color='inherit' onClick={toggleOpen} aria-label='Close' size='large'>\n                        <Icon>close</Icon>\n                    </IconButton>\n                    <Typography variant='h4' className={classes.docName}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.TextEditor.edit.content.of'\n                            defaultMessage='Edit Content of'\n                        />{' '}\n                        &quot;{docName}&quot;\n                    </Typography>\n                    <Button\n                        className={classes.button}\n                        variant='contained'\n                        disabled={isUpdating}\n                        color='primary'\n                        onClick={addContentToDoc}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Documents.TextEditor.update.content.button'\n                            defaultMessage='Update Content'\n                        />\n                        {isUpdating && <CircularProgress size={24} />}\n                    </Button>\n                    <Button className={classes.button} onClick={toggleOpen}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.TextEditor.cancel.button'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                </Paper>\n                <div className={classes.splitWrapper}>\n                    <Editor\n                        editorState={editorState}\n                        wrapperClassName='draftjs-wrapper'\n                        editorClassName='draftjs-editor'\n                        editorStyle={{ height: 'calc(100vh - 128px)', overflowY: 'auto' }}\n                        onEditorStateChange={onEditorStateChange}\n                        toolbar={{\n                            embedded: {\n                                embedCallback: embedCallback,\n                            },\n                        }}\n                    />\n                </div>\n            </StyledDialog>\n        </div>\n    );\n}\n\nTextEditor.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    docId: PropTypes.string.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    showAtOnce: PropTypes.bool.isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct, MCPServer.CONSTS.MCP]),\n    }).isRequired,\n    docName: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(withRouter((TextEditor)));\n"],"names":["PREFIX","classes","appBar","concat","flex","popupHeader","splitWrapper","docName","button","StyledDialog","styled","Dialog","_defineProperty","position","display","flexDirection","alignItems","padding","height","overflow","marginLeft","Transition","props","React","Slide","_extends","direction","TextEditor","_this","intl","showAtOnce","history","docId","_useContext","useContext","APIContext","api","isAPIProduct","_useState2","_slicedToArray","useState","open","setOpen","_useState4","EditorState","createEmpty","editorState","setEditorState","_useState6","isUpdating","setIsUpdating","toggleOpen","APIProduct","apiType","MCPServer","CONSTS","MCP","Api","getInlineContentOfDocument","id","then","doc","contentBlock","htmlToDraft","text","contentState","ContentState","createFromBlockArray","contentBlocks","tempEditorState","createWithContent","catch","error","status","setState","apiNotFound","listingPath","getBasePath","push","Button","onClick","disabled","isRestricted","toUpperCase","isRevision","Icon","FormattedMessage","defaultMessage","fullScreen","onClose","TransitionComponent","Paper","square","className","IconButton","color","size","Typography","variant","restAPI","contentToSave","draftToHtml","convertToRaw","getCurrentContent","addInlineContentToDocument","response","Alert","info","obj","name","formatMessage","CircularProgress","Editor","wrapperClassName","editorClassName","editorStyle","overflowY","onEditorStateChange","newEditorState","toolbar","embedded","embedCallback","url","parsedUrl","URL","includes","protocol","_","propTypes","PropTypes","isRequired","API","injectIntl","withRouter"],"sourceRoot":""}