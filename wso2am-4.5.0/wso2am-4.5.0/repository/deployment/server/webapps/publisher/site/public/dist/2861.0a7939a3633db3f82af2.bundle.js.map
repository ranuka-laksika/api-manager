{"version":3,"file":"2861.0a7939a3633db3f82af2.bundle.js","mappings":"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","sources":["webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/apiSecurityConstants.js","webpack://@wso2apim/publisher/./source/src/app/components/Shared/DropZoneLocal.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Create/GraphQL/Steps/ProvideGraphQL.jsx","webpack://@wso2apim/publisher/./source/src/app/data/Wsdl.js","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/ProductResources/MethodView.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/ProductResources/ProductResourcesEditWorkspace.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/APIDefinition/LinterUI/LinterUI.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Create/OpenAPI/Steps/ValidationResults.tsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Create/OpenAPI/Steps/ProvideOpenAPI.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/APIDefinition/Linting/APILintingSummary.tsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Create/WSDL/Steps/ProvideWSDL.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Details/APIDefinition/Linting/Linting.tsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Create/AsyncAPI/SolaceEventAPIProductFetcher.jsx","webpack://@wso2apim/publisher/./source/src/app/components/Apis/Create/AsyncAPI/Steps/ProvideAsyncAPI.jsx"],"sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// Check this file for more info  <CARBON_APIMGT>/components/apimgt/org.wso2.carbon.apimgt.impl\n// /src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java\n\nconst DEFAULT_API_SECURITY_OAUTH2 = 'oauth2';\nconst API_SECURITY_BASIC_AUTH = 'basic_auth';\nconst API_SECURITY_API_KEY = 'api_key';\nconst API_SECURITY_MUTUAL_SSL = 'mutualssl';\nconst API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY = 'oauth_basic_auth_api_key_mandatory';\nconst API_SECURITY_MUTUAL_SSL_MANDATORY = 'mutualssl_mandatory';\nconst API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_OPTIONAL = 'oauth_basic_auth_api_key_optional';\nconst API_SECURITY_MUTUAL_SSL_OPTIONAL = 'mutualssl_optional';\nconst API_SECURITY_KEY_TYPE_PRODUCTION = 'PRODUCTION';\nconst API_SECURITY_KEY_TYPE_SANDBOX = 'SANDBOX';\nconst ALL_AUDIENCES_ALLOWED = 'all';\n\nexport {\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_MUTUAL_SSL,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_OPTIONAL,\n    API_SECURITY_MUTUAL_SSL_OPTIONAL,\n    API_SECURITY_KEY_TYPE_PRODUCTION,\n    API_SECURITY_KEY_TYPE_SANDBOX,\n    ALL_AUDIENCES_ALLOWED,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDropzone } from 'react-dropzone';\nimport { useTheme } from '@mui/material/styles';\n\n/**\n *\n * Convert raw byte values to human readable format\n * @param {Number} bytes number of bytes\n * @param {boolean} [si=false]\n * @returns {String} Human readable string format\n */\nexport function humanFileSize(bytesParam, si = false) {\n    let bytes = bytesParam; // To prevent `no-param-reassign` eslint rule violation\n    const thresh = si ? 1000 : 1024;\n    if (Math.abs(bytes) < thresh) {\n        return bytes + ' B';\n    }\n    const units = si\n        ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n    let u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n    return bytes.toFixed(1) + ' ' + units[u];\n}\n\nconst baseStyle = {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '100px 20px',\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: '#eeeeee',\n    borderStyle: 'dashed',\n    backgroundColor: '#fafafa',\n    color: '#bdbdbd',\n    outline: 'none',\n    transition: 'border .24s ease-in-out',\n};\n\nconst activeStyle = {\n    borderColor: '#2196f3',\n};\n\nconst acceptStyle = {\n    borderColor: '#00e676',\n};\n\nconst rejectStyle = {\n    borderColor: '#ff1744',\n};\n\n/**\n *\n * Provide a class friendly Dropzone wrapper using hooks.\n * @export\n * @returns\n */\nexport default function DropZoneLocal(props) {\n    const {\n        message, onDrop, error, children, accept, ariaLabel,\n    } = props;\n    const dropZoneObject = useDropzone({ onDrop });\n    const {\n        getRootProps, getInputProps, isDragActive, isDragAccept, isDragReject,\n    } = dropZoneObject;\n\n    const style = useMemo(\n        () => ({\n            ...baseStyle,\n            ...(isDragActive ? activeStyle : {}),\n            ...(isDragAccept ? acceptStyle : {}),\n            ...(isDragReject ? rejectStyle : {}),\n        }),\n        [isDragActive, isDragReject, error],\n    );\n    const theme = useTheme();\n\n    const containerStyles = {\n        fontFamily: theme.typography.fontFamily,\n        textAlign: 'center',\n    };\n\n    return (\n        <section className='container' style={containerStyles}>\n            <div {...getRootProps({ style })}>\n                <input\n                    // In accordance with https://www.w3.org/TR/WCAG20-TECHS/ARIA14.html\n                    aria-label={ariaLabel}\n                    {...getInputProps()}\n                    multiple={false}\n                    accept={accept}\n                />\n                {children || message}\n            </div>\n        </section>\n    );\n}\nDropZoneLocal.defaultProps = {\n    message: \"Drag 'n' drop some files here, or click to select files\",\n    onDrop: () => {},\n    showFilesList: true,\n    children: null,\n    error: false,\n    accept: '*',\n};\nDropZoneLocal.propTypes = {\n    message: PropTypes.string,\n    onDrop: PropTypes.func,\n    accept: PropTypes.string,\n    showFilesList: PropTypes.bool,\n    children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.shape({}))]),\n    error: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({})]),\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Grid from '@mui/material/Grid';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton from '@mui/material/IconButton';\nimport InsertDriveFile from '@mui/icons-material/InsertDriveFile';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\nimport API from 'AppData/api';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\nimport Banner from 'AppComponents/Shared/Banner';\nimport { debounce, FormControlLabel, InputAdornment, Radio, RadioGroup, TextField } from '@mui/material';\nimport APIValidation from 'AppData/APIValidation';\nimport CheckIcon from '@mui/icons-material/Check';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\n\nconst PREFIX = 'ProvideGraphQL';\nconst DEBOUNCE_DELAY_MS = 750;\nconst classes = {\n    mandatoryStar: `${PREFIX}-mandatoryStar`\n};\n\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.mandatoryStar}`]: {\n        color: theme.palette.error.main,\n    }\n}));\n\n/**\n * Sub component of API Create using GraphQL UI, This is handling the taking input of GraphQL file or URL from the user\n * In the create API using GraphQL wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideGraphQL(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const { inputType, inputValue } = apiInputs;\n    const isURLInput = inputType === ProvideGraphQL.INPUT_TYPES.URL || inputType === '';\n    const isFileInput = inputType === ProvideGraphQL.INPUT_TYPES.FILE;\n    const isEndpointInput = inputType === ProvideGraphQL.INPUT_TYPES.ENDPOINT;\n    const intl = useIntl();\n    // If valid value is `null`,that means valid, else an error object will be there\n    const [isValid, setValidity] = useState({ file: null });\n    const [isValidating, setIsValidating] = useState(false);\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        setIsValidating(true);\n\n        // Why `files.pop()` below is , We only handle one graphQL file at a time,\n        // So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        const file = files.pop();\n        let validFile = null;\n        API.validateGraphQLFile(file)\n            .then((response) => {\n                const {\n                    body: { isValid: isValidFile, graphQLInfo },\n                } = response;\n                if (isValidFile) {\n                    validFile = file;\n                    inputsDispatcher({ action: 'graphQLInfo', value: graphQLInfo });\n                    setValidity({ ...isValid, file: null });\n                } else {\n                    setValidity({ ...isValid, file: { message: 'GraphQL content validation failed!' } });\n                }\n            })\n            .catch((error) => {\n                setValidity({ ...isValid, file: { message: 'GraphQL content validation failed!' } });\n                console.error(error);\n            })\n            .finally(() => {\n                setIsValidating(false); // Stop the loading animation\n                onValidate(validFile !== null); // If there is a valid file then validation has passed\n                // If the given file is valid , we set it as the inputValue else set `null`\n                inputsDispatcher({ action: 'inputValue', value: validFile });\n            });\n    }\n\n    function reset() {\n        inputsDispatcher({ action: 'importingContent', value: null });\n        inputsDispatcher({ action: 'inputValue', value: null });\n        inputsDispatcher({ action: 'isFormValid', value: false });\n        inputsDispatcher({ action: 'endpoint', value: '' });\n        inputsDispatcher({ action: 'isValid', value: null });\n    }\n\n    const isInvalidURL = Boolean(isValid.url);\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isValid.url !== undefined) {\n        if (isInvalidURL) {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <ErrorOutlineIcon fontSize='large' color='error' />\n                </InputAdornment>\n            );\n        } else {\n            urlStateEndAdornment = (\n                <InputAdornment position='end' id='url-validated'>\n                    <CheckIcon fontSize='large' color='primary' />\n                </InputAdornment>\n            );\n        }\n    }\n\n    const debouncedValidateURLOrEndpoint = useCallback(\n        debounce((newURL) => {\n            const handleResponse = (response) => {\n                const {\n                    body: { graphQLInfo },\n                } = response;\n                const isValidURL = response.body.isValid;\n                if (isValidURL) {\n                    inputsDispatcher({ action: 'graphQLInfo', value: graphQLInfo });\n                    setValidity({ isValidURL, file: null });\n                } else {\n                    let errorMessage;\n                    if (inputType === ProvideGraphQL.INPUT_TYPES.ENDPOINT) {\n                        errorMessage = 'Error occurred while generating GraphQL schema from endpoint';\n                    } else if (inputType === ProvideGraphQL.INPUT_TYPES.URL) {\n                        errorMessage = 'Error occurred while retrieving GraphQL schema from url';\n                    }\n                    setValidity({\n                        isValidURL,\n                        file: { message: errorMessage }\n                    });\n                }\n                onValidate(isValidURL);\n                setIsValidating(false);\n            };\n\n            const handleError = (error) => {\n                setValidity({ url: { message: error.message } });\n                onValidate(false);\n                setIsValidating(false);\n                console.error(error);\n            }\n            \n            const validationFunction = inputType === ProvideGraphQL.INPUT_TYPES.URL\n                ? () => API.validateGraphQL(newURL)\n                : () => API.validateGraphQL(newURL, { useIntrospection: true });\n\n            validationFunction()\n                .then(handleResponse)\n                .catch(handleError);\n\n            if(inputType === ProvideGraphQL.INPUT_TYPES.ENDPOINT){\n                inputsDispatcher({ action: 'endpoint', value: newURL });\n            }\n        }, DEBOUNCE_DELAY_MS),\n        [inputType],\n    );\n\n    function validateURL(value) {\n        const state = APIValidation.url.required().validate(value).error;\n        if (state === null) {\n            setIsValidating(true);\n            debouncedValidateURLOrEndpoint(apiInputs.inputValue);\n        } else {\n            setValidity({ ...isValid, url: state });\n            onValidate(false);\n        }\n    }\n\n    useEffect(() => {\n        if (inputValue && inputType === ProvideGraphQL.INPUT_TYPES.FILE) {\n            onDrop([inputValue]);\n        }\n    }, [inputType, inputValue]);\n\n    useEffect(() => {\n        reset();\n    }, [inputType]);\n\n    const accept = '.graphql,text/plain';\n    return (\n        <Root>\n            <Grid container>\n                <Grid item xs={12} sx={{ mb: 2 }}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input Source'\n                            value={apiInputs.inputType === '' ? 'url' : apiInputs.inputType}\n                            onChange={(event) => {\n                                inputsDispatcher({ action: 'inputType', value: event.target.value });\n                                setValidity({ file: null });\n                            }}\n                        >\n                            <FormControlLabel\n                                disabled={isValidating}\n                                value={ProvideGraphQL.INPUT_TYPES.FILE}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.GraphQL.create.api.form.file.label',\n                                    defaultMessage: 'GraphQL File/Archive',\n                                })}\n                                aria-label='GraphQL File/Archive'\n                                id='graphql-file-select-radio'\n                            />\n                            <FormControlLabel\n                                disabled={isValidating}\n                                value={ProvideGraphQL.INPUT_TYPES.URL}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.GraphQL.create.api.form.url.label',\n                                    defaultMessage: 'GraphQL SDL URL',\n                                })}\n                                id='graphql-url-select-radio'\n                            />\n                            <FormControlLabel\n                                disabled={isValidating}\n                                value={ProvideGraphQL.INPUT_TYPES.ENDPOINT}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.GraphQL.create.api.form.endpoint.label',\n                                    defaultMessage: 'GraphQL Endpoint',\n                                })}\n                                aria-label='GraphQL Endpoint'\n                                id='graphql-endpoint-select-radio'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                {isValid.file\n                    && (\n                        <Grid item md={12} sx={{ mb: 2}}>\n                            <Banner\n                                onClose={() => setValidity({ file: null })}\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='error'\n                                message={isValid.file.message}\n                            />\n                        </Grid>\n                    )}\n                <Grid item md={12}>\n                    {isFileInput && (\n                        <>\n                            {apiInputs.inputValue ? (\n                                <List data-testid='uploaded-list-graphql'>\n                                    <ListItem\n                                        key={apiInputs.inputValue.path}\n                                        data-testid='uploaded-list-content-graphql'\n                                    >\n                                        <ListItemAvatar>\n                                            <Avatar>\n                                                <InsertDriveFile />\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            primary={`\n                                                ${apiInputs.inputValue.path} - \n                                                ${humanFileSize(apiInputs.inputValue.size)}`\n                                            }\n                                            data-testid={'file-input-' + apiInputs.inputValue.path}\n                                        />\n                                        <ListItemSecondaryAction>\n                                            <IconButton\n                                                edge='end'\n                                                aria-label='delete'\n                                                onClick={() => {\n                                                    inputsDispatcher({ action: 'inputValue', value: null });\n                                                    inputsDispatcher({ action: 'isFormValid', value: false });\n                                                }}\n                                                data-testid='btn-delete-imported-file'\n                                                size='large'>\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                </List>\n                            ) : (\n                                <DropZoneLocal\n                                    error={isValid.file}\n                                    onDrop={onDrop}\n                                    files={apiInputs.inputValue}\n                                    accept={accept}\n                                    ariaLabel='GraphQL file upload'\n                                >\n                                    {isValidating ? (<CircularProgress />)\n                                        : ([\n                                            <FormattedMessage\n                                                id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.file.dropzone'\n                                                defaultMessage={'Drag & Drop files here {break} or {break} '\n                                                    + 'Browse files{break}({accept})'}\n                                                values={{ break: <br />, accept }}\n                                            />,\n                                            <Button\n                                                color='primary'\n                                                variant='contained'\n                                                data-testid='browse-to-upload-btn'\n                                                sx={{ mt: 1 }}\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Create.GraphQL.Steps.ProvideGraphQL.Input.file.upload'\n                                                    defaultMessage='Browse File to Upload'\n                                                />\n                                            </Button>,\n                                        ]\n                                        )}\n                                </DropZoneLocal>\n                            )}\n                        </>\n                    )}\n                    {isURLInput && (\n                        <TextField\n                            autoFocus\n                            id='outlined-full-width-url'\n                            label={intl.formatMessage({\n                                id: 'Apis.Create.GraphQL.create.api.url.label',\n                                defaultMessage: 'GraphQL SDL URL',\n                            })}\n                            placeholder={intl.formatMessage({\n                                id: 'Apis.Create.GraphQL.create.api.url.placeholder',\n                                defaultMessage: 'Enter GraphQL SDL URL',\n                            })}\n                            fullWidth\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                            value={apiInputs.inputValue}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                onBlur: ({ target: { value } }) => {\n                                    validateURL(value);\n                                },\n                                endAdornment: urlStateEndAdornment,\n                            }}\n                            // 'Give the URL of GraphQL endpoint'\n                            helperText={(isValid.url && isValid.url.message)\n                                || (\n                                    <FormattedMessage\n                                        id='Apis.Create.GraphQL.create.api.url.helper.text'\n                                        defaultMessage='Click away to validate the URL'\n                                    />\n                                )}\n                            error={isInvalidURL}\n                            data-testid='graphql-add-form-url'\n                        />\n                    )}\n                    {isEndpointInput && (\n                        <TextField\n                            autoFocus\n                            id='outlined-full-width-endpoint'\n                            label={intl.formatMessage({\n                                id: 'Apis.Create.GraphQL.create.api.endpoint.label',\n                                defaultMessage: 'GraphQL Endpoint',\n                            })}\n                            placeholder={intl.formatMessage({\n                                id: 'Apis.Create.GraphQL.create.api.endpoint.placeholder',\n                                defaultMessage: 'Enter GraphQL Endpoint',\n                            })}\n                            fullWidth\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                            value={apiInputs.inputValue}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                onBlur: ({ target: { value } }) => {\n                                    validateURL(value);\n                                },\n                                endAdornment: urlStateEndAdornment,\n                            }}\n                            helperText={(isValid.url && isValid.url.message)\n                                || (\n                                    <FormattedMessage\n                                        id='Apis.Create.GraphQL.create.api.url.helper.text'\n                                        defaultMessage='Click away to validate the URL'\n                                    />\n                                )}\n                            error={isInvalidURL}\n                            data-testid='graphql-add-form-endpoint'\n                        />\n                    )}\n                </Grid>\n            </Grid>\n        </Root>\n    );\n}\n\nProvideGraphQL.defaultProps = {\n    onValidate: () => {},\n};\n\nProvideGraphQL.INPUT_TYPES = {\n    URL: 'url',\n    ENDPOINT: 'endpoint',\n    FILE: 'file',\n};\n\nProvideGraphQL.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        inputValue: PropTypes.string\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/**\n * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport API from 'AppData/api';\n\nimport APIClientFactory from './APIClientFactory';\nimport Utils from './Utils';\nimport Resource from './Resource';\n\n/**\n * An abstract representation of a Scopes\n */\nclass Wsdl extends Resource {\n    /**\n     * Validate a WSDL file or an archive\n     *\n     * @static\n     * @param {*} file WSDL file or archive\n     * @returns {*} WSDL validation response\n     * @memberof Wsdl\n     */\n    static validateFileOrArchive(file) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        const requestBody = {\n            requestBody: {\n                file,\n            },\n        };\n        return apiClient.then((client) => {\n            return client.apis.Validation.validateWSDLDefinition(null, requestBody);\n        });\n    }\n\n    /**\n     * Validate a WSDL URL\n     *\n     * @static\n     * @param {*} url WSDL URL\n     * @returns {*} WSDL validation response\n     * @memberof Wsdl\n     */\n    static validateUrl(url) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        return apiClient.then((client) => {\n            return client.apis.Validation.validateWSDLDefinition(\n                {},\n                {\n                    requestBody: { url },\n                },\n            );\n        });\n    }\n\n    /**\n     * Importing a WSDL and creating an API by a .wsdl file or a WSDL archive zip file\n     *\n     * @static\n     * @param {*} url WSDL url\n     * @param {*} additionalProperties additional properties of the API eg: name, version, context\n     * @param {*} implementationType SOAPTOREST or SOAP\n     * @returns {API} API object which was created\n     * @memberof Wsdl\n     */\n    static importByUrl(url, additionalProperties, implementationType = 'SOAP') {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        return apiClient.then((client) => {\n            const promisedResponse = client.apis.APIs.importWSDLDefinition(\n                {},\n                {\n                    requestBody: {\n                        url,\n                        additionalProperties: JSON.stringify(additionalProperties),\n                        implementationType,\n                    },\n                },\n            );\n            return promisedResponse.then((response) => new API(response.body));\n        });\n    }\n\n    /**\n     * Importing a WSDL and creating an API by a .wsdl file or a WSDL archive zip file\n     *\n     * @static\n     * @param {*} file WSDL file or archive\n     * @param {*} additionalProperties additional properties of the API eg: name, version, context\n     * @param {*} implementationType SOAPTOREST or SOAP\n     * @returns {API} API object which was created\n     * @memberof Wsdl\n     */\n    static importByFileOrArchive(file, additionalProperties, implementationType = 'SOAP') {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT)\n            .client;\n        return apiClient.then((client) => {\n            const promisedResponse = client.apis.APIs.importWSDLDefinition(\n                null,\n                {\n                    requestBody: {\n                        file,\n                        additionalProperties: JSON.stringify(additionalProperties),\n                        implementationType,\n                    },\n                },\n            );\n\n            return promisedResponse.then((response) => new API(response.body));\n        });\n    }\n}\n\nexport default Wsdl;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport PropTypes from 'prop-types';\n\n/**\n * MethodView component displays the HTTP method of an API resource.\n * It uses a Chip component to visually represent the method,\n * with colors based on the method type (GET, POST, PUT, DELETE, etc.).\n * \n * @param {Object} props - The component properties.\n * @returns {JSX.Element} The rendered MethodView component.\n */\nfunction MethodView(props) {\n    const theme = useTheme();\n    const { method, className } = props;\n    let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[method.toLowerCase()] : null;\n    let chipTextColor = '#000000';\n\n    if (!chipColor) {\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[method.toLowerCase()]);\n    }\n\n    return (\n        <Chip\n            label={method}\n            className={className || ''}\n            style={{\n                backgroundColor: chipColor, color: chipTextColor, height: 20, width: 65,\n            }}\n        />\n    );\n}\n\nMethodView.propTypes = {\n    className: PropTypes.string.isRequired,\n    method: PropTypes.string.isRequired,\n};\n\nexport default MethodView;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable array-callback-return */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"operationObj\"] }] */\n\nimport React, { useState, useEffect } from 'react';\nimport { styled } from '@mui/material/styles';\nimport Paper from '@mui/material/Paper';\nimport TextField from '@mui/material/TextField';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport Icon from '@mui/material/Icon';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\nimport Checkbox from '@mui/material/Checkbox';\nimport IconButton from '@mui/material/IconButton';\nimport Button from '@mui/material/Button';\nimport queryString from 'query-string';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport cloneDeep from 'lodash.clonedeep';\nimport PropTypes from 'prop-types';\nimport API from 'AppData/api';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport MethodView from 'AppComponents/Apis/Details/ProductResources/MethodView';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport CONSTS from 'AppData/Constants';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\n\nconst PREFIX = 'ProductResourcesEdit';\n\nconst classes = {\n    searchWrapper: `${PREFIX}-searchWrapper`,\n    paper: `${PREFIX}-paper`,\n    apiWrapper: `${PREFIX}-apiWrapper`,\n    ResourceWrapper: `${PREFIX}-ResourceWrapper`,\n    SelectedResourceWrapper: `${PREFIX}-SelectedResourceWrapper`,\n    leftMost: `${PREFIX}-leftMost`,\n    rightMost: `${PREFIX}-rightMost`,\n    colTitle: `${PREFIX}-colTitle`,\n    treeItemMain: `${PREFIX}-treeItemMain`,\n    treeItemMainWrapper: `${PREFIX}-treeItemMainWrapper`,\n    treeItem: `${PREFIX}-treeItem`,\n    hr: `${PREFIX}-hr`,\n    methodView: `${PREFIX}-methodView`,\n    middleText: `${PREFIX}-middleText`,\n    selectedApi: `${PREFIX}-selectedApi`,\n    selectedTitle: `${PREFIX}-selectedTitle`,\n    buttonWrapper: `${PREFIX}-buttonWrapper`,\n    selectedApiDescription: `${PREFIX}-selectedApiDescription`,\n    messageWrapper: `${PREFIX}-messageWrapper`,\n    tootBar: `${PREFIX}-tootBar`,\n    inactiveIcon: `${PREFIX}-inactiveIcon`\n};\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.searchWrapper}`]: {\n        padding: 0,\n        marginTop: theme.spacing(1),\n        '& input': {\n            padding: '12px 14px',\n        },\n        display: 'flex',\n    },\n\n    [`& .${classes.paper}`]: {\n        height: '100%',\n        borderRadius: 0,\n    },\n\n    [`& .${classes.apiWrapper}`]: {\n        overflowY: 'auto',\n        height: 349,\n    },\n\n    [`& .${classes.ResourceWrapper}`]: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        '& .frame': {\n            overflowY: 'auto',\n            height: 328,\n            border: '1px solid ' + theme.palette.grey[400],\n            borderRadius: theme.spacing(1),\n        },\n        '& .frame::-webkit-scrollbar': {\n            '-webkit-appearance': 'none',\n        },\n        '& .frame::-webkit-scrollbar:vertical': {\n            width: 11,\n        },\n        '& .frame::-webkit-scrollbar:horizontal': {\n            height: 11,\n        },\n        '& .frame::-webkit-scrollbar-thumb': {\n            borderRadius: theme.spacing(1),\n            border: '2px solid' + theme.palette.common.white,\n            backgroundColor: theme.palette.grey[400],\n        },\n        '& .frame.rightFrame': {\n            height: 369,\n        },\n    },\n\n    [`& .${classes.SelectedResourceWrapper}`]: {\n        overflowY: 'auto',\n        overflowX: 'auto',\n        height: 321,\n    },\n\n    [`& .${classes.leftMost}`]: {\n        background: theme.palette.grey[700],\n        color: theme.palette.getContrastText(theme.palette.grey[700]),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.rightMost}`]: {\n        background: theme.palette.grey[600],\n        color: theme.palette.getContrastText(theme.palette.grey[600]),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.colTitle}`]: {\n        background: theme.palette.grey[400],\n        color: theme.palette.getContrastText(theme.palette.grey[400]),\n        padding: theme.spacing(1),\n        fontWeight: 200,\n        minHeight: 25,\n    },\n\n    [`& .${classes.treeItemMain}`]: {\n        background: theme.palette.grey[100],\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n        padding: theme.spacing(1),\n    },\n\n    [`& .${classes.treeItemMainWrapper}`]: {\n        paddingLeft: theme.spacing(2),\n    },\n\n    [`& .${classes.treeItem}`]: {\n        '& .material-icons': {\n            fontSize: theme.spacing(2),\n            cursor: 'pointer',\n            marginRight: theme.spacing(1),\n        },\n        display: 'flex',\n        alignItems: 'center',\n        padding: '6px 0',\n    },\n\n    [`& .${classes.hr}`]: {\n        flex: 1,\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n    },\n\n    [`& .${classes.methodView}`]: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n\n    [`& .${classes.middleText}`]: {\n        flex: 1,\n    },\n\n    [`& .${classes.selectedApi}`]: {\n        background: theme.palette.grey[100],\n    },\n\n    [`& .${classes.selectedTitle}`]: {\n        padding: theme.spacing(2),\n    },\n\n    [`& .${classes.buttonWrapper}`]: {\n        marginTop: theme.spacing(2),\n        textDecorate: 'none',\n    },\n\n    [`& .${classes.selectedApiDescription}`]: {\n        padding: '0px 16px',\n    },\n\n    [`& .${classes.messageWrapper}`]: {\n        padding: theme.spacing(3),\n    },\n\n    [`& .${classes.tootBar}`]: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        alignItems: 'center',\n        margin: '0 16px',\n        background: theme.palette.grey[100],\n        color: theme.palette.getContrastText(theme.palette.grey[100]),\n        padding: 5,\n        borderRadius: 5,\n        '& a': {\n            cursor: 'pointer',\n            display: 'flex',\n            justifyContent: 'flex-end',\n            alignItems: 'center',\n        },\n    },\n\n    [`& .${classes.inactiveIcon}`]: {\n        color: theme.palette.grey[300],\n    }\n}));\n\nconst resourceMethod = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n    PATCH: 'patch',\n    OPTIONS: 'options',\n    HEAD: 'head',\n};\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction ProductResourcesEdit(props) {\n\n    const {\n        apiResources, setApiResources, isStateCreate, api, resourceNotFountMessage,\n    } = props;\n\n    // Define states\n    const [allApis, setAllApis] = useState([]);\n    const [notFound, setNotFound] = useState(false);\n    const [searchText, setSearchText] = useState('');\n    const [selectedApiPaths, setSelectedApiPaths] = useState([]);\n    const [selectedApi, setSelectedApi] = useState(null);\n    const [fromSearch, setFromSearch] = useState(false);\n    const [isSwaggerLoading, setIsSwaggerLoading] = useState(false);\n    // Initialize the rest api libraries\n    const apiRestClient = new API();\n    const intl = useIntl();\n    /**\n     * This method is filtering apis base on the searchText entered. In no searchText provided it will give all apis.\n     *\n     * @param {*} [text=null]\n     * @returns a promise\n     */\n    const filterAPIs = (text = null) => {\n        if (text) {\n            // Build the search query and update\n            const inputValue = text.trim().toLowerCase();\n            const composeQuery = '?query=name:' + inputValue + ' type:HTTP';\n            const composeQueryJSON = queryString.parse(composeQuery);\n            // TODO we need to make the limit and offset changeable from the UI ( paggination )\n            composeQueryJSON.limit = 100;\n            composeQueryJSON.offset = 0;\n            return API.search(composeQueryJSON);\n        } else {\n            return API.all({\n                query: {\n                    type: 'HTTP',\n                },\n            });\n        }\n    };\n\n    const isValidHttpVerb = (innerKey) => {\n        if (innerKey === resourceMethod.DELETE || innerKey === resourceMethod.POST\n                || innerKey === resourceMethod.GET || innerKey === resourceMethod.PUT\n                || innerKey === resourceMethod.PATCH || innerKey === resourceMethod.OPTIONS\n                || innerKey === resourceMethod.HEAD) {\n            return true;\n        }\n        return false;\n    };\n\n    const addPropsToSelectedApiPaths = (paths, apiId, latestApiResources = apiResources) => {\n        /* Add checked field to each resource object */\n        Object.keys(paths).map((key) => {\n            const methodObj = paths[key];\n            Object.keys(methodObj).map((innerKey) => {\n                // We are setting the check property at this level because we need to\n                // add resources for each verb ( post, get, put etc.. )\n                if (isValidHttpVerb(innerKey)) {\n                    methodObj[innerKey].checked = false;\n\n                    // We need to check the latestApiResources for the same\n                    // API/Resource Name / Verb and  indicate it differently\n                    // Loop latestApiResources object\n                    const target = key;\n                    const verb = innerKey;\n                    let resourceFound = false;\n                    if (latestApiResources) {\n                        Object.keys(latestApiResources).map((resourcekey) => {\n                            const apiResource = latestApiResources[resourcekey];\n\n                            // Check if the the api slected from UI is same as the operation api id checking\n                            if (apiResource && apiId === apiResource.apiId) {\n                                // API is the same\n                                Object.keys(apiResource.operations).map((operationKey) => {\n                                    const operation = apiResource.operations[operationKey];\n                                    if (\n                                        operation\n                                        && operation.target === target\n                                        && operation.verb.toLowerCase() === verb.toLowerCase()\n                                    ) {\n                                        // Operation is already there\n                                        resourceFound = true;\n                                    }\n                                });\n                            }\n                        });\n                    }\n                    if (resourceFound) {\n                        methodObj[innerKey].allreadyAdded = true;\n                    } else {\n                        methodObj[innerKey].allreadyAdded = false;\n                    }\n                }\n            });\n        });\n        setSelectedApiPaths(paths);\n    };\n\n    // Get the api swagger after an api is selected\n    const getApiSwagger = (apiSelected) => {\n        setIsSwaggerLoading(true);\n        const { id } = apiSelected;\n        const promisedAPI = apiRestClient.getSwagger(id);\n        promisedAPI\n            .then((response) => {\n                if (response.obj.paths !== undefined) {\n                    addPropsToSelectedApiPaths(response.obj.paths, id);\n                    setSelectedApi(apiSelected);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            })\n            .finally(() => {\n                setIsSwaggerLoading(false);\n            });\n    };\n    const handleSearchTextChange = (event) => {\n        const apiPromise = filterAPIs(event.target.value);\n        apiPromise\n            .then((response) => {\n                const {\n                    body: { list },\n                } = response;\n                const filteredList = list.filter((theApi) => theApi.status !== 'PROTOTYPED');\n                if (filteredList.length > 0) {\n                    setSelectedApi(list[0]);\n                }\n                setAllApis(filteredList);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n        setSearchText(event.target.value);\n        setFromSearch(event.target.value);\n    };\n    const updateResourceTree = (resourceToAdd, action, inputApiResources = null) => {\n        let updateStateHere = false;\n        let newApiResources = null;\n        if (!inputApiResources) {\n            // If a copy of the state variable is not passed from the calling method we\n            // have to make a copy inside here before doing modifications to that\n            newApiResources = cloneDeep(apiResources);\n            updateStateHere = true;\n        } else {\n            newApiResources = inputApiResources;\n        }\n        const {\n            target, verb, apiId, name, version,\n        } = resourceToAdd;\n        const newResource = {\n            id: null,\n            target,\n            verb: verb.toUpperCase(),\n            authType: null,\n            throttlingPolicy: null,\n            scopes: [],\n        };\n        let apiFound = false;\n\n        // Loop copy of apiResources object\n        Object.keys(newApiResources).map((key, indexA) => {\n            const apiResource = newApiResources[key];\n\n            // Check if the the api slected from UI is same as the operation api id trying to remove.\n            if (apiResource && apiId === apiResource.apiId) {\n                apiFound = true;\n                let operationFound = false;\n                Object.keys(apiResource.operations).map((innerKey, indexB) => {\n                    const operation = apiResource.operations[innerKey];\n                    if (\n                        operation\n                        && operation.target === target\n                        && operation.verb.toLowerCase() === verb.toLowerCase()\n                    ) {\n                        // Operation is already there\n                        operationFound = true;\n                        if (action === 'remove') {\n                            if (apiResource.operations.length > 1) {\n                                apiResource.operations.splice(indexB, 1);\n                            } else {\n                                newApiResources.splice(indexA, 1);\n                            }\n                        }\n                    }\n                });\n                // Operation not added .. so we need to add that\n                if (!operationFound && action === 'add') {\n                    apiResource.operations.push(newResource);\n                }\n            }\n        });\n\n        if (!apiFound) {\n            // Add api object\n            newApiResources.push({\n                name,\n                apiId,\n                operations: [newResource],\n                version,\n            });\n        }\n        // When we are adding the resources in a loop we do not care about the return but we simply set the state here.\n        if (updateStateHere) {\n            setApiResources(newApiResources);\n            // We need to call this in order to set other properties\n            if (apiId === selectedApi.id) {\n                addPropsToSelectedApiPaths(cloneDeep(selectedApiPaths), apiId, newApiResources);\n            }\n        }\n        return newApiResources;\n    };\n\n    const updateCheckBox = (key, innerKey) => {\n        // we need to copy the object from the state and modify it before set it to the state\n        const prevSelectedApiPaths = { ...selectedApiPaths };\n\n        // Now we inverse the checked value\n        prevSelectedApiPaths[key][innerKey].checked = !prevSelectedApiPaths[key][innerKey].checked;\n\n        // Then we set state\n        setSelectedApiPaths(prevSelectedApiPaths);\n    };\n    const addSelectedResourcesToTree = (addAll = false) => {\n        /* Add checked field to each resource object */\n        const newApiResources = cloneDeep(apiResources);\n        Object.keys(selectedApiPaths).map((key) => {\n            const methodObj = selectedApiPaths[key];\n            Object.keys(methodObj).map((innerKey) => {\n                // We are setting the check property at this level because we need to\n                // add resources for each verb ( post, get, put etc.. )\n                if ((methodObj[innerKey].checked || addAll) && isValidHttpVerb(innerKey)) {\n                    // We need to add this to apiResources array\n                    updateResourceTree(\n                        {\n                            target: key,\n                            verb: innerKey,\n                            apiId: selectedApi.id,\n                            name: selectedApi.name,\n                            version: selectedApi.version,\n                        },\n                        'add',\n                        newApiResources,\n                    );\n                }\n            });\n        });\n        setApiResources(newApiResources);\n        addPropsToSelectedApiPaths(cloneDeep(selectedApiPaths), selectedApi.id, newApiResources);\n    };\n    useEffect(() => {\n        // Get all apis\n        const apiPromise = filterAPIs();\n        apiPromise\n            .then((response) => {\n                const {\n                    body: { list },\n                } = response;\n                const filteredList = list.filter((theApi) => theApi.lifeCycleStatus !== 'PROTOTYPED' &&\n                    theApi.lifeCycleStatus !== 'RETIRED' && theApi.lifeCycleStatus !== 'DEPRECATED' &&\n                    theApi.gatewayType === 'wso2/synapse'\n                );\n\n                setAllApis(filteredList);\n                if (filteredList.length > 0) {\n                    setSelectedApi(filteredList[0]);\n                    getApiSwagger(filteredList[0]);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    setNotFound(true);\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }, []);\n    if (notFound) {\n        return <ResourceNotFound message={resourceNotFountMessage} />;\n    }\n    return (\n        <Root>\n            {allApis.length === 0 && !fromSearch ? (\n                <Grid container>\n                    <Typography className={classes.messageWrapper}>\n                        <FormattedMessage\n                            id='Apis.Details.ProductResources.ProductResourcesWorkspace.ApisnotFound'\n                            defaultMessage='No REST APIs are created yet'\n                        />\n                    </Typography>\n                </Grid>\n            ) : (\n                <>\n                    {!isStateCreate && (\n                        <Grid container>\n                            <>\n                                <Grid item xs={8} className={classes.leftMost}>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ProductResources.ProductResourcesWorkspace.find.and.select'\n                                            defaultMessage='Find and select resources for the API Product'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4} className={classes.rightMost}>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ProductResources.ProductResourcesWorkspace.selected'\n                                            defaultMessage='Selected resources of API Product'\n                                        />\n                                    </Typography>\n                                </Grid>\n                            </>\n                        </Grid>\n                    )}\n                    <Grid container>\n                        {/* ************************************************ */}\n                        {/* 1st column API search and select column          */}\n                        {/* ************************************************ */}\n                        <Grid item xs={3}>\n                            <div className={classes.colTitle}>\n                                <Typography>\n                                    <FormattedMessage\n                                        id='Apis.Details.ProductResources.ProductResourcesWorkspace.select.an.api'\n                                        defaultMessage='Select an API'\n                                    />\n                                </Typography>\n                            </div>\n                            <Paper>\n                                <div className={classes.searchWrapper}>\n                                    <TextField\n                                        id='outlined-full-width'\n                                        label={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.ProductResources.ProductResourcesWorkspace.filter.'\n                                                    + 'an.api.label'}\n                                                defaultMessage='API'\n                                            />\n                                        )}\n                                        style={{ margin: 8 }}\n                                        placeholder={intl.formatMessage({\n                                            id: 'Apis.Details.ProductResources.ProductResourcesWorkspace.filter.'\n                                                + 'an.api.placeholder',\n                                            defaultMessage: 'Filter APIs',\n                                        })}\n                                        helperText={intl.formatMessage({\n                                            id: 'Apis.Details.ProductResources.ProductResourcesWorkspace.filter.'\n                                                + 'an.api.helper.text',\n                                            defaultMessage: 'Filter by name',\n                                        })}\n                                        onChange={handleSearchTextChange}\n                                        value={searchText}\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.apiWrapper}>\n                                    <List dense component='nav'>\n                                        {allApis.map((apiObj) => {\n                                            const labelId = `checkbox-list-label-${apiObj.id}`;\n\n                                            return (\n                                                <ListItem\n                                                    key={apiObj.id}\n                                                    role={undefined}\n                                                    dense\n                                                    button\n                                                    className={\n                                                        selectedApi\n                                                        && apiObj.id === selectedApi.id\n                                                        && classes.selectedApi\n                                                    }\n                                                >\n                                                    <ListItemText\n                                                        id={labelId}\n                                                        primary={apiObj.displayName || apiObj.name}\n                                                        secondary={\n                                                            `${apiObj.name} : ${apiObj.version} - ${apiObj.context}`\n                                                        }\n                                                        onClick={() => getApiSwagger(apiObj)}\n                                                    />\n                                                </ListItem>\n                                            );\n                                        })}\n                                    </List>\n                                </div>\n                            </Paper>\n                        </Grid>\n                        {/* ************************************************ */}\n                        {/* 2nd column Resource Selection                    */}\n                        {/* ************************************************ */}\n                        <Grid item xs={5}>\n                            <Paper className={classes.paper}>\n                                <div className={classes.colTitle}>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ProductResources.ProductResourcesEdit.api.resources'\n                                            defaultMessage='Select API Resources'\n                                        />\n                                    </Typography>\n                                </div>\n                                {selectedApi && (\n                                    <Typography variant='h5' component='h2' className={classes.selectedTitle}>\n                                        {selectedApi.displayName || selectedApi.name}\n                                    </Typography>\n                                )}\n                                <div className={classes.tootBar}>\n                                    <Button\n                                        onClick={() => addSelectedResourcesToTree()}\n                                        onKeyDown={() => addSelectedResourcesToTree()}\n                                        id='add-selected-resources'\n                                        disabled={isSwaggerLoading}\n                                    >\n                                        <Typography variant='body2'>\n                                            <FormattedMessage\n                                                id={'Apis.Details.ProductResources.ProductResourcesWorkspace.'\n                                                    + 'toolbar.add.selected'}\n                                                defaultMessage='Add Selected'\n                                            />\n                                        </Typography>\n                                        <Icon>fast_forward</Icon>\n                                    </Button>\n                                    <VerticalDivider />\n                                    <Button\n                                        onClick={() => addSelectedResourcesToTree(true)}\n                                        onKeyDown={() => addSelectedResourcesToTree(true)}\n                                        id='add-all-resources-btn'\n                                        disabled={isSwaggerLoading}\n                                    >\n                                        <Typography variant='body2'>\n                                            <FormattedMessage\n                                                id={'Apis.Details.ProductResources.ProductResourcesWorkspace.' \n                                                    + 'toolbar.add.all'}\n                                                defaultMessage='Add All'\n                                            />\n                                        </Typography>\n                                        <Icon>fast_forward</Icon>\n                                    </Button>\n                                </div>\n                                <div className={classes.ResourceWrapper}>\n                                    <div className='frame'>\n                                        <List dense id='resource-wrapper'>\n                                            {Object.keys(selectedApiPaths).map((key) => {\n                                                const path = selectedApiPaths[key];\n                                                const labelId = `checkbox-list-label_${key}`;\n                                                return Object.keys(path).map((innerKey) => {\n                                                    const methodObj = path[innerKey];\n                                                    return CONSTS.HTTP_METHODS.includes(innerKey) && (\n                                                        <ListItem\n                                                            key={`${innerKey} - ${key}`}\n                                                            role={undefined}\n                                                            dense\n                                                        >\n                                                            <ListItemIcon style={{ minWidth: 35 }}>\n                                                                <Checkbox\n                                                                    edge='start'\n                                                                    checked={methodObj.checked}\n                                                                    tabIndex={-1}\n                                                                    disableRipple\n                                                                    onChange={() => updateCheckBox(key, innerKey)}\n                                                                    color='primary'\n                                                                    disabled={methodObj.allreadyAdded}\n                                                                    inputProps={\n                                                                        {\n                                                                            'aria-label': 'Select API resource',\n                                                                        }\n                                                                    }\n                                                                />\n                                                            </ListItemIcon>\n                                                            <ListItemText\n                                                                id={labelId + innerKey}\n                                                                primary={(\n                                                                    <div>\n                                                                        <MethodView\n                                                                            method={innerKey}\n                                                                            className={classes.methodView}\n                                                                        />\n                                                                        <span>{key}</span>\n                                                                    </div>\n                                                                )}\n                                                                secondary={\n                                                                    methodObj['x-auth-type']\n                                                                && methodObj['x-throttling-tier']\n                                                                && `${methodObj['x-auth-type']} - ${\n                                                                    methodObj['x-throttling-tier']\n                                                                }`\n                                                                }\n                                                                onClick={() => updateResourceTree(\n                                                                    {\n                                                                        target: key,\n                                                                        verb: innerKey,\n                                                                        apiId: selectedApi.id,\n                                                                        name: selectedApi.name,\n                                                                        version: selectedApi.version,\n                                                                    },\n                                                                    'add',\n                                                                )}\n                                                                className={classes.middleText}\n                                                            />\n                                                            <ListItemSecondaryAction>\n                                                                {methodObj.allreadyAdded && (\n                                                                    <Icon className={classes.inactiveIcon}>\n                                                                        chevron_right\n                                                                    </Icon>\n                                                                )}\n                                                                {!methodObj.allreadyAdded && (\n                                                                    <IconButton\n                                                                        edge='end'\n                                                                        aria-label='comments'\n                                                                        onClick={() => updateResourceTree(\n                                                                            {\n                                                                                target: key,\n                                                                                verb: innerKey,\n                                                                                apiId: selectedApi.id,\n                                                                                name: selectedApi.name,\n                                                                                version: selectedApi.version,\n                                                                            },\n                                                                            'add',\n                                                                        )}\n                                                                        size='large'>\n                                                                        <Icon>chevron_right</Icon>\n                                                                    </IconButton>\n                                                                )}\n                                                            </ListItemSecondaryAction>\n                                                        </ListItem>\n                                                    );\n                                                });\n                                            })}\n                                        </List>\n                                    </div>\n                                </div>\n                            </Paper>\n                        </Grid>\n                        {/* ************************************************ */}\n                        {/* Third column with  selected resources            */}\n                        {/* ************************************************ */}\n                        <Grid item xs={4}>\n                            <Paper className={classes.paper}>\n                                <div className={classes.colTitle} />\n                                {api.name && (\n                                    <>\n                                        <Typography variant='h5' component='h2' className={classes.selectedTitle}>\n                                            {api.displayName || api.name}\n                                        </Typography>\n                                    </>\n                                )}\n                                <div className={classes.ResourceWrapper}>\n                                    <div className='frame rightFrame'>\n                                        {allApis.length > 0 && apiResources && apiResources.length === 0 && (\n                                            <div className={classes.messageWrapper}>\n                                                <Typography component='p'>\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.ProductResources.ProductResourcesWorkspace.'\n                                                            + 'empty.title'}\n                                                        defaultMessage='Use the left side panel to add resources'\n                                                    />\n                                                </Typography>\n                                            </div>\n                                        )}\n                                        {apiResources\n                                        && apiResources.length > 0\n                                        && Object.keys(apiResources).map((key) => {\n                                            const apiResource = apiResources[key];\n                                            return (\n                                                <div key={apiResource.name}>\n                                                    <div className={classes.treeItemMain}>\n                                                        <Typography component='p'>\n                                                            {apiResource.name}\n                                                            {' - '}\n                                                            {apiResource.version}\n                                                        </Typography>\n                                                    </div>\n                                                    <div className={classes.treeItemMainWrapper}>\n                                                        {Object.keys(apiResource.operations).map((innerKey) => {\n                                                            const operation = apiResource.operations[innerKey];\n                                                            const { target, verb } = operation;\n                                                            return (\n                                                                <div\n                                                                    key={`${apiResource.apiId}_${verb}_${target}`}\n                                                                    className={classes.treeItem}\n                                                                >\n                                                                    <MethodView\n                                                                        method={verb}\n                                                                        className={classes.methodView}\n                                                                    />\n                                                                    <Typography variant='body2'>{target}</Typography>\n                                                                    <hr className={classes.hr} />\n                                                                    <IconButton\n                                                                        onClick={() => updateResourceTree(\n                                                                            {\n                                                                                target,\n                                                                                verb,\n                                                                                apiId: apiResource.apiId,\n                                                                                name: apiResource.name,\n                                                                                version: apiResource.version,\n                                                                            },\n                                                                            'remove',\n                                                                        )}\n                                                                        aria-label={\n                                                                            'delete resource ' + apiResource.name\n                                                                        }\n                                                                        size='large'>\n                                                                        <Icon>\n                                                                            delete\n                                                                        </Icon>\n                                                                    </IconButton>\n                                                                </div>\n                                                            );\n                                                        })}\n                                                    </div>\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </Root>\n    );\n}\nProductResourcesEdit.propTypes = {\n    apiResources: PropTypes.instanceOf(Array).isRequired,\n    setApiResources: PropTypes.func.isRequired,\n    isStateCreate: PropTypes.isRequired,\n    api: PropTypes.isRequired,\n    resourceNotFountMessage: PropTypes.string.isRequired,\n};\nexport default ProductResourcesEdit;\n","/* eslint-disable */\n/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n *\n * This software is the property of WSO2 Inc. and its suppliers, if any.\n * Dissemination of any information or reproduction of any material contained\n * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n * the WSO2 Commercial License available at http://wso2.com/licenses.\n * For specific language governing the permissions and limitations under\n * this license, please see the license as well as any agreement you’ve\n * entered into with WSO2 governing the purchase of this software and any\n * associated services.\n */\nimport React from 'react';\nimport { styled } from '@mui/material/styles';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport { spectralSeverityMap as severityMap} from '../Linting/Linting'\n\nconst PREFIX = 'LinterUI';\n\nconst classes = {\n    tableCell: `${PREFIX}-tableCell`,\n    headerTableCell: `${PREFIX}-headerTableCell`,\n    tableRow: `${PREFIX}-tableRow`,\n    tableWrapper: `${PREFIX}-tableWrapper`,\n    headerTableRow: `${PREFIX}-headerTableRow`\n};\n\nconst StyledPaper = styled(Paper)(({ theme }) => ({\n    [`& .${classes.tableCell}`]: {\n        border: 'none',\n        fontSize: '10px !important',\n    },\n\n    [`& .${classes.headerTableCell}`]: {\n        background: theme.palette.background.paper,\n        fontSize: 10,\n        fontWeight: 'bold',\n        border: 'none',\n    },\n\n    [`& .${classes.tableRow}`]: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n        cursor: 'pointer',\n    },\n\n    [`& .${classes.tableWrapper}`]: {\n        '& table tr td:first-of-type': {\n            width: 10,\n        },\n        '& table tr td:nth-of-type(2)': {\n            width: 10,\n        },\n    },\n\n    [`& .${classes.headerTableRow}`]: {\n        display: 'flex',\n    }\n}));\n\nexport default function LinterUI(props) {\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const { linterResults, handleRowClick } = props;\n\n\n    function getData(type, line, message, code) {\n        return { type, line, message, code};\n    }\n\n    const columns = [\n        { id: 'type',\n            label: 'Type',\n            minWidth: 50,\n        },\n        { id: 'line',\n            label: 'Line',\n            minWidth: 50\n        },\n        {\n            id: 'message',\n            label: 'Message',\n            minWidth: 170,\n            align: 'left',\n        },\n    ];\n\n    const  rows = linterResults.map((item, index) => getData(\n            severityMap[item.severity],\n            item.range.start.line + 1, \n            item.message,\n            index,\n    ));\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(+event.target.value);\n        setPage(0);\n    };\n\n    return (\n        <StyledPaper sx={{ width: '100%', overflow: 'hidden' }}>\n            <TableContainer sx={{ maxHeight: 440 }} className={classes.tableWrapper}>\n                <Table stickyHeader aria-label='linter-table'>\n                    <TableHead>\n                        <TableRow>\n                            {columns.map((column) => (\n                                <TableCell\n                                    key={column.id}\n                                    align={column.align}\n                                    className={classes.headerTableCell}\n                                    style={{ minWidth: column.minWidth }}\n                                >\n                                    {column.label}\n                                </TableCell>\n                            ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((row) => {\n                                return (\n                                    <TableRow\n                                        key={row.code}\n                                        className={classes.tableRow}\n                                        onClick={() => handleRowClick(row.line)}\n                                    >\n                                        {columns.map((column) => {\n                                            const value = row[column.id];\n                                            return (\n                                                <TableCell\n                                                    key={column.id}\n                                                    align={column.align}\n                                                    className={classes.tableCell}>\n                                                    {column.format && typeof value === 'number'\n                                                        ? column.format(value)\n                                                        : value}\n                                                </TableCell>\n                                            );\n                                        })}\n                                    </TableRow>\n                                );\n                            })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[10, 25, 100]}\n                component='div'\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n            />\n        </StyledPaper>\n    );\n}\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from \"react\";\nimport { Accordion, AccordionDetails, AccordionSummary, Box, CircularProgress, Grid, List, ListItem, \n    ListItemIcon, ListItemText, Typography } from '@mui/material';\nimport { ExpandMore } from '@mui/icons-material';\nimport { FormattedMessage } from \"react-intl\";\nimport LinterUI from \"AppComponents/Apis/Details/APIDefinition/LinterUI/LinterUI\";\nimport APILintingSummary from \"AppComponents/Apis/Details/APIDefinition/Linting/APILintingSummary\";\nimport {  \n    spectralSeverityMap as severityMap } from \"../../../Details/APIDefinition/Linting/Linting\"\n\ntype APILintingProps = {\n    inputValue: any,\n    isValidating: boolean,\n    isLinting: boolean,\n    linterResults: any,\n    validationErrors: any,\n    onLinterLineSelect: Function,\n};\n\nexport default function ValidationResults(props: APILintingProps) {\n    const {inputValue, isValidating, isLinting, linterResults, validationErrors, onLinterLineSelect} = props;\n    const [expandValidationErrors, setExpandValidationErrors] = useState(true);\n    const [expandLinterResults, setExpandLinterResults] = useState(false);\n    const [linterSelectedSeverity, setLinterSelectedSeverity] = useState(-1);\n\n\n    return (\n        (<>\n            <Grid item xs={10} md={12}>\n                <List>\n                    {inputValue && isValidating && (\n                        <ListItem>\n                            <ListItemIcon><CircularProgress /></ListItemIcon>\n                            <ListItemText>\n                                <FormattedMessage\n                                    id='Apis.Create.OpenAPI.Steps.ValidationResults.validating'\n                                    defaultMessage='Validating API definition'\n                                />\n                            </ListItemText>\n                        </ListItem>\n                    )}\n                    {inputValue && !isValidating && isLinting && (\n                        <ListItem>\n                            <ListItemIcon><CircularProgress /></ListItemIcon>\n                            <ListItemText>\n                                <FormattedMessage\n                                    id='Apis.Create.OpenAPI.Steps.ValidationResults.linting'\n                                    defaultMessage='Generating Linter Results'\n                                />\n                            </ListItemText>\n                        </ListItem>\n                    )}\n                </List>\n            </Grid>\n            {!isValidating && validationErrors.length>0 && (\n                <Grid item xs={10} md={12}>\n                    <Accordion\n                        expanded={expandValidationErrors}\n                        onChange={()=>{setExpandValidationErrors(!expandValidationErrors)}}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMore/>}\n                            aria-controls='panel1bh-content'\n                            id='panel1bh-header'>\n                            <Grid container direction='row' \n                                justifyContent='space-between' alignItems='center'>\n                                <Typography sx={{ fontWeight: 600 }}>\n                                    <FormattedMessage\n                                        id='Apis.Create.OpenAPI.Steps.ValidationResults.validation.errros'\n                                        defaultMessage='Validation Errors'\n                                    />\n                                </Typography>\n                            </Grid>\n                        </AccordionSummary>\n                        <AccordionDetails>\n                            <List>\n                                {validationErrors.map((error:any)=>(\n                                    <ListItem>\n                                        <ListItemIcon>\n                                            {severityMap[0]}\n                                        </ListItemIcon>\n                                        <ListItemText>\n                                            <Typography>\n                                                <Box sx={{ fontWeight: 'bold' }}>{error.message}</Box>\n                                            </Typography>\n                                            <Typography>{error.description}</Typography>\n                                        </ListItemText>\n                                    </ListItem>\n                                    \n                                ))}\n                            </List>\n                            \n                        </AccordionDetails>\n                        \n                    </Accordion>\n                </Grid>\n            )}\n            {!isLinting && linterResults.length>0 && (\n                <Grid item xs={10} md={12}\n                    data-testid='itest-id-linter-results' sx={{ pt: 2 }}>\n                    <Accordion\n                        expanded={expandLinterResults}\n                        onChange={()=>{setExpandLinterResults(!expandLinterResults)}}>\n                        <AccordionSummary\n                            expandIcon={<ExpandMore />}\n                            aria-controls='panel1bh-content'\n                            id='panel1bh-header'>\n                            <Grid container direction='row' \n                                justifyContent='space-between' alignItems='center'>\n                                <Typography sx={{ fontWeight: 600 }}>\n                                    <FormattedMessage\n                                        id='Apis.Create.OpenAPI.Steps.ValidationResults.linter.results'\n                                        defaultMessage='Linter Results'\n                                    />\n                                </Typography>\n                                <APILintingSummary\n                                    linterResults={ linterResults }\n                                    handleChange = { (event:any, value:any)=>{\n                                        event.stopPropagation();\n                                        setLinterSelectedSeverity(value);\n                                        setExpandLinterResults(true);\n                                    } }\n                                />\n                            </Grid>\n                        </AccordionSummary>\n                        <AccordionDetails\n                            style={{padding:0}}>\n                            <LinterUI\n                                linterResults={ linterResults.filter(\n                                    (item: any)=> linterSelectedSeverity===-1||\n                                            item.severity===Number(linterSelectedSeverity))\n                                }\n                                severityMap={ severityMap }\n                                handleRowClick={ (line: any) => { \n                                    if(onLinterLineSelect) onLinterLineSelect(line);\n                                } }\n                            />\n                        </AccordionDetails>\n                    </Accordion>\n                </Grid>\n            )}\n        </>)\n    );\n}","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Radio from '@mui/material/Radio';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport CheckIcon from '@mui/icons-material/Check';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton from '@mui/material/IconButton';\nimport InsertDriveFile from '@mui/icons-material/InsertDriveFile';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\nimport debounce from 'lodash.debounce'; // WARNING: This is coming from mui-datatable as a transitive dependency\nimport YAML from 'js-yaml';\n\nimport APIValidation from 'AppData/APIValidation';\nimport API from 'AppData/api';\nimport MCPServer from 'AppData/MCPServer';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\nimport Utils from 'AppData/Utils';\nimport {  \n    getLinterResultsFromContent } from \"../../../Details/APIDefinition/Linting/Linting\";\nimport ValidationResults from './ValidationResults';\n\nconst PREFIX = 'ProvideOpenAPI';\n\nconst classes = {\n    mandatoryStar: `${PREFIX}-mandatoryStar`\n};\n\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.mandatoryStar}`]: {\n        color: theme.palette.error.main,\n    }\n}));\n\n/**\n * Sub component of API Create using OpenAPI UI, This is handling the taking input of WSDL file or URL from the user\n * In the create API using OpenAPI wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideOpenAPI(props) {\n    const { apiInputs, inputsDispatcher, onValidate, onLinterLineSelect, isMCPServer } = props;\n    const isFileInput = apiInputs.inputType === 'file';\n    const { inputType, inputValue } = apiInputs;\n\n    // If valid value is `null`,that means valid, else an error object will be there\n    const [isValid, setValidity] = useState({});\n    const [linterResults, setLinterResults] = useState ([]);\n    const [validationErrors, setValidationErrors] = useState([]);\n    const [isValidating, setIsValidating] = useState(false);\n    const [isLinting, setIsLinting] = useState(false);\n    \n    const intl = useIntl();\n\n    function lint(content) {\n        // Validate and linting\n        setIsLinting(true);\n        getLinterResultsFromContent(content, null, 'HTTP').then((results)=>{\n            if (results) {\n                setLinterResults(results);\n            } else {\n                setLinterResults([]);\n            }\n        }).finally(()=>{setIsLinting(false);});\n    }\n\n    function reset() {\n        setIsLinting(false);\n        setLinterResults([]);\n        setValidationErrors([]);\n        inputsDispatcher({ action: 'importingContent', value: null });\n        inputsDispatcher({ action: 'inputValue', value: null });\n        inputsDispatcher({ action: 'isFormValid', value: false });\n    }\n\n    function hasJSONStructure (definition) {\n        if (typeof definition !== 'string') return false;\n        try {\n            const result = JSON.parse(definition);\n            return result && typeof result === 'object';\n        } catch (err) {\n            console.log(\"API definition is in not in JSON format\");\n            return false;\n        }\n    }\n\n    const validateURLDebounced = useCallback(\n        debounce((newURL) => { // Example: https://codesandbox.io/s/debounce-example-l7fq3?file=/src/App.js\n            if (isMCPServer) {\n                MCPServer.validateOpenAPIByUrl(newURL, { returnContent: true }).then((response) => {\n                    const {\n                        body: {\n                            isValid: isValidURL, info, content, errors,\n                        },\n                    } = response;\n                    if (isValidURL) {\n                        let formattedContent;\n                        if (hasJSONStructure(content)) {\n                            formattedContent = JSON.stringify(JSON.parse(content), null, 2);\n                        } else {\n                            formattedContent = JSON.stringify(YAML.load(content), null, 2);\n                        }\n                        lint(formattedContent);\n                        inputsDispatcher({ action: 'importingContent', value: formattedContent });\n                        info.content = content;\n                        // Store operations if available in the response (we only need target and verb)\n                        if (info.operations) {\n                            const filteredOperations = info.operations.map(op => ({\n                                id: Utils.generateUUID(),\n                                target: op.target,\n                                verb: op.verb\n                            }));\n                            inputsDispatcher({ action: 'operations', value: filteredOperations });\n                        }\n                        inputsDispatcher({ action: 'preSetAPI', value: info });\n                        setValidity({ ...isValid, url: null });\n                        setValidationErrors([]);\n                    } else {\n                        setValidity({ ...isValid, url: { message: intl.formatMessage({\n                            id: 'Apis.Create.OpenAPI.create.api.openapi.content.validation.failed',\n                            defaultMessage: 'OpenAPI content validation failed!'\n                        }) } });\n                        setValidationErrors(errors);\n                    }\n                    onValidate(isValidURL);\n                    setIsValidating(false);\n                }).catch((error) => {\n                    setValidity({ url: { message: error.message } });\n                    onValidate(false);\n                    setIsValidating(false);\n                    console.error(error);\n                });\n            } else {\n                API.validateOpenAPIByUrl(newURL, { returnContent: true }).then((response) => {\n                    const {\n                        body: {\n                            isValid: isValidURL, info, content, errors,\n                        },\n                    } = response;\n                    if (isValidURL) {\n                        let formattedContent;\n                        if (hasJSONStructure(content)) {\n                            formattedContent = JSON.stringify(JSON.parse(content), null, 2);\n                        } else {\n                            formattedContent = JSON.stringify(YAML.load(content), null, 2);\n                        }\n                        lint(formattedContent);\n                        inputsDispatcher({ action: 'importingContent', value: formattedContent});\n                        info.content = content;\n                        inputsDispatcher({ action: 'preSetAPI', value: info });\n                        setValidity({ ...isValid, url: null });\n                        setValidationErrors([]);\n                    } else {\n                        setValidity({ ...isValid, url: { message: intl.formatMessage({\n                            id: 'Apis.Create.OpenAPI.create.api.openapi.content.validation.failed',\n                            defaultMessage: 'OpenAPI content validation failed!'\n                        }) } });\n                        setValidationErrors(errors);\n                    }\n                    onValidate(isValidURL);\n                    setIsValidating(false);\n                }).catch((error) => {\n                    setValidity({ url: { message: error.message } });\n                    onValidate(false);\n                    setIsValidating(false);\n                    console.error(error);\n                    \n                });\n            }\n        }, 750),\n        [],\n    );\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        setIsValidating(true);\n\n        // Why `files.pop()` below is , We only handle one OpenAPI file at a time,\n        // So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        const file = files.pop();\n        let validFile = null;\n        if (isMCPServer) {\n            MCPServer.validateOpenAPIByFile(file)\n                .then((response) => {\n                    const {\n                        body: { isValid: isValidFile, info, errors },\n                    } = response;\n                    if (isValidFile) {\n                        validFile = file;\n                        inputsDispatcher({ action: 'preSetAPI', value: info });\n                        setValidity({ ...isValid, file: null });\n                    } else {\n                        setValidity({\n                            ...isValid, file: {\n                                message: intl.formatMessage({\n                                    id: 'Apis.Create.OpenAPI.create.api.openapi.content.validation.failed',\n                                    defaultMessage: 'OpenAPI content validation failed!'\n                                })\n                            }\n                        });\n                        setValidationErrors(errors);\n                    }\n                })\n                .catch((error) => {\n                    setValidity({\n                        ...isValid, file: {\n                            message: intl.formatMessage({\n                                id: 'Apis.Create.OpenAPI.create.api.openapi.content.validation.failed',\n                                defaultMessage: 'OpenAPI content validation failed!'\n                            })\n                        }\n                    });\n                    console.error(error);\n                })\n                .finally(() => {\n                    setIsValidating(false); // Stop the loading animation\n                    onValidate(validFile !== null); // If there is a valid file then validation has passed\n                    // If the given file is valid , we set it as the inputValue else set `null`\n                    inputsDispatcher({ action: 'inputValue', value: file });\n                });\n        } else {\n            API.validateOpenAPIByFile(file)\n                .then((response) => {\n                    const {\n                        body: { isValid: isValidFile, info, errors },\n                    } = response;\n                    if (isValidFile) {\n                        validFile = file;\n                        inputsDispatcher({ action: 'preSetAPI', value: info });\n                        setValidity({ ...isValid, file: null });\n                    } else {\n                        setValidity({\n                            ...isValid, file: {\n                                message: intl.formatMessage({\n                                    id: 'Apis.Create.OpenAPI.create.api.openapi.content.validation.failed',\n                                    defaultMessage: 'OpenAPI content validation failed!'\n                                })\n                            }\n                        });\n                        setValidationErrors(errors);\n                    }\n                })\n                .catch((error) => {\n                    setValidity({\n                        ...isValid, file: {\n                            message: intl.formatMessage({\n                                id: 'Apis.Create.OpenAPI.create.api.openapi.content.validation.failed',\n                                defaultMessage: 'OpenAPI content validation failed!'\n                            })\n                        }\n                    });\n                    console.error(error);\n                })\n                .finally(() => {\n                    setIsValidating(false); // Stop the loading animation\n                    onValidate(validFile !== null); // If there is a valid file then validation has passed\n                    // If the given file is valid , we set it as the inputValue else set `null`\n                    inputsDispatcher({ action: 'inputValue', value: file });\n                });\n\n            if (!file.path.endsWith(\".zip\")){\n                const read = new FileReader();\n                read.readAsText(file);\n                read.onloadend = function(){\n                    const content = read.result?.toString();\n                    inputsDispatcher({ action: 'importingContent', value: content });\n                    lint(content);\n                }\n            }\n        }\n    }\n\n    /**\n     * Trigger the provided onValidate call back on each input validation run\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {Object} state Validation state object returned from Joi `.validate()` method\n     */\n    function validateURL(value) {\n        const state = APIValidation.url.required().validate(value).error;\n        // State `null` means URL is valid, We do backend validation only if it's a valid URL\n        if (state === null) {\n            setIsValidating(true);\n            validateURLDebounced(apiInputs.inputValue);\n            // Valid URL string\n            // TODO: Handle catch network or api call failures ~tmkb\n        } else {\n            setValidity({ ...isValid, url: state });\n            onValidate(false);\n        }\n    }\n\n    useEffect(() => {\n        reset();\n    }, [inputType]);\n\n    useEffect(() => {\n        if (inputValue && inputType === ProvideOpenAPI.INPUT_TYPES.FILE) {\n            onDrop([inputValue]);\n        }\n    }, [inputType, inputValue]);\n\n    // TODO: Use validation + input to separate component that can be share with wsdl,swagger,graphql URL inputs ~tmkb\n    const isInvalidURL = Boolean(isValid.url);\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isValid.url !== undefined) {\n        if (isInvalidURL) {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <ErrorOutlineIcon fontSize='large' color='error' />\n                </InputAdornment>\n            );\n        } else {\n            urlStateEndAdornment = (\n                <InputAdornment position='end' id='url-validated'>\n                    <CheckIcon fontSize='large' color='primary' />\n                </InputAdornment>\n            );\n        }\n    }\n\n    return (\n        <Root>\n            <Grid container>\n                <Grid item xs={12} sx={{ mb: 2 }}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input Source'\n                            value={apiInputs.inputType}\n                            onChange={(event) => inputsDispatcher({ action: 'inputType', \n                                value: event.target.value })}\n                        >\n                            <FormControlLabel\n                                disabled={isLinting || isValidating}\n                                value={ProvideOpenAPI.INPUT_TYPES.URL}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.OpenAPI.create.api.form.url.label',\n                                    defaultMessage: 'OpenAPI URL',\n                                })}\n                                id='open-api-url-select-radio'\n                            />\n                            <FormControlLabel\n                                disabled={isLinting || isValidating}\n                                value={ProvideOpenAPI.INPUT_TYPES.FILE}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.OpenAPI.create.api.form.file.label',\n                                    defaultMessage: 'OpenAPI File/Archive',\n                                })}\n                                aria-label='OpenAPI File/Archive'\n                                id='open-api-file-select-radio'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={12}>\n                    {isFileInput ? (\n                        <>\n                            {apiInputs.inputValue ? (\n                                <List>\n                                    <ListItem key={apiInputs.inputValue.path}>\n                                        <ListItemAvatar>\n                                            <Avatar>\n                                                <InsertDriveFile />\n                                            </Avatar>\n                                        </ListItemAvatar>\n                                        <ListItemText\n                                            primary={`${apiInputs.inputValue.path} -\n                                    ${humanFileSize(apiInputs.inputValue.size)}`}\n                                        />\n                                        <ListItemSecondaryAction>\n                                            <IconButton edge='end' aria-label='delete' onClick={reset} size='large'>\n                                                <DeleteIcon />\n                                            </IconButton>\n                                        </ListItemSecondaryAction>\n                                    </ListItem>\n                                </List>\n                            ) : (\n                                <DropZoneLocal\n                                    error={isValid.file}\n                                    onDrop={onDrop}\n                                    files={apiInputs.inputValue}\n                                    accept='.bz,.bz2,.gz,.rar,.tar,.zip,.7z,.json,application/json,.yaml'\n                                >\n                                    {isValidating ? (<CircularProgress />)\n                                        : ([\n                                            <FormattedMessage\n                                                id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.file.dropzone'\n                                                defaultMessage={'Drag & Drop Open API File/Archive '\n                                                 + 'here {break} or {break} Browse files'}\n                                                values={{ break: <br /> }}\n                                            />,\n                                            <Button\n                                                color='primary'\n                                                variant='contained'\n                                                id='browse-to-upload-btn'\n                                                onClick={ reset }\n                                                sx={{ mt: 1 }}\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Create.OpenAPI.Steps.ProvideOpenAPI.Input.file.upload'\n                                                    defaultMessage='Browse File to Upload'\n                                                />\n                                            </Button>,\n                                        ]\n                                        )}\n                                </DropZoneLocal>\n                            )}\n                        </>\n                    ) : (\n                        <TextField\n                            autoFocus\n                            id='outlined-full-width'\n                            label={intl.formatMessage({\n                                id: 'Apis.Create.OpenAPI.create.api.url.label',\n                                defaultMessage: 'OpenAPI URL',\n                            })}\n                            placeholder={intl.formatMessage({\n                                id: 'Apis.Create.OpenAPI.create.api.url.placeholder',\n                                defaultMessage: 'Enter OpenAPI URL',\n                            })}\n                            fullWidth\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                            value={apiInputs.inputValue}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            InputProps={{\n                                onBlur: ({ target: { value } }) => {\n                                    validateURL(value);\n                                },\n                                endAdornment: urlStateEndAdornment,\n                            }}\n                            // 'Give the URL of OpenAPI endpoint'\n                            helperText={(isValid.url && isValid.url.message)\n                                || (\n                                    <FormattedMessage\n                                        id='Apis.Create.OpenAPI.create.api.url.helper.text'\n                                        defaultMessage='Click away to validate the URL'\n                                    />\n                                )}\n                            error={isInvalidURL}\n                            data-testid='swagger-url-endpoint'\n                        />\n                    )}\n                </Grid>\n                <ValidationResults \n                    inputValue={inputValue} \n                    isValidating={isValidating}\n                    isLinting={isLinting}\n                    validationErrors={validationErrors}\n                    linterResults={linterResults}\n                    onLinterLineSelect={onLinterLineSelect}\n                />\n                <Grid item xs={2} md={5} />\n            </Grid>\n        </Root>\n    );\n}\n\nProvideOpenAPI.defaultProps = {\n    onValidate: () => { },\n    isMCPServer: false,\n};\nProvideOpenAPI.INPUT_TYPES = {\n    URL: 'url',\n    FILE: 'file',\n};\nProvideOpenAPI.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        inputValue: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n    isMCPServer: PropTypes.bool,\n};\n","/* eslint-disable */\n/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n *\n * This software is the property of WSO2 Inc. and its suppliers, if any.\n * Dissemination of any information or reproduction of any material contained\n * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n * the WSO2 Commercial License available at http://wso2.com/licenses.\n * For specific language governing the permissions and limitations under\n * this license, please see the license as well as any agreement you’ve\n * entered into with WSO2 governing the purchase of this software and any\n * associated services.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    ISpectralDiagnostic,\n} from '@stoplight/spectral-core';\nimport { oas } from '@stoplight/spectral-rulesets';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@mui/material/Box';\nimport { spectralSeverityMap, spectralSeverityNames } from \"./Linting\"\nimport { Grid, Tooltip, Typography } from '@mui/material';\nimport { ToggleButton, ToggleButtonGroup } from '@mui/lab';\nconst PREFIX = 'APILintingSummary';\n\nconst classes = {\n    activeButton: `${PREFIX}-activeButton`\n};\n\nconst StyledBox = styled(Box)((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.activeButton}`]: {\n        \"&:selected\": {\n            backgroundColor: theme.palette.background.default,\n        }\n    }\n}));\n\n// TODO tmkasun: Possible to extend AsyncAPI rule set as well\nconst defaultRuleSet = { extends: [oas], rules: {} };\ntype APILintingProps = {\n    linterResults: ISpectralDiagnostic[],\n    handleChange: Function,\n};\n\nexport const APILintingSummary = (props: APILintingProps) => {\n    const { linterResults, handleChange } = props;\n\n    const [selectedSeverity, setSelectedSeverity] = useState(null);\n    const severityCounts: { [key: number]: number } = {};\n    \n    if (linterResults) {\n        linterResults.forEach(({ severity }) => {\n            severityCounts[severity] = severityCounts[severity] + 1 || 1;\n        });\n    }\n    \n    return (\n        <StyledBox ml={3}>\n            {linterResults === null && (\n                <FormattedMessage\n                    id=\"Apis.Details.APIDefinition.Linting.APILintingSummary.loading\"\n                    defaultMessage=\"Linting . . .\"\n                />\n            )}\n            {linterResults && (\n                <Tooltip title={\n                    Object.entries(spectralSeverityNames).map(([severity, name]) => {\n                        return `${name}:${severityCounts[Number(severity)]||0}${(Number(severity) !== 3) ? \", \": \"\"}` || '-';\n                    })\n                }>\n                    <ToggleButtonGroup\n                        exclusive\n                        value={selectedSeverity}\n                        size=\"small\"\n                        onChange={(event, value) => { \n                            setSelectedSeverity(value);\n                            handleChange(event, value) }}>\n                        {Object.entries(spectralSeverityMap).map(([severity, component]) => (\n                            <ToggleButton\n                                key={Math.random()}\n                                value={String(severity)}\n                            >\n                                <Box ml={1} display=\"flex\">\n                                    {component}\n                                    <Grid item>\n                                        <Box maxWidth='2rem'>\n                                            <Typography noWrap>\n                                                &nbsp;{severityCounts[Number(severity)] || 0}\n                                            </Typography>\n                                        </Box>\n                                    </Grid>\n                                </Box>\n                            </ToggleButton>\n                        ))}\n                    </ToggleButtonGroup>\n                </Tooltip>\n            )}\n        </StyledBox>\n    );\n};\nexport default APILintingSummary;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Radio from '@mui/material/Radio';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton from '@mui/material/IconButton';\nimport InsertDriveFile from '@mui/icons-material/InsertDriveFile';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport CheckIcon from '@mui/icons-material/Check';\n\nimport APIValidation from 'AppData/APIValidation';\nimport Wsdl from 'AppData/Wsdl';\nimport Banner from 'AppComponents/Shared/Banner';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\n\nconst PREFIX = 'ProvideWSDL';\n\nconst classes = {\n    mandatoryStar: `${PREFIX}-mandatoryStar`\n};\n\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.mandatoryStar}`]: {\n        color: theme.palette.error.main,\n    }\n}));\n\n/**\n * Sub component of API Create using WSDL UI, This is handling the taking input of WSDL file or URL from the user\n * In the create API using WSDL wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideWSDL(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const isFileInput = apiInputs.inputType === 'file';\n    const isGenerateRESTAPI = apiInputs.type === 'SOAPTOREST';\n\n    const [isError, setValidity] = useState(); // If valid value is `null` else an error object will be there\n    const [isValidating, setIsValidating] = useState(false);\n    const isCreateMode = apiInputs.mode === 'create';\n\n    const intl = useIntl();\n    /**\n     * Handles WSDL validation response and returns the state.\n     *\n     * @param {*} response WSDL validation response\n     * @param {string} type of the input; file or url\n     * @returns {boolean} validation status\n     */\n    function handleWSDLValidationResponse(response, type) {\n        const isWSDLValid = response.body.isValid;\n        let success = false;\n        if (isWSDLValid) {\n            if (type === 'file') {\n                setValidity({ ...isError, file: null });\n            } else {\n                setValidity({ ...isError, url: null });\n            }\n            success = true;\n        } else if (type === 'file') {\n            setValidity({\n                ...isError, file: {\n                    message: intl.formatMessage({\n                        id: 'Apis.Create.WSDL.content.validation.file.failed',\n                        defaultMessage: 'WSDL content validation failed!',\n                    }),\n                }\n            });\n        } else {\n            setValidity({\n                ...isError, url: {\n                    message: intl.formatMessage({\n                        id: 'Apis.Create.WSDL.content.validation.url.failed',\n                        defaultMessage: 'Invalid WSDL URL!',\n                    }),\n                }\n            });\n        }\n        onValidate(isWSDLValid);\n        setIsValidating(false);\n        return success;\n    }\n\n    /**\n     * Handles WSDL validation error response.\n     *\n     * @param error {*} error object\n     * @param type {string} file/url type\n     */\n    function handleWSDLValidationErrorResponse(error, type) {\n        let message = intl.formatMessage({\n            id: 'Apis.Create.WSDL.validation.error.response',\n            defaultMessage: 'Error occurred during validation',\n        });\n        if (error.response && error.response.body.description) {\n            message = error.response.body.description;\n        }\n        if (type === 'file') {\n            setValidity({ ...isError, file: { message } });\n        } else {\n            setValidity({ ...isError, url: { message } });\n        }\n        setIsValidating(false);\n    }\n\n    /**\n     * Trigger the onValidate call back after validating WSDL url from the state.\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {Object} state Validation state object\n     */\n    function validateUrl(state) {\n        if (state === null) {\n            setIsValidating(true);\n            Wsdl.validateUrl(apiInputs.inputValue).then((response) => {\n                handleWSDLValidationResponse(response, 'url');\n            }).catch((error) => {\n                handleWSDLValidationErrorResponse(error, 'url');\n            });\n        } else {\n            setValidity({ ...isError, url: state });\n            onValidate(false);\n        }\n    }\n\n    /**\n     * Trigger the provided onValidate callback after validating the provided WSDL file.\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {*} file WSDL file or archive\n     * @param {Object} state Validation state object\n     */\n    function validateFileOrArchive(file, state = null) {\n        if (state === null) {\n            setIsValidating(true);\n            Wsdl.validateFileOrArchive(file).then((response) => {\n                if (handleWSDLValidationResponse(response, 'file')) {\n                    inputsDispatcher({ action: 'inputValue', value: file });\n                }\n            }).catch((error) => {\n                handleWSDLValidationErrorResponse(error, 'file');\n            });\n        } else {\n            setValidity({ ...isError, file: state });\n            onValidate(false);\n        }\n    }\n\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        // Why `files[0]` below is , We only handle one wsdl file at a time, So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        validateFileOrArchive(files[0]);\n    }\n\n    /**\n     *  Render uploaded WSDL schema list\n     */\n    function renderUploadedList() {\n        return (\n            <List>\n                <ListItem key={apiInputs.inputValue.path}>\n                    <ListItemAvatar>\n                        <Avatar>\n                            <InsertDriveFile />\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText\n                        primary={`${apiInputs.inputValue.path} - ${humanFileSize(apiInputs.inputValue.size)}`}\n                    />\n                    <ListItemSecondaryAction>\n                        <IconButton\n                            edge='end'\n                            aria-label='delete'\n                            onClick={() => {\n                                inputsDispatcher({ action: 'inputValue', value: null });\n                                inputsDispatcher({ action: 'isFormValid', value: false });\n                            }}\n                            size='large'>\n                            <DeleteIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </ListItem>\n            </List>\n        );\n    }\n\n    const dropBoxControlLabel = isGenerateRESTAPI ? (\n        <FormattedMessage\n            id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.dropzone'\n            defaultMessage='Drag & Drop WSDL file {break} -or-'\n            values={{ break: <br /> }}\n        />\n    ) : (\n        <FormattedMessage\n            id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.archive.dropzone'\n            defaultMessage='Drag & Drop WSDL file/archive {break} -or-'\n            values={{ break: <br /> }}\n        />\n    );\n\n    /**\n     * Render file upload UI.\n     *\n     */\n    function renderFileUpload() {\n        if (apiInputs.inputValue) {\n            return renderUploadedList();\n        }\n        // TODO: Pass message saying accepting only one file ~tmkb\n        return (\n            <DropZoneLocal\n                error={isError && isError.file}\n                onDrop={onDrop}\n                files={apiInputs.inputValue}\n                accept='.bz,.bz2,.gz,.rar,.tar,.zip,.7z,.wsdl'\n            >\n                {isValidating ? (<CircularProgress />)\n                    : (\n                        (<Root>\n                            { dropBoxControlLabel }\n                            <Button\n                                color='primary'\n                                variant='contained'\n                            >\n                                <FormattedMessage\n                                    id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.file.upload'\n                                    defaultMessage='Browse File to Upload'\n                                />\n                            </Button>\n                        </Root>)\n                    )}\n            </DropZoneLocal>\n        );\n    }\n\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isError && isError.url) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <ErrorOutlineIcon fontSize='large' color='error' />\n            </InputAdornment>\n        );\n    } else if (isError && !isError.url) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CheckIcon fontSize='large' color='primary' />\n            </InputAdornment>\n        );\n    }\n\n    return (\n        <>\n            <Grid container spacing={5}>\n                {isCreateMode\n                && (\n                    <Grid item md={12}>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>\n                                <>\n                                    <sup className={classes.mandatoryStar}>*</sup>\n                                    {' '}\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.implementation.type'\n                                        defaultMessage='Implementation Type'\n                                    />\n                                </>\n                            </FormLabel>\n                            <RadioGroup\n                                aria-label='Implementation type'\n                                value={apiInputs.type ? apiInputs.type : 'SOAP'}\n                                onChange={\n                                    (event) => {\n                                        inputsDispatcher({ action: 'type', value: event.target.value });\n                                        inputsDispatcher({ action: 'isFormValid', value: false });\n                                        inputsDispatcher({ action: 'inputValue', value: null });\n                                        inputsDispatcher({ action: 'inputType', value: 'url' });\n                                    }\n                                }\n                            >\n                                <FormControlLabel\n                                    value='SOAP'\n                                    control={<Radio color='primary' />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Create.WSDL.Steps.ProvideWSDL.passthrough.label'\n                                            defaultMessage='Pass Through'\n                                        />\n                                    )}\n                                />\n                                <FormControlLabel\n                                    value='SOAPTOREST'\n                                    control={<Radio color='primary' />}\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Create.WSDL.Steps.ProvideWSDL.SOAPtoREST.label'\n                                            defaultMessage='Generate REST APIs'\n                                        />\n                                    )}\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                    </Grid>\n                )}\n                <Grid item md={12}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.WSDL.Steps.ProvideWSDL.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input type'\n                            value={apiInputs.inputType}\n                            onChange={(event) => inputsDispatcher({ action: 'inputType', value: event.target.value })}\n                        >\n                            <FormControlLabel\n                                value='url'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.url.label'\n                                        defaultMessage='WSDL URL'\n                                    />\n                                )}\n                            />\n                            <FormControlLabel\n                                value='file'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Create.WSDL.Steps.ProvideWSDL.file.label.wsdl.file.archive'\n                                        defaultMessage='WSDL File/Archive'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                {isError && isError.file\n                    && (\n                        <Grid item md={11}>\n                            <Banner\n                                onClose={() => setValidity({ file: null })}\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='error'\n                                message={isError.file.message}\n                            />\n                        </Grid>\n                    )}\n                <Grid item md={11}>\n                    {isFileInput ? renderFileUpload()\n                        : (\n                            <TextField\n                                autoFocus\n                                id='outlined-full-width'\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.WSDL.url.label',\n                                    defaultMessage: 'WSDL URL',\n                                })}\n                                placeholder={intl.formatMessage({\n                                    id: 'Apis.Create.WSDL.url.placeholder',\n                                    defaultMessage: 'Enter WSDL URL',\n                                })}\n                                fullWidth\n                                margin='normal'\n                                variant='outlined'\n                                onChange={({ target: { value } }) => inputsDispatcher({ action: 'inputValue', value })}\n                                value={apiInputs.inputValue}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                InputProps={{\n                                    onBlur: ({ target: { value } }) => {\n                                        validateUrl(APIValidation.url.required().validate(value).error);\n                                    },\n                                    endAdornment: urlStateEndAdornment,\n                                }}\n                                helperText={\n                                    (isError && isError.url && isError.url.message)\n                                    || intl.formatMessage({\n                                        id: 'Apis.Create.WSDL.url.helper.text',\n                                        defaultMessage: 'Click away to validate the URL',\n                                    })\n                                }\n                                error={isError && Boolean(isError.url)}\n                                disabled={isValidating}\n                            />\n                        )}\n\n                </Grid>\n            </Grid>\n        </>\n    );\n}\n\nProvideWSDL.defaultProps = {\n    onValidate: () => { },\n};\nProvideWSDL.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        mode: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n","/*\n * Copyright (c) 2022, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.\n *\n * This software is the property of WSO2 Inc. and its suppliers, if any.\n * Dissemination of any information or reproduction of any material contained\n * herein is strictly forbidden, unless permitted by WSO2 in accordance with\n * the WSO2 Commercial License available at http://wso2.com/licenses.\n * For specific language governing the permissions and limitations under\n * this license, please see the license as well as any agreement you’ve\n * entered into with WSO2 governing the purchase of this software and any\n * associated services.\n */\n\nimport React from 'react';\nimport API from 'AppData/api.js';\nimport {\n    Spectral,\n    ISpectralDiagnostic,\n} from '@stoplight/spectral-core';\nimport *  as spectralFunc from \"@stoplight/spectral-functions\";\nimport * as spectralFormats from \"@stoplight/spectral-formats\";\nimport { oas } from '@stoplight/spectral-rulesets';\nimport { green, orange } from '@mui/material/colors';\nimport WarningIcon from '@mui/icons-material/Warning';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport InfoIcon from '@mui/icons-material/Info';\nimport HelpOutlineIcon from '@mui/icons-material/HelpOutline';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage } from 'react-intl';\n\n/** @type DiagnosticSeverity \n * \n * \nSomething not allowed by the rules of a language or other means.\n    Error = 0,\nSomething suspicious but allowed.\n    Warning = 1,\nSomething to inform about but not a problem.\n    Information = 2,\nSomething to hint to a better way of doing it, like proposing a refactoring.\n    Hint = 3\n*/\n\nconst spectralFunctions: { [key: string]: any } = {\n    \"alphabetical\": spectralFunc.alphabetical,\n    \"casing\": spectralFunc.casing,\n    \"defined\": spectralFunc.defined,\n    \"enumeration\": spectralFunc.enumeration,\n    \"falsy\": spectralFunc.falsy,\n    \"length\": spectralFunc.length,\n    \"pattern\": spectralFunc.pattern,\n    \"truthy\": spectralFunc.truthy,\n    \"undefined\": spectralFunc.undefined,\n    \"unreferencedReusableObject\": spectralFunc.unreferencedReusableObject,\n    \"xor\": spectralFunc.xor,\n    \"schema\": spectralFunc.schema,\n}\n\nconst spectralFormatsList: { [key: string]: any } = {\n    \"oas2\": spectralFormats.oas2,\n    \"oas3\": spectralFormats.oas3,\n    \"oas3_0\": spectralFormats.oas3_0,\n    \"oas3_1\": spectralFormats.oas3_1,\n    \"aas2\": spectralFormats.aas2,\n    \"aas2_0\": spectralFormats.aas2_0,\n    \"aas2_1\": spectralFormats.aas2_1,\n    \"aas2_2\": spectralFormats.aas2_2,\n    \"aas2_3\": spectralFormats.aas2_3,\n    \"aas2_4\": spectralFormats.aas2_4,\n    \"aas2_5\": spectralFormats.aas2_5,\n    \"aas2_6\": spectralFormats.aas2_6,\n}\n\nexport const spectralSeverityMap: { [key: number]: JSX.Element } = {\n    0: <ErrorIcon color=\"error\" />,\n    1: <WarningIcon style={{ color: orange[500] }} />,\n    2: <InfoIcon color=\"primary\" />,\n    3: <HelpOutlineIcon style={{ color: green[500] }} />,\n};\n\nexport const spectralSeverityNames: { [key: number]: string } = {\n    0: \"Errors\",\n    1: \"Warnings\",\n    2: \"Info\",\n    3: \"Hints\"\n};\n\nexport async function getLinterResultsFromContent(\n    swagger: string | undefined,\n    apiId?: string,\n    apiType?: string\n) {\n    let validationResults: ISpectralDiagnostic[] = [];\n    if (swagger) {\n        // Validate againt default ruleset by Spectral\n        let defaultRuleSet = { extends: [oas], rules: {} };\n        const linter = new Spectral();\n        linter.setRuleset(defaultRuleSet);\n        try {\n            await linter.run(swagger).then((results) => {\n                if (results) {\n                    validationResults = validationResults.concat(results);\n                }\n            });\n        } catch (err) {\n            console.error(\"OpenAPI linter default ruleset validation failed\", err);\n            Alert.error(\n                <FormattedMessage\n                    id='Apis.Details.APIDefinition.Linting.Linting.default.ruleset.validation.failed'\n                    defaultMessage='OpenAPI linter default ruleset validation failed'\n                />\n            );\n        }\n\n        let params = {};\n        if (apiId) {\n            params = { apiId: apiId };\n        } else if (apiType) {\n            params = { apiType: apiType };\n        } else {\n            params = { apiType: 'HTTP' };\n        }\n\n        // Validate against custom rulesets defined in tenant config\n        const customRulesets: string[] = await API.getLinterCustomRules(params).then((LinterCustomRulesets: string[]) => {\n            return LinterCustomRulesets;\n        }).catch((error: any) => {\n            console.log(\"Error retrieving custom linter rulesets\", error);\n            Alert.error(\n                <FormattedMessage\n                    id='Apis.Details.APIDefinition.Linting.Linting.error.retrieving.custom.rules'\n                    defaultMessage='Error retrieving custom linter rulesets'\n                />);\n            return [];\n        });\n\n        // Process each custom ruleset\n        if (customRulesets && customRulesets.length > 0) {\n            for (const rulesetString of customRulesets) {\n                try {\n                    // Parse JSON to JS object to support spectral\n                    const parsedCustomRuleset = JSON.parse(\n                        JSON.stringify(JSON.parse(rulesetString)),\n                        function (key, value) {\n                            if (key === \"function\") {\n                                return spectralFunctions[value];\n                            } else if (key === \"formats\") {\n                                return value.map((element: string) => {\n                                    return spectralFormatsList[element];\n                                });\n                            } else {\n                                return value;\n                            }\n                        }\n                    );\n\n                    linter.setRuleset(parsedCustomRuleset);\n\n                    const results = await linter.run(swagger);\n                    if (results) {\n                        validationResults = validationResults.concat(results);\n                    }\n                } catch (error) {\n                    if (error instanceof Error) {\n                        console.error(\"OpenAPI linter custom ruleset validation failed\\n\", error, error.stack);\n                    }\n                    Alert.error(\n                        <FormattedMessage\n                            id='Apis.Details.APIDefinition.Linting.Linting.custom.ruleset.validation.failed'\n                            defaultMessage='OpenAPI linter custom ruleset validation failed'\n                        />\n                    );\n                }\n            }\n        }\n\n        // Sort linter results order based on severity\n        validationResults = validationResults.sort(function compare(a, b) {\n            if (a.severity < b.severity) {\n                return -1;\n            }\n            if (a.severity > b.severity) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n    return validationResults;\n}\n","/*\n * Copyright (c) 2025, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 LLC. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport {\n    RadioGroup,\n    FormControlLabel,\n    FormControl,\n    Radio,\n    FormLabel,\n    TableContainer,\n    Table,\n    Paper,\n    TableRow,\n    TableCell,\n    TableBody,\n    Grid,\n    CircularProgress,\n    TableHead,\n    Typography,\n    Chip,\n} from '@mui/material';\nimport APIClientFactory from 'AppData/APIClientFactory';\nimport Utils from 'AppData/Utils';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { useIntl, FormattedMessage} from 'react-intl';\n\n/**\n * This component fetches Solace Event API Products containing a single Solace Event API, and allows to choose one.\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nconst SolaceEventAPIProductFetcher = (props) => {\n    const { apiInputs, inputsDispatcher, onSolaceEventApiSelect } = props;\n    const [eventApis, setEventApis] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const intl = useIntl();\n\n    useEffect(() => {\n        setLoading(true);\n        const apiClient =\n            new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT).client;\n        apiClient.then((client) => {\n            client.apis['Integrated APIs'].getIntegratedAPIs({ vendor: 'solace' })\n                .then((response) => {\n                    setEventApis(response.body);\n                })\n                .catch((error) => {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Create.AsyncAPI.SolaceEventApiProductFetcher.fetchError',\n                        defaultMessage: 'Error occurred while fetching Solace Event API Products',\n                    }));                    \n                    console.error(error);\n                })\n                .finally(() => {\n                    setLoading(false);\n                });\n        });\n    }, []);\n\n    function handleOnBlur(value) {\n        const [solaceEventApiProductId, solacePlanId, solaceEventApiId] = value.split('/');\n        onSolaceEventApiSelect(solaceEventApiProductId, solacePlanId, solaceEventApiId);\n        inputsDispatcher({action: 'isFormValid', value: true});\n    }\n\n    function returnEventApis() {\n        if (eventApis.length === 0) {\n            return (\n                <Typography>\n                    <FormattedMessage\n                        id='Apis.Create.AsyncAPI.SolaceEventApiProductFetcher.noApisAvailable'\n                        defaultMessage='No Solace Event API Products containing a single Solace Event API are available'\n                    />\n                </Typography>\n            );\n        }\n        return (\n            <RadioGroup\n                value={apiInputs.inputValue}\n                onChange={({target: {value}}) =>\n                    inputsDispatcher({action: 'inputValue', value})}\n                onBlur={({target: {value}}) => handleOnBlur(value)}\n            >\n                <FormControl>\n                    <FormLabel sx={{ mb: 2 }}>Select the Solace Event API</FormLabel>\n                    <TableContainer component={Paper}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>\n                                        {intl.formatMessage({\n                                            id: 'Apis.Create.AsyncAPI.SolaceEventApiProductFetcher.eventApi',\n                                            defaultMessage: 'Solace Event API',\n                                        })}\n                                    </TableCell>\n                                    <TableCell>\n                                        {intl.formatMessage({\n                                            id: 'Apis.Create.AsyncAPI.SolaceEventApiProductFetcher.plans',\n                                            defaultMessage: 'Solace Plans',\n                                        })}\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {eventApis.map((eventApi) => {\n                                    return (\n                                        <TableRow\n                                            key={eventApi.apiId}>\n                                            <TableCell>\n                                                <FormControlLabel\n                                                    control={<Radio/>}\n                                                    label={eventApi.apiName}\n                                                    value={eventApi.apiId}\n                                                />\n                                            </TableCell>\n                                            <TableCell>\n                                                {eventApi.plans.map(plan => (\n                                                    <Chip key={plan} label={plan} sx={{ mr: 0.5 }} />\n                                                ))}\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </FormControl>\n            </RadioGroup>\n        );\n    }\n\n    return (\n        <Grid container>\n            <Grid item xs={12}>\n                {loading ? <CircularProgress /> : returnEventApis()}\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default SolaceEventAPIProductFetcher;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { styled } from '@mui/material/styles';\nimport PropTypes from 'prop-types';\nimport Radio from '@mui/material/Radio';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport RadioGroup from '@mui/material/RadioGroup';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormControl from '@mui/material/FormControl';\nimport FormLabel from '@mui/material/FormLabel';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport CheckIcon from '@mui/icons-material/Check';\nimport ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';\nimport Button from '@mui/material/Button';\nimport List from '@mui/material/List';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport IconButton from '@mui/material/IconButton';\nimport InsertDriveFile from '@mui/icons-material/InsertDriveFile';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItemSecondaryAction from '@mui/material/ListItemSecondaryAction';\nimport ListItemText from '@mui/material/ListItemText';\n\nimport Banner from 'AppComponents/Shared/Banner';\nimport APIValidation from 'AppData/APIValidation';\nimport API from 'AppData/api';\nimport DropZoneLocal, { humanFileSize } from 'AppComponents/Shared/DropZoneLocal';\nimport CheckCircleSharpIcon from '@mui/icons-material/CheckCircleSharp';\nimport Chip from '@mui/material/Chip';\nimport SolaceEventAPIProductFetcher from 'AppComponents/Apis/Create/AsyncAPI/SolaceEventAPIProductFetcher';\nimport Alert from 'AppComponents/Shared/Alert';\nimport APIClientFactory from \"AppData/APIClientFactory\";\nimport Utils from 'AppData/Utils';\n\nconst PREFIX = 'ProvideAsyncAPI';\n\nconst classes = {\n    mandatoryStar: `${PREFIX}-mandatoryStar`\n};\n\n\nconst Root = styled('div')((\n    {\n        theme\n    }\n) => ({\n    [`& .${classes.mandatoryStar}`]: {\n        color: theme.palette.error.main,\n    }\n}));\n\n/**\n * Sub component of API Create using AsyncAPI UI, This is handling the taking input of WSDL file or URL from the user\n * In the create API using AsyncAPI wizard first step out of 2 steps\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function ProvideAsyncAPI(props) {\n    const { apiInputs, inputsDispatcher, onValidate } = props;\n    const isFileInput = apiInputs.inputType === 'file';\n    const { inputType, inputValue } = apiInputs;\n\n    // If valid value is `null`,that means valid, else an error object will be there\n    const [isValid, setValidity] = useState({});\n    const [isValidating, setIsValidating] = useState(false);\n    const [validationErrors, setValidationErrors] = useState([]);\n    const [gatewayVendor, setGatewayVendor] = useState('wso2');\n    const intl = useIntl();\n    /**\n     *\n     *\n     * @param {*} files\n     */\n    function onDrop(files) {\n        setIsValidating(true);\n\n        // Why `files.pop()` below is , We only handle one AsyncAPI file at a time,\n        // So if use provide multiple, We would only\n        // accept the first file. This information is shown in the dropdown helper text\n        const file = files.pop();\n        let validFile = null;\n        API.validateAsyncAPIByFile(file)\n            .then((response) => {\n                const {\n                    body: { isValid: isValidFile, info, errors },\n                } = response;\n                setGatewayVendor(info.gatewayVendor);\n                if (isValidFile) {\n                    validFile = file;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, file: null });\n                } else {\n                    // eslint-disable-next-line max-len\n                    setValidity({\n                        ...isValid, file: {\n                            message: intl.formatMessage({\n                                id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.content.'\n                                    + 'validation.failed',\n                                defaultMessage: 'AsyncAPI content validation failed! ',\n                            })\n                        }\n                    });\n                    setValidationErrors(errors);\n                }\n            })\n            .catch((error) => {\n                setValidity({\n                    ...isValid, file: {\n                        message: intl.formatMessage({\n                            id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.content.'\n                                + 'validation.failed',\n                            defaultMessage: 'AsyncAPI content validation failed! ',\n                        })\n                    }\n                });\n                console.error(error);\n            })\n            .finally(() => {\n                setIsValidating(false); // Stop the loading animation\n                onValidate(validFile !== null); // If there is a valid file then validation has passed\n                // If the given file is valid , we set it as the inputValue else set `null`\n                inputsDispatcher({ action: 'inputValue', value: validFile });\n            });\n    }\n\n    function handleSolaceEventApiSelect(solaceEventApiProductId, solacePlanId, solaceEventApiId) {\n        setIsValidating(true);\n        const apiClient =\n            new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(), Utils.CONST.API_CLIENT).client;\n        apiClient.then((client) => {\n            const params = {\n                eventApiProductId: solaceEventApiProductId,\n                planId: solacePlanId,\n                eventApiId: solaceEventApiId\n            };\n            const jsonString = JSON.stringify(params);\n            const urlEncodedString = encodeURIComponent(jsonString);\n            client.apis['Integrated APIs'].getIntegratedApiDefinition({\n                vendor: 'solace',\n                params: {\n                    params: urlEncodedString\n                }\n            })\n                .then((response) => {\n                    const asyncApiPayload = response.body;\n                    const asyncTransportProtocols = [];\n                    if (asyncApiPayload.servers) {\n                        Object.values(asyncApiPayload.servers).forEach((server) => {\n                            asyncTransportProtocols.push(server.protocol);\n                        });\n                    }\n\n                    const info = {\n                        asyncAPIVersion: asyncApiPayload.asyncapi,\n                        gatewayVendor: \"solace\",\n                        name: asyncApiPayload.info.title,\n                        version: asyncApiPayload.info.version,\n                        context: asyncApiPayload.info.title.replace(/[&/\\\\#,+()$~%.'\":*?<>{}\\s]/g, '').toLowerCase(),\n                        asyncTransportProtocols\n                    }\n                    inputsDispatcher({action: 'preSetAPI', value: info});\n                })\n                .catch((error) => {\n                    Alert.error(\"Error loading Event API Async API\");\n                    console.error(\"Error loading Event API Async API\", error);\n                })\n                .finally(() => {\n                    setIsValidating(false);\n                })\n        });\n    }\n\n    /**\n     * Trigger the provided onValidate call back on each input validation run\n     * Do the validation state aggregation and call the onValidate method with aggregated value\n     * @param {Object} state Validation state object returned from Joi `.validate()` method\n     */\n    function validateURL(value) {\n        const state = APIValidation.url.required().validate(value).error;\n        // State `null` means URL is valid, We do backend validation only in valid URLs\n        if (state === null) {\n            setIsValidating(true);\n            API.validateAsyncAPIByUrl(apiInputs.inputValue, { returnContent: true }).then((response) => {\n                const {\n                    body: {\n                        isValid: isValidURL, info, content, errors,\n                    },\n                } = response;\n                if (isValidURL) {\n                    info.content = content;\n                    inputsDispatcher({ action: 'preSetAPI', value: info });\n                    setValidity({ ...isValid, url: null });\n                } else {\n                    setValidity({\n                        ...isValid, url: {\n                            message: intl.formatMessage({\n                                id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.content.'\n                                    + 'validation.failed',\n                                defaultMessage: 'AsyncAPI content validation failed! ',\n                            })\n                        }\n                    });\n                    setValidationErrors(errors);\n                }\n                onValidate(isValidURL);\n                setIsValidating(false);\n            }).catch((error) => {\n                setValidity({ url: { message: error.message } });\n                onValidate(false);\n                setIsValidating(false);\n                console.error(error);\n            });\n            // Valid URL string\n            // TODO: Handle catch network or api call failures ~tmkb\n        } else {\n            setValidity({ ...isValid, url: state });\n            onValidate(false);\n        }\n    }\n\n    useEffect(() => {\n        if (inputValue) {\n            if (inputType === ProvideAsyncAPI.INPUT_TYPES.FILE) {\n                onDrop([inputValue]);\n            } else if (inputType === ProvideAsyncAPI.INPUT_TYPES.URL) {\n                validateURL(inputValue);\n            }\n        }\n    }, [inputType, inputValue]);\n\n    // TODO: Use validation + input to separate component that can be share with wsdl,swagger,graphql URL inputs ~tmkb\n    const isInvalidURL = Boolean(isValid.url);\n    let urlStateEndAdornment = null;\n    if (isValidating) {\n        urlStateEndAdornment = (\n            <InputAdornment position='end'>\n                <CircularProgress />\n            </InputAdornment>\n        );\n    } else if (isValid.url !== undefined) {\n        if (isInvalidURL) {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <ErrorOutlineIcon fontSize='large' color='error' />\n                </InputAdornment>\n            );\n        } else {\n            urlStateEndAdornment = (\n                <InputAdornment position='end'>\n                    <CheckIcon fontSize='large' color='primary' />\n                </InputAdornment>\n            );\n        }\n    }\n\n    let asyncApiInput = null;\n    if (isFileInput) {\n        asyncApiInput = (\n            <>\n                {apiInputs.inputValue ? (\n                    <List>\n                        <ListItem key={apiInputs.inputValue.path}>\n                            <ListItemAvatar>\n                                <Avatar>\n                                    <InsertDriveFile/>\n                                </Avatar>\n                            </ListItemAvatar>\n                            <ListItemText\n                                primary={`${apiInputs.inputValue.path} -\n                                    ${humanFileSize(apiInputs.inputValue.size)}`}\n                            />\n                            <ListItemSecondaryAction>\n                                <IconButton\n                                    edge='end'\n                                    aria-label='delete'\n                                    onClick={() => {\n                                        inputsDispatcher({action: 'inputValue', value: null});\n                                        inputsDispatcher({action: 'isFormValid', value: false});\n                                    }}\n                                >\n                                    <DeleteIcon/>\n                                </IconButton>\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                    </List>\n                ) : (\n                    <DropZoneLocal\n                        error={isValid.file}\n                        onDrop={onDrop}\n                        files={apiInputs.inputValue}\n                        accept='.bz,.bz2,.gz,.rar,.tar,.zip,.7z,.json,application/json,.yaml,.yml'\n                    >\n                        {/* eslint-disable */}\n                        {isValidating ? (<CircularProgress/>) :\n                            ([<FormattedMessage\n                                    id='Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.Input.file.dropzone'\n                                    defaultMessage='Drag & Drop AsyncAPI File here {break} or {break} Browse files'\n                                    values={{break: <br/>}}\n                                />,\n                                    <Button\n                                        color='primary'\n                                        variant='contained'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.Input.file.upload'\n                                            defaultMessage='Browse File to Upload'\n                                        />\n                                    </Button>,]\n                            )}\n                        {/* eslint-enable */}\n                    </DropZoneLocal>\n                )}\n            </>\n        );\n    } else if (apiInputs.inputType === 'solaceEventApiProductId') {\n        asyncApiInput = <SolaceEventAPIProductFetcher\n            apiInputs={apiInputs}\n            inputsDispatcher={inputsDispatcher}\n            onSolaceEventApiSelect={handleSolaceEventApiSelect}\n        />;\n    } else {\n        asyncApiInput = (\n            <TextField\n                autoFocus\n                id='outlined-full-width'\n                label='AsyncAPI URL'\n                placeholder='Enter AsyncAPI URL'\n                fullWidth\n                margin='normal'\n                variant='outlined'\n                onChange={({target: {value}}) => inputsDispatcher({action: 'inputValue', value})}\n                value={apiInputs.inputValue}\n                InputLabelProps={{\n                    shrink: true,\n                }}\n                InputProps={{\n                    onBlur: ({target: {value}}) => {\n                        validateURL(value);\n                    },\n                    endAdornment: urlStateEndAdornment,\n                }}\n                // 'Give the URL of AsyncAPI endpoint'\n                helperText={(isValid.url && isValid.url.message) || 'Click away to validate the URL'}\n                error={isInvalidURL}\n            />\n        );\n    }\n\n    return (\n        <Root>\n            <Grid container>\n                <Grid item xs={12} sx={{ mb: 2 }}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>\n                            <>\n                                <sup className={classes.mandatoryStar}>*</sup>\n                                {' '}\n                                <FormattedMessage\n                                    id='Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.Input.type'\n                                    defaultMessage='Input Type'\n                                />\n                            </>\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Input type'\n                            value={apiInputs.inputType}\n                            onChange={(event) => inputsDispatcher({ action: 'inputType', value: event.target.value })}\n                        >\n                            <FormControlLabel\n                                data-testid='input-asyncapi-url'\n                                value={ProvideAsyncAPI.INPUT_TYPES.URL}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.url.label',\n                                    defaultMessage: 'AsyncAPI URL',\n                                })}\n                            />\n                            <FormControlLabel\n                                data-testid='input-asyncapi-file'\n                                value={ProvideAsyncAPI.INPUT_TYPES.FILE}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.file.label',\n                                    defaultMessage: 'AsyncAPI File',\n                                })}\n                            />\n                            <FormControlLabel\n                                data-testid='input-asyncapi-solace'\n                                value={ProvideAsyncAPI.INPUT_TYPES.SOLACE_EVENT_API_PRODUCT_ID}\n                                control={<Radio color='primary' />}\n                                label={intl.formatMessage({\n                                    id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.solace.label',\n                                    defaultMessage: 'Solace Event API',\n                                })}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                {isValid.file\n                && (\n                    <Grid item md={12}>\n                        <Banner\n                            onClose={() => setValidity({ file: null })}\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='error'\n                            message={isValid.file.message}\n                            errors={validationErrors}\n                        />\n                    </Grid>\n                )}\n                <Grid item xs={12}>\n                    {asyncApiInput}\n                </Grid>\n                { gatewayVendor === 'solace' && (\n                    <Grid item xs={10} md={11}>\n                        <Chip\n                            data-testid='solace-api-label'\n                            label={intl.formatMessage({\n                                id: 'Apis.Create.AsyncAPI.Steps.ProvideAsyncAPI.solace.api.label',\n                                defaultMessage: 'Identified as Solace Event Portal API',\n                            })}\n                            icon={<CheckCircleSharpIcon style={{ color: 'green' }} />}\n                            variant='outlined'\n                            style={{ color: 'green' }}\n                        />\n                    </Grid>\n                )}\n                <Grid item xs={2} md={5} />\n            </Grid>\n        </Root>\n    );\n}\n\nProvideAsyncAPI.defaultProps = {\n    onValidate: () => { },\n};\nProvideAsyncAPI.INPUT_TYPES = {\n    URL: 'url',\n    FILE: 'file',\n    SOLACE_EVENT_API_PRODUCT_ID: 'solaceEventApiProductId',\n};\nProvideAsyncAPI.propTypes = {\n    apiInputs: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n        inputValue: PropTypes.string,\n    }).isRequired,\n    inputsDispatcher: PropTypes.func.isRequired,\n    onValidate: PropTypes.func,\n};\n"],"names":["DEFAULT_API_SECURITY_OAUTH2","API_SECURITY_BASIC_AUTH","API_SECURITY_API_KEY","API_SECURITY_MUTUAL_SSL","API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY","API_SECURITY_MUTUAL_SSL_MANDATORY","API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_OPTIONAL","API_SECURITY_MUTUAL_SSL_OPTIONAL","API_SECURITY_KEY_TYPE_PRODUCTION","API_SECURITY_KEY_TYPE_SANDBOX","ALL_AUDIENCES_ALLOWED","humanFileSize","bytesParam","si","arguments","length","undefined","bytes","thresh","Math","abs","units","u","toFixed","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","activeStyle","acceptStyle","rejectStyle","DropZoneLocal","props","message","onDrop","error","children","accept","ariaLabel","dropZoneObject","useDropzone","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","style","useMemo","_objectSpread","containerStyles","fontFamily","useTheme","typography","textAlign","React","className","_extends","multiple","defaultProps","showFilesList","propTypes","PropTypes","DEBOUNCE_DELAY_MS","classes","mandatoryStar","concat","Root","styled","_ref","theme","_defineProperty","palette","main","ProvideGraphQL","apiInputs","inputsDispatcher","onValidate","inputType","inputValue","isURLInput","INPUT_TYPES","URL","isFileInput","FILE","isEndpointInput","ENDPOINT","intl","useIntl","_useState2","_slicedToArray","useState","file","isValid","setValidity","_useState4","isValidating","setIsValidating","files","pop","validFile","API","validateGraphQLFile","then","response","_response$body","body","isValidFile","graphQLInfo","action","value","catch","console","finally","isInvalidURL","Boolean","url","urlStateEndAdornment","InputAdornment","position","CircularProgress","ErrorOutlineIcon","fontSize","id","CheckIcon","debouncedValidateURLOrEndpoint","useCallback","debounce","newURL","validateGraphQL","useIntrospection","errorMessage","isValidURL","validateURL","state","APIValidation","required","validate","useEffect","Grid","container","item","xs","sx","mb","FormControl","component","FormLabel","FormattedMessage","defaultMessage","RadioGroup","onChange","event","target","FormControlLabel","disabled","control","Radio","label","formatMessage","md","Banner","onClose","disableActions","dense","paperProps","elevation","type","List","ListItem","key","path","ListItemAvatar","Avatar","InsertDriveFile","ListItemText","primary","size","ListItemSecondaryAction","IconButton","edge","onClick","DeleteIcon","values","break","Button","variant","mt","TextField","autoFocus","placeholder","fullWidth","margin","_ref3","InputLabelProps","shrink","InputProps","onBlur","_ref4","endAdornment","helperText","_ref5","_ref6","isRequired","_Resource","Wsdl","_classCallCheck","_callSuper","_inherits","apiClient","APIClientFactory","getAPIClient","Utils","getCurrentEnvironment","CONST","API_CLIENT","client","requestBody","apis","Validation","validateWSDLDefinition","additionalProperties","implementationType","APIs","importWSDLDefinition","JSON","stringify","Resource","MethodView","method","chipColor","custom","resourceChipColors","toLowerCase","chipTextColor","getContrastText","Chip","height","width","PREFIX","searchWrapper","paper","apiWrapper","ResourceWrapper","SelectedResourceWrapper","leftMost","rightMost","colTitle","treeItemMain","treeItemMainWrapper","treeItem","hr","methodView","middleText","selectedApi","selectedTitle","buttonWrapper","selectedApiDescription","messageWrapper","tootBar","inactiveIcon","_ref2","marginTop","spacing","overflowY","marginLeft","marginRight","border","grey","common","white","overflowX","background","fontWeight","minHeight","paddingLeft","cursor","textDecorate","justifyContent","ProductResourcesEdit","apiResources","setApiResources","isStateCreate","api","resourceNotFountMessage","allApis","setAllApis","notFound","setNotFound","_useState6","searchText","setSearchText","_useState8","selectedApiPaths","setSelectedApiPaths","_useState0","setSelectedApi","_useState10","fromSearch","setFromSearch","_useState12","isSwaggerLoading","setIsSwaggerLoading","apiRestClient","filterAPIs","text","composeQuery","trim","composeQueryJSON","queryString","limit","offset","search","all","query","isValidHttpVerb","innerKey","addPropsToSelectedApiPaths","paths","apiId","latestApiResources","Object","keys","map","methodObj","checked","verb","resourceFound","resourcekey","apiResource","operations","operationKey","operation","allreadyAdded","getApiSwagger","apiSelected","getSwagger","obj","status","doRedirectToLogin","updateResourceTree","resourceToAdd","inputApiResources","updateStateHere","newApiResources","cloneDeep","name","version","newResource","toUpperCase","authType","throttlingPolicy","scopes","apiFound","indexA","operationFound","indexB","splice","push","addSelectedResourcesToTree","addAll","filteredList","list","filter","theApi","lifeCycleStatus","gatewayType","ResourceNotFound","Typography","Paper","apiObj","labelId","role","button","displayName","secondary","context","onKeyDown","Icon","VerticalDivider","CONSTS","HTTP_METHODS","includes","ListItemIcon","minWidth","Checkbox","tabIndex","disableRipple","prevSelectedApiPaths","updateCheckBox","inputProps","Array","tableCell","headerTableCell","tableRow","tableWrapper","headerTableRow","StyledPaper","hover","LinterUI","_React$useState2","page","setPage","_React$useState4","rowsPerPage","setRowsPerPage","linterResults","handleRowClick","columns","align","rows","index","severityMap","severity","line","range","start","code","overflow","TableContainer","maxHeight","Table","stickyHeader","TableHead","TableRow","column","TableCell","TableBody","slice","row","format","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","ValidationResults","isLinting","validationErrors","onLinterLineSelect","expandValidationErrors","setExpandValidationErrors","expandLinterResults","setExpandLinterResults","linterSelectedSeverity","setLinterSelectedSeverity","Accordion","A","expanded","AccordionSummary","expandIcon","ExpandMore","direction","AccordionDetails","Box","description","pt","APILintingSummary","handleChange","stopPropagation","Number","ProvideOpenAPI","isMCPServer","setLinterResults","setValidationErrors","setIsLinting","lint","content","getLinterResultsFromContent","results","reset","hasJSONStructure","definition","result","parse","_typeof","err","log","validateURLDebounced","MCPServer","validateOpenAPIByUrl","returnContent","info","errors","formattedContent","YAML","filteredOperations","op","generateUUID","_response$body2","validateOpenAPIByFile","_response$body3","_response$body4","endsWith","read","FileReader","readAsText","onloadend","_read$result","toString","StyledBox","default","selectedSeverity","setSelectedSeverity","severityCounts","forEach","ml","title","entries","exclusive","String","maxWidth","noWrap","random","ProvideWSDL","isGenerateRESTAPI","isError","isCreateMode","mode","handleWSDLValidationResponse","isWSDLValid","success","handleWSDLValidationErrorResponse","dropBoxControlLabel","validateFileOrArchive","validateUrl","spectralFunctions","spectralFormatsList","spectralSeverityMap","spectralSeverityNames","swagger","apiType","validationResults","defaultRuleSet","extends","rules","linter","Spectral","setRuleset","run","params","customRulesets","getLinterCustomRules","LinterCustomRulesets","rulesetString","parsedCustomRuleset","element","Error","stack","sort","a","b","onSolaceEventApiSelect","eventApis","setEventApis","loading","setLoading","getIntegratedAPIs","vendor","Alert","_value$split2","split","solaceEventApiProductId","solacePlanId","solaceEventApiId","eventApi","apiName","plans","plan","mr","ProvideAsyncAPI","gatewayVendor","setGatewayVendor","validateAsyncAPIByFile","validateAsyncAPIByUrl","asyncApiInput","SolaceEventAPIProductFetcher","eventApiProductId","planId","eventApiId","jsonString","urlEncodedString","encodeURIComponent","getIntegratedApiDefinition","asyncApiPayload","asyncTransportProtocols","servers","server","protocol","asyncAPIVersion","asyncapi","replace","SOLACE_EVENT_API_PRODUCT_ID","icon","CheckCircleSharpIcon"],"sourceRoot":""}