import type { HAST, MDAST } from '@stoplight/markdown';
import type { HeadingProps, LinkHeadingProps, LinkProps } from '@stoplight/mosaic';
import type { ErrorBoundaryProps } from '@stoplight/react-error-boundary';
import type { FunctionComponent, HTMLAttributes, ImgHTMLAttributes } from 'react';
import type { ParseOptions } from './utils';
export interface IMarkdownViewer extends IMarkdownViewerProps, ErrorBoundaryProps {
}
export interface IMarkdownViewerProps extends Omit<HTMLAttributes<HTMLDivElement>, 'onError'> {
    markdown: string | MDAST.Root;
    className?: string;
    parseOptions?: ParseOptions;
    includeToc?: boolean;
    tocMaxDepth?: 1 | 2 | 3 | 4;
    tocBasePath?: string;
}
export declare type DefaultComponentMapping = {
    a: FunctionComponent<Omit<LinkProps, 'target' | 'rel'>>;
    h1: FunctionComponent<Omit<HeadingProps, 'size'>>;
    h2: FunctionComponent<Omit<LinkHeadingProps, 'size'>>;
    h3: FunctionComponent<Omit<LinkHeadingProps, 'size'>>;
    h4: FunctionComponent<Omit<LinkHeadingProps, 'size'>>;
    h5: FunctionComponent<Omit<HeadingProps, 'size'>>;
    h6: FunctionComponent<Omit<HeadingProps, 'size'>>;
    blockquote: FunctionComponent<HAST.BlockquoteProperties>;
    code: FunctionComponent<Pick<MDAST.Code, 'lang' | 'resolved'> & HAST.CodeProperties>;
    img: FunctionComponent<ImgHTMLAttributes<HTMLImageElement> & HAST.ImageProperties>;
    tabs: FunctionComponent<any>;
    tab: FunctionComponent<any>;
    codegroup: FunctionComponent<any>;
};
export declare type CustomComponentMapping<M extends CustomComponents = Partial<DefaultComponentMapping>> = Partial<ReactComponents<keyof M>> & M;
declare type ReactComponents<O extends string | number | symbol = ''> = {
    [V in keyof Omit<JSX.IntrinsicElements, O>]: FunctionComponent<JSX.IntrinsicElements[V]>;
};
export declare type CustomComponents = {
    [key: string]: FunctionComponent;
};
export {};
