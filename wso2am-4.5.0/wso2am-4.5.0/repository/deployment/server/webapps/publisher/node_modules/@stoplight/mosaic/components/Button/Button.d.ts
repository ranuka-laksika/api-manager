import { FocusableProps, FocusableRefValue, PressEvents } from '@react-types/shared';
import * as React from 'react';
import { BorderRoundedProps, BorderWidthProps, IntentVals } from '../../enhancers';
import { PolymorphicComponentProps } from '../Box/types';
import { IIconProps } from '../Icon';
import { AppearanceVals } from './variants';
export declare type ButtonOwnProps = PressEvents & FocusableProps & Omit<BorderWidthProps, 'border'> & Omit<BorderRoundedProps, 'rounded'> & {
    children?: React.ReactNode;
    appearance?: AppearanceVals;
    intent?: IntentVals;
    size?: 'sm' | 'md';
    active?: boolean;
    disabled?: boolean;
    loading?: boolean;
    icon?: IIconProps['icon'] | React.ReactElement;
    iconRight?: IIconProps['icon'] | React.ReactElement;
    autoFocus?: boolean;
    noFocusRing?: boolean;
    fullWidth?: boolean;
    label?: string;
};
export declare type ButtonProps<E extends React.ElementType = typeof defaultElement> = PolymorphicComponentProps<E, ButtonOwnProps>;
declare const defaultElement = "button";
declare const _Button: <T extends React.ElementType<any> = "button">(props: PressEvents & FocusableProps & Omit<BorderWidthProps, "border"> & Omit<BorderRoundedProps, "rounded"> & {
    children?: React.ReactNode;
    appearance?: AppearanceVals;
    intent?: IntentVals;
    size?: 'sm' | 'md';
    active?: boolean;
    disabled?: boolean;
    loading?: boolean;
    icon?: IIconProps['icon'] | React.ReactElement;
    iconRight?: IIconProps['icon'] | React.ReactElement;
    autoFocus?: boolean;
    noFocusRing?: boolean;
    fullWidth?: boolean;
    label?: string;
} & import("../../enhancers").ITypographyProps & import("../../enhancers").ISizeProps & import("../../enhancers").IMarginProps & import("../../enhancers").IPaddingProps & import("../../enhancers").IShadowProps & import("../../enhancers").IColorProps & {
    outline?: "none";
    borderColor?: import("../../enhancers").BorderColorVals | import("../../enhancers/pseudo").Pseudo<import("../../enhancers").BorderColorVals, "active" | "hover" | "focus" | "focusWithin">;
} & BorderWidthProps & BorderRoundedProps & import("../../enhancers").IRingProps & import("../../enhancers").IInteractivityProps & import("../../enhancers").IFlexProps & import("../../enhancers").IPositionProps & import("../../enhancers").TransformProps & import("../../enhancers").ILayoutProps & import("../Box").DatasetProps & {
    as?: T;
    className?: string;
    role?: string;
    noFocusRing?: boolean;
    children?: React.ReactNode;
} & Omit<React.ComponentProps<T>, keyof BorderWidthProps | keyof BorderRoundedProps | "icon" | "children" | "className" | "role" | "label" | `data-${string}` | keyof import("../../enhancers").ITypographyProps | keyof import("../../enhancers").ISizeProps | keyof import("../../enhancers").IMarginProps | keyof import("../../enhancers").IPaddingProps | "boxShadow" | keyof import("../../enhancers").IColorProps | "outline" | "borderColor" | keyof import("../../enhancers").IRingProps | keyof import("../../enhancers").IInteractivityProps | keyof import("../../enhancers").IFlexProps | keyof import("../../enhancers").IPositionProps | keyof import("../../enhancers").TransformProps | keyof import("../../enhancers").ILayoutProps | "as" | "noFocusRing" | keyof PressEvents | keyof FocusableProps | "appearance" | "intent" | "size" | "active" | "disabled" | "loading" | "iconRight" | "fullWidth"> & {
    ref?: React.MutableRefObject<FocusableRefValue<HTMLElement>>;
}) => React.ReactElement;
export { _Button as Button };
