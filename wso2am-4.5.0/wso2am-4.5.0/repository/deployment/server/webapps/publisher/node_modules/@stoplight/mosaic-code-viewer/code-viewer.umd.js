(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('react/jsx-runtime'), require('prism-react-renderer/prism'), require('@stoplight/mosaic'), require('clsx'), require('prism-react-renderer'), require('react'), require('zustand/shallow')) :
  typeof define === 'function' && define.amd ? define(['exports', 'tslib', 'react/jsx-runtime', 'prism-react-renderer/prism', '@stoplight/mosaic', 'clsx', 'prism-react-renderer', 'react', 'zustand/shallow'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.CodeViewer = {}, global.tslib, global.jsxRuntime, global.ReactRendererPrism, global.mosaic, global.cn, global.PrismHighlight, global.React, global.shallow));
})(this, (function (exports, tslib, jsxRuntime, ReactRendererPrism, mosaic, cn, PrismHighlight, React, shallow) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var ReactRendererPrism__default = /*#__PURE__*/_interopDefaultLegacy(ReactRendererPrism);
  var cn__default = /*#__PURE__*/_interopDefaultLegacy(cn);
  var PrismHighlight__default = /*#__PURE__*/_interopDefaultLegacy(PrismHighlight);
  var React__namespace = /*#__PURE__*/_interopNamespace(React);
  var shallow__default = /*#__PURE__*/_interopDefaultLegacy(shallow);

  /**
   * Sets the global prism instance to the one included in prism-react-renderer if not already set on global scope
   */

  const g = typeof global !== 'undefined' ? global : window; // @ts-expect-error

  if (!g.Prism) {
    // @ts-expect-error
    g.Prism = ReactRendererPrism__default["default"];
  } // @ts-expect-error


  const Prism = g.Prism;

  /**
   * The extra languages we load in by default that prism-react-renderer does not include
   * Note that adding languages doesn't come cheap - the below adds around 6kb (+25%) to the minified + brotli package size
   */

  require('prismjs/components/prism-clojure');

  require('prismjs/components/prism-csharp');

  require('prismjs/components/prism-http');

  require('prismjs/components/prism-java');

  require('prismjs/components/prism-kotlin');

  require('prismjs/components/prism-php');

  require('prismjs/components/prism-powershell');

  require('prismjs/components/prism-r');

  require('prismjs/components/prism-ruby');

  require('prismjs/components/prism-swift');
  /**
   * cURL
   */


  Prism.languages.curl = {
    curl: /\bcurl\b/,
    url: /https?:[a-zA-Z0-9:.?=\/\-_{}]*/,
    parameter: {
      pattern: /[A-Za-z0-9\[\]-_]+ *(?=[=])/
    },
    value: [{
      pattern: /([=])([A-Za-z0-9-_.]*)/,
      lookbehind: true
    }, {
      pattern: /(["'])(\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/
    }, {
      pattern: /(\-u )([A-Za-z0-9-_.{}]*)/,
      lookbehind: true
    }],
    option: / *-[a-zA-Z]*\b/
  };

  // adapted from https://github.com/FormidableLabs/prism-react-renderer/blob/master/src/themes/nightOwl.js
  const darkTheme = {
    mode: 'dark',
    plain: {// color: '#d6deeb',
      // backgroundColor: '#011627',
    },
    styles: [{
      types: ['changed'],
      style: {
        color: 'rgb(162, 191, 252)',
        fontStyle: 'italic'
      }
    }, {
      types: ['deleted'],
      style: {
        color: 'rgba(239, 83, 80, 0.56)',
        fontStyle: 'italic'
      }
    }, {
      types: ['inserted', 'attr-name', 'function', 'url'],
      style: {
        color: '#d2a8ff'
      }
    }, {
      types: ['string', 'attr-value'],
      style: {
        color: '#a5d6ff'
      }
    }, {
      types: ['punctuation'],
      style: {
        color: 'inherit'
      }
    }, {
      types: ['comment'],
      style: {
        color: '#8b949e'
      }
    }, {
      types: ['variable'],
      style: {
        color: 'rgb(214, 222, 235)'
      }
    }, {
      types: ['number'],
      style: {
        color: 'rgb(247, 140, 108)'
      }
    }, {
      types: ['builtin', 'char', 'constant'],
      style: {
        color: 'rgb(130, 170, 255)'
      }
    }, {
      types: ['selector', 'doctype', 'value'],
      style: {
        color: 'rgb(199, 146, 234)',
        fontStyle: 'italic'
      }
    }, {
      types: ['class-name'],
      style: {
        color: '#7ee787'
      }
    }, {
      types: ['operator', 'keyword'],
      style: {
        color: '#ff7b72'
      }
    }, {
      types: ['boolean'],
      style: {
        color: '#79c0ff'
      }
    }, {
      types: ['property'],
      style: {
        color: 'rgb(128, 203, 196)'
      }
    }, {
      types: ['namespace', 'option'],
      style: {
        color: 'rgb(178, 204, 214)'
      }
    }]
  };

  // adapted from https://github.com/FormidableLabs/prism-react-renderer/blob/master/src/themes/github.js
  const lightTheme = {
    mode: 'light',
    plain: {// color: '#393A34',
      // backgroundColor: '#f6f8fa',
    },
    styles: [{
      types: ['comment', 'blockquote'],
      style: {
        color: '#969896',
        fontStyle: 'italic'
      }
    }, {
      types: ['cdata'],
      style: {
        color: '#183691'
      }
    }, {
      types: ['doctype', 'punctuation', 'variable', 'macro property'],
      style: {
        color: '#333'
      }
    }, {
      types: ['important', 'rule', 'builtin'],
      style: {
        color: '#a71d5d'
      }
    }, {
      types: ['keyword', 'operator'],
      style: {
        color: '#d73a49'
      }
    }, {
      types: ['string', 'url', 'regex', 'attr-value'],
      style: {
        color: '#032f62'
      }
    }, {
      types: ['property', 'number', 'boolean', 'entity', 'atrule', 'constant', 'symbol', 'command', 'code'],
      style: {
        color: '#005cc5'
      }
    }, {
      types: ['attr-name', 'function'],
      style: {
        color: '#6f42c1'
      }
    }, {
      types: ['selector', 'prolog'],
      style: {
        color: '#63a35c'
      }
    }, {
      types: ['namespace', 'pseudo-element', 'class', 'class-name', 'pseudo-class', 'id', 'url-reference'],
      style: {
        color: '#22863a'
      }
    }, {
      types: ['title'],
      style: {
        color: '#1d3e81',
        fontWeight: 'bold'
      }
    }, {
      types: ['list'],
      style: {
        color: '#ed6a43'
      }
    }, {
      types: ['inserted'],
      style: {
        color: '#55a532',
        backgroundColor: '#eaffea'
      }
    }, {
      types: ['deleted'],
      style: {
        color: '#bd2c00',
        backgroundColor: '#ffecec'
      }
    }, {
      types: ['bold'],
      style: {
        fontWeight: 'bold'
      }
    }, {
      types: ['italic'],
      style: {
        fontStyle: 'italic'
      }
    }, {
      languages: ['json'],
      types: ['property'],
      style: {
        color: '#183691'
      }
    }, {
      languages: ['markup'],
      types: ['tag punctuation'],
      style: {
        color: '#333'
      }
    }, {
      languages: ['css'],
      types: ['function'],
      style: {
        color: '#0086b3'
      }
    }, {
      languages: ['yaml'],
      types: ['atrule'],
      style: {
        color: '#63a35c'
      }
    }, {
      languages: ['markdown'],
      types: ['url'],
      style: {
        color: '#795da3'
      }
    }, {
      languages: ['bash'],
      types: ['keyword'],
      style: {
        color: '#0086b3'
      }
    }, {
      types: ['option'],
      style: {
        opacity: 0.7
      }
    }, {
      types: ['value'],
      style: {
        color: '#e3116c'
      }
    }, {
      types: ['function-variable'],
      style: {
        color: '#6f42c1'
      }
    }]
  };

  const useCodeTheme = () => {
    const {
      inverted
    } = React.useContext(mosaic.InvertThemeContext);
    const [isLightBg, isLightInvertedBg] = mosaic.useThemeStore(s => [s.colorValues.light, s.invertedColorValues.light], shallow__default["default"]);

    if (inverted) {
      return isLightInvertedBg ? lightTheme : darkTheme;
    }

    return isLightBg ? lightTheme : darkTheme;
  };

  const DEFAULT_HIGHLIGHT_PADDING = {
    x: 15,
    y: 12
  };
  const CODE_LINE_HEIGHT = 21;
  const CodeViewer = /*#__PURE__*/React.memo(function CodeViewer(_a) {
    var {
      value,
      className,
      language,
      customLanguage,
      showLineNumbers,
      showMaxLines,
      title,
      noCopyButton,
      highlightPadding = DEFAULT_HIGHLIGHT_PADDING,
      showAsRaw
    } = _a,
        props = tslib.__rest(_a, ["value", "className", "language", "customLanguage", "showLineNumbers", "showMaxLines", "title", "noCopyButton", "highlightPadding", "showAsRaw"]);

    const code = (value || '').trim();
    const {
      renderHighlight,
      lines
    } = useHighlight({
      value: code,
      language: language || customLanguage,
      showLineNumbers,
      showMaxLines,
      style: {
        padding: highlightPadding.y === highlightPadding.x ? `${highlightPadding.y}px` : `${highlightPadding.y}px ${highlightPadding.x}px`,
        fontFamily: 'var(--font-code)',
        fontSize: 'var(--fs-code)',
        lineHeight: 'var(--lh-code)'
      }
    });

    const _className = cn__default["default"]('sl-code-viewer sl-grid', className);

    return jsxRuntime.jsx(CodeContainer, Object.assign({
      pos: "relative",
      role: "group",
      title: title,
      className: _className,
      tabIndex: 0,
      outline: "none",
      renderHighlight: renderHighlight,
      showAsRaw: showAsRaw,
      lines: lines,
      copyValue: noCopyButton ? undefined : code,
      highlightPadding: highlightPadding,
      language: language,
      code: code
    }, props), void 0);
  });
  const lineNoWidths = {
    1: 28,
    2: 28,
    3: 36,
    4: 42,
    5: 50,
    6: 58
  };

  const useCode = (value, maxLines) => {
    return React__namespace.useMemo(() => {
      const lines = /\r?\n/g;

      if (maxLines < 1) {
        return {
          code: value,
          // Count newlines and pad to match actual line numbers
          loc: (value.match(lines) || []).length + 1,
          trimmed: false
        };
      }

      let code = '';
      let loc = 1;

      for (; loc <= maxLines; loc++) {
        const lastIndex = lines.lastIndex;
        const fragment = lines.exec(value);

        if (fragment) {
          code += `${value.slice(lastIndex, fragment.index)}${loc === maxLines ? '' : '\n'}`;
        } else {
          code += value.slice(lastIndex);
          break;
        }
      }

      return {
        code,
        loc,
        trimmed: loc > maxLines
      };
    }, [value, maxLines]);
  };

  const useHighlight = ({
    value,
    language,
    showLineNumbers,
    showMaxLines = -1,
    style: propStyle = {}
  }) => {
    const theme = useCodeTheme();
    const [actualMaxLines, setActualMaxLines] = React__namespace.useState(showMaxLines);
    const {
      code,
      loc: lines,
      trimmed
    } = useCode(value, actualMaxLines);
    React__namespace.useEffect(() => {
      setActualMaxLines(showMaxLines);
    }, [showMaxLines]); // Determine padding needed (length of line number length)

    const pad = String(lines).length;
    const gutterWidth = lineNoWidths[pad];
    return {
      pad,
      lines,
      gutterWidth: showLineNumbers ? gutterWidth : 0,
      renderHighlight: () => jsxRuntime.jsx(PrismHighlight__default["default"], Object.assign({
        code: code,
        language: language === null || language === void 0 ? void 0 : language.toLowerCase(),
        theme: theme,
        Prism: Prism
      }, {
        children: ({
          className,
          style,
          tokens,
          getLineProps,
          getTokenProps
        }) => jsxRuntime.jsxs(jsxRuntime.Fragment, {
          children: [jsxRuntime.jsx(mosaic.Box, Object.assign({
            className: cn__default["default"]('sl-code-highlight', className),
            style: Object.assign(Object.assign({}, style), propStyle)
          }, {
            children: tokens.map((line, i) => {
              var _a;

              return jsxRuntime.jsxs("div", Object.assign({}, getLineProps({
                line,
                key: i
              }), {
                className: "sl-flex"
              }, {
                children: [showLineNumbers ? jsxRuntime.jsx(mosaic.Box, Object.assign({
                  className: "sl-code-highlight__ln",
                  userSelect: "none",
                  flexShrink: 0,
                  opacity: 50,
                  style: {
                    width: gutterWidth,
                    fontSize: '0.9em',
                    paddingTop: '0.1em',
                    lineHeight: (_a = propStyle.lineHeight) !== null && _a !== void 0 ? _a : 'var(--lh-code)'
                  }
                }, {
                  children: i + 1
                }), void 0) : null, jsxRuntime.jsx("div", Object.assign({
                  className: "sl-flex-1 sl-break-all"
                }, {
                  children: line.map((token, key) => jsxRuntime.jsx("span", Object.assign({}, getTokenProps({
                    token,
                    key
                  })), key))
                }), void 0)]
              }), i);
            })
          }), void 0), trimmed ? jsxRuntime.jsx(ShowMoreLessButton, Object.assign({
            icon: "arrow-down",
            onClick: () => setActualMaxLines(-1)
          }, {
            children: "show more"
          }), void 0) : showMaxLines !== actualMaxLines ? jsxRuntime.jsx(ShowMoreLessButton, Object.assign({
            icon: "arrow-up",
            onClick: () => setActualMaxLines(showMaxLines)
          }, {
            children: "show less"
          }), void 0) : null]
        }, void 0)
      }), void 0),
      code
    };
  };
  const HighlightCodeFallback = ({
    lines,
    highlightPadding = DEFAULT_HIGHLIGHT_PADDING
  }) => {
    return jsxRuntime.jsx(mosaic.Box, Object.assign({
      className: "sl-highlight-code__fallback",
      fontSize: "sm",
      color: "muted",
      style: {
        /**
         * These values are important! They must result in fallback being the same height as rendered code viewer
         * so that there is not jumpyness in article on initial load
         */
        padding: highlightPadding.y === highlightPadding.x ? `${highlightPadding.y}px` : `${highlightPadding.y}px ${highlightPadding.x}px`,
        // could pull this from theme in future if we get --fs-code and --ln-code accessible via js in ssr
        minHeight: lines ? `${lines * CODE_LINE_HEIGHT + DEFAULT_HIGHLIGHT_PADDING.y * 2}px` : undefined
      }
    }, {
      children: "preparing..."
    }), void 0);
  };
  const CodeContainer = /*#__PURE__*/React.memo(function CodeContainer(_a) {
    var {
      title,
      children,
      maxHeight = 500,
      innerProps = {},
      renderHighlight,
      showAsRaw,
      lines,
      copyValue,
      highlightPadding = DEFAULT_HIGHLIGHT_PADDING,
      language,
      code
    } = _a,
        props = tslib.__rest(_a, ["title", "children", "maxHeight", "innerProps", "renderHighlight", "showAsRaw", "lines", "copyValue", "highlightPadding", "language", "code"]);

    const defaultElement = language === 'undefined' || !language ? 'div' : 'pre';
    const shouldRenderRaw = showAsRaw;
    return jsxRuntime.jsxs(mosaic.Box, Object.assign({
      as: defaultElement,
      overflowY: "hidden",
      overflowX: "hidden"
    }, props, {
      children: [title && jsxRuntime.jsx(mosaic.Box, Object.assign({
        className: "sl-code-viewer__title",
        py: 2.5,
        px: 4,
        fontFamily: "ui",
        pointerEvents: "none",
        bg: "canvas-tint",
        fontWeight: "medium",
        fontSize: "lg",
        borderB: true
      }, {
        children: title.replace(/__/g, ' ')
      }), void 0), jsxRuntime.jsx(mosaic.Box, Object.assign({
        className: "sl-code-viewer__scroller",
        overflowY: "auto",
        overflowX: "auto",
        style: {
          maxHeight: maxHeight
        }
      }, innerProps, {
        children: jsxRuntime.jsx(mosaic.NoSsr, Object.assign({
          fallback: jsxRuntime.jsx(HighlightCodeFallback, {
            lines: lines,
            highlightPadding: highlightPadding
          }, void 0)
        }, {
          children: shouldRenderRaw ? jsxRuntime.jsx(CodeContainerRenderRaw, {
            code: code,
            highlightPadding: highlightPadding
          }, void 0) : jsxRuntime.jsx(CodeContainerRenderHighlight, {
            renderHighlight: renderHighlight
          }, void 0)
        }), void 0)
      }), void 0), copyValue ? jsxRuntime.jsx(mosaic.NoSsr, {
        children: jsxRuntime.jsx(CornerCopyButton, {
          copyValue: copyValue
        }, void 0)
      }, void 0) : null]
    }), void 0);
  });
  const CornerCopyButton = props => {
    return jsxRuntime.jsx(mosaic.Box, Object.assign({
      pos: "absolute",
      right: 0,
      pr: 2,
      style: {
        top: 9
      },
      visibility: {
        default: 'invisible',
        groupHover: 'visible'
      },
      "data-testid": "copy-button"
    }, {
      children: jsxRuntime.jsx(mosaic.CopyButton, Object.assign({}, props), void 0)
    }), void 0);
  };

  const ShowMoreLessButton = _a => {
    var {
      children,
      icon
    } = _a,
        props = tslib.__rest(_a, ["children", "icon"]);

    return jsxRuntime.jsxs(mosaic.Box, Object.assign({
      as: "button",
      bg: {
        default: 'canvas-200',
        hover: 'canvas-300'
      },
      py: 3,
      borderT: true,
      borderColor: "light",
      my: "auto",
      w: "full",
      textAlign: "center",
      display: "block",
      pos: "relative"
    }, props, {
      children: [jsxRuntime.jsx(mosaic.Box, {
        as: "span",
        display: "block",
        pos: "absolute",
        w: "full",
        h: 14,
        top: -14,
        style: {
          pointerEvents: 'none',
          background: 'linear-gradient(0deg, var(--color-canvas-200) 25%, transparent 100%)'
        }
      }, void 0), jsxRuntime.jsx(mosaic.Icon, {
        icon: icon
      }, void 0), jsxRuntime.jsx(mosaic.Box, Object.assign({
        as: "span",
        px: 2,
        fontWeight: "medium"
      }, {
        children: children
      }), void 0), jsxRuntime.jsx(mosaic.Icon, {
        icon: icon
      }, void 0)]
    }), void 0);
  };

  function CodeContainerRenderHighlight({
    renderHighlight
  }) {
    return renderHighlight ? renderHighlight() : null;
  }

  function CodeContainerRenderRaw({
    code,
    highlightPadding
  }) {
    return jsxRuntime.jsx(mosaic.Box, Object.assign({
      style: {
        padding: highlightPadding.y === highlightPadding.x ? `${highlightPadding.y}px` : `${highlightPadding.y}px ${highlightPadding.x}px`
      }
    }, {
      children: jsxRuntime.jsx(mosaic.Textarea, {
        readOnly: true,
        defaultValue: code,
        style: {
          fontFamily: 'var(--font-code)',
          fontSize: 'var(--fs-code)',
          lineHeight: 'var(--lh-code)',
          border: '0px',
          background: 'transparent'
        }
      }, void 0)
    }), void 0);
  }

  exports.CODE_LINE_HEIGHT = CODE_LINE_HEIGHT;
  exports.CodeContainer = CodeContainer;
  exports.CodeViewer = CodeViewer;
  exports.CornerCopyButton = CornerCopyButton;
  exports.DEFAULT_HIGHLIGHT_PADDING = DEFAULT_HIGHLIGHT_PADDING;
  exports.HighlightCodeFallback = HighlightCodeFallback;
  exports.Prism = Prism;
  exports.darkTheme = darkTheme;
  exports.lightTheme = lightTheme;
  exports.useCodeTheme = useCodeTheme;
  exports.useHighlight = useHighlight;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=code-viewer.umd.js.map
